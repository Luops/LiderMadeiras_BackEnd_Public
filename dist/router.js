"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name, symbol) => {
  return (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a5, b5) => {
  for (var prop in b5 || (b5 = {}))
    if (__hasOwnProp.call(b5, prop))
      __defNormalProp(a5, prop, b5[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b5)) {
      if (__propIsEnum.call(b5, prop))
        __defNormalProp(a5, prop, b5[prop]);
    }
  return a5;
};
var __spreadProps = (a5, b5) => __defProps(a5, __getOwnPropDescs(b5));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e5) {
        reject(e5);
      }
    };
    var step = (x3) => x3.done ? resolve(x3.value) : Promise.resolve(x3.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var __await = function(promise, isYieldStar) {
  this[0] = promise;
  this[1] = isYieldStar;
};
var __asyncGenerator = (__this, __arguments, generator) => {
  var resume = (k5, v3, yes, no) => {
    try {
      var x3 = generator[k5](v3), isAwait = (v3 = x3.value) instanceof __await, done = x3.done;
      Promise.resolve(isAwait ? v3[0] : v3).then((y3) => isAwait ? resume(k5 === "return" ? k5 : "next", v3[1] ? { done: y3.done, value: y3.value } : y3, yes, no) : yes({ value: y3, done })).catch((e5) => resume("throw", e5, yes, no));
    } catch (e5) {
      no(e5);
    }
  };
  var method = (k5) => it[k5] = (x3) => new Promise((yes, no) => resume(k5, x3, yes, no));
  var it = {};
  return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
};
var __forAwait = (obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method("next"), method("return"), it);

// config/logger.ts
var logger_exports = {};
__export(logger_exports, {
  default: () => logger_default
});
var import_winston, import_config, levels, level, colors, format, transports, Logger, logger_default;
var init_logger = __esm({
  "config/logger.ts"() {
    "use strict";
    import_winston = __toESM(require("winston"));
    import_config = __toESM(require("config"));
    levels = {
      error: 0,
      warn: 1,
      info: 2,
      http: 3,
      debug: 4
    };
    level = () => {
      const env2 = import_config.default.get("env") || "development";
      const isDevelopment = env2 === "development";
      return isDevelopment ? "debug" : "warn";
    };
    colors = {
      error: "red",
      warn: "yellow",
      info: "green",
      http: "magenta",
      debug: "white"
    };
    import_winston.default.addColors(colors);
    format = import_winston.default.format.combine(
      import_winston.default.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
      // Formato para tempo
      import_winston.default.format.colorize({ all: true }),
      // Ativar as cores
      import_winston.default.format.printf(
        (info) => `${info.timestamp} - ${info.level}: ${info.message}`
        // Formato da mensagem
      )
    );
    transports = [
      new import_winston.default.transports.Console(),
      new import_winston.default.transports.File({
        filename: "logs/error.log",
        level: "error"
      }),
      new import_winston.default.transports.File({ filename: "logs/all.log" })
    ];
    Logger = import_winston.default.createLogger({
      level: level(),
      levels,
      format,
      transports
    });
    logger_default = Logger;
  }
});

// node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js
var getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig;
var init_httpExtensionConfiguration = __esm({
  "node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
    "use strict";
    getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler) {
          httpHandler = handler;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    };
    resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    };
  }
});

// node_modules/@smithy/protocol-http/dist-es/extensions/index.js
var init_extensions = __esm({
  "node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    "use strict";
    init_httpExtensionConfiguration();
  }
});

// node_modules/@smithy/types/dist-es/abort.js
var init_abort = __esm({
  "node_modules/@smithy/types/dist-es/abort.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/auth.js
var HttpAuthLocation;
var init_auth = __esm({
  "node_modules/@smithy/types/dist-es/auth.js"() {
    "use strict";
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation || (HttpAuthLocation = {}));
  }
});

// node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js
var init_blob_payload_input_types = __esm({
  "node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/checksum.js
var init_checksum = __esm({
  "node_modules/@smithy/types/dist-es/checksum.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/client.js
var init_client = __esm({
  "node_modules/@smithy/types/dist-es/client.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/command.js
var init_command = __esm({
  "node_modules/@smithy/types/dist-es/command.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/connection/config.js
var init_config = __esm({
  "node_modules/@smithy/types/dist-es/connection/config.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/connection/manager.js
var init_manager = __esm({
  "node_modules/@smithy/types/dist-es/connection/manager.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/connection/pool.js
var init_pool = __esm({
  "node_modules/@smithy/types/dist-es/connection/pool.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/connection/index.js
var init_connection = __esm({
  "node_modules/@smithy/types/dist-es/connection/index.js"() {
    "use strict";
    init_config();
    init_manager();
    init_pool();
  }
});

// node_modules/@smithy/types/dist-es/crypto.js
var init_crypto = __esm({
  "node_modules/@smithy/types/dist-es/crypto.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/encode.js
var init_encode = __esm({
  "node_modules/@smithy/types/dist-es/encode.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoint.js
var EndpointURLScheme;
var init_endpoint = __esm({
  "node_modules/@smithy/types/dist-es/endpoint.js"() {
    "use strict";
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme || (EndpointURLScheme = {}));
  }
});

// node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js
var init_EndpointRuleObject = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js
var init_ErrorRuleObject = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js
var init_RuleSetObject = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoints/shared.js
var init_shared = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js
var init_TreeRuleObject = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/endpoints/index.js
var init_endpoints = __esm({
  "node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    "use strict";
    init_EndpointRuleObject();
    init_ErrorRuleObject();
    init_RuleSetObject();
    init_shared();
    init_TreeRuleObject();
  }
});

// node_modules/@smithy/types/dist-es/eventStream.js
var init_eventStream = __esm({
  "node_modules/@smithy/types/dist-es/eventStream.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/extensions/checksum.js
var AlgorithmId;
var init_checksum2 = __esm({
  "node_modules/@smithy/types/dist-es/extensions/checksum.js"() {
    "use strict";
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId || (AlgorithmId = {}));
  }
});

// node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js
var init_defaultClientConfiguration = __esm({
  "node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
    "use strict";
    init_checksum2();
  }
});

// node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js
var init_defaultExtensionConfiguration = __esm({
  "node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/extensions/index.js
var init_extensions2 = __esm({
  "node_modules/@smithy/types/dist-es/extensions/index.js"() {
    "use strict";
    init_defaultClientConfiguration();
    init_defaultExtensionConfiguration();
    init_checksum2();
  }
});

// node_modules/@smithy/types/dist-es/http.js
var FieldPosition;
var init_http = __esm({
  "node_modules/@smithy/types/dist-es/http.js"() {
    "use strict";
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition || (FieldPosition = {}));
  }
});

// node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js
var init_awsCredentialIdentity = __esm({
  "node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/identity/identity.js
var init_identity = __esm({
  "node_modules/@smithy/types/dist-es/identity/identity.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/identity/index.js
var init_identity2 = __esm({
  "node_modules/@smithy/types/dist-es/identity/index.js"() {
    "use strict";
    init_awsCredentialIdentity();
    init_identity();
  }
});

// node_modules/@smithy/types/dist-es/logger.js
var init_logger2 = __esm({
  "node_modules/@smithy/types/dist-es/logger.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/middleware.js
var init_middleware = __esm({
  "node_modules/@smithy/types/dist-es/middleware.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/pagination.js
var init_pagination = __esm({
  "node_modules/@smithy/types/dist-es/pagination.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/profile.js
var init_profile = __esm({
  "node_modules/@smithy/types/dist-es/profile.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/response.js
var init_response = __esm({
  "node_modules/@smithy/types/dist-es/response.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/retry.js
var init_retry = __esm({
  "node_modules/@smithy/types/dist-es/retry.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/serde.js
var init_serde = __esm({
  "node_modules/@smithy/types/dist-es/serde.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/shapes.js
var init_shapes = __esm({
  "node_modules/@smithy/types/dist-es/shapes.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/signature.js
var init_signature = __esm({
  "node_modules/@smithy/types/dist-es/signature.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/stream.js
var init_stream = __esm({
  "node_modules/@smithy/types/dist-es/stream.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js
var init_streaming_blob_common_types = __esm({
  "node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js
var init_streaming_blob_payload_input_types = __esm({
  "node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js
var init_streaming_blob_payload_output_types = __esm({
  "node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/transfer.js
var RequestHandlerProtocol;
var init_transfer = __esm({
  "node_modules/@smithy/types/dist-es/transfer.js"() {
    "use strict";
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol || (RequestHandlerProtocol = {}));
  }
});

// node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js
var init_client_payload_blob_type_narrow = __esm({
  "node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/transform/type-transform.js
var init_type_transform = __esm({
  "node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/uri.js
var init_uri = __esm({
  "node_modules/@smithy/types/dist-es/uri.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/util.js
var init_util = __esm({
  "node_modules/@smithy/types/dist-es/util.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/waiter.js
var init_waiter = __esm({
  "node_modules/@smithy/types/dist-es/waiter.js"() {
    "use strict";
  }
});

// node_modules/@smithy/types/dist-es/index.js
var init_dist_es = __esm({
  "node_modules/@smithy/types/dist-es/index.js"() {
    "use strict";
    init_abort();
    init_auth();
    init_blob_payload_input_types();
    init_checksum();
    init_client();
    init_command();
    init_connection();
    init_crypto();
    init_encode();
    init_endpoint();
    init_endpoints();
    init_eventStream();
    init_extensions2();
    init_http();
    init_identity2();
    init_logger2();
    init_middleware();
    init_pagination();
    init_profile();
    init_response();
    init_retry();
    init_serde();
    init_shapes();
    init_signature();
    init_stream();
    init_streaming_blob_common_types();
    init_streaming_blob_payload_input_types();
    init_streaming_blob_payload_output_types();
    init_transfer();
    init_client_payload_blob_type_narrow();
    init_type_transform();
    init_uri();
    init_util();
    init_waiter();
  }
});

// node_modules/@smithy/protocol-http/dist-es/Field.js
var init_Field = __esm({
  "node_modules/@smithy/protocol-http/dist-es/Field.js"() {
    "use strict";
    init_dist_es();
  }
});

// node_modules/@smithy/protocol-http/dist-es/Fields.js
var init_Fields = __esm({
  "node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
    "use strict";
  }
});

// node_modules/@smithy/protocol-http/dist-es/httpHandler.js
var init_httpHandler = __esm({
  "node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
    "use strict";
  }
});

// node_modules/@smithy/protocol-http/dist-es/httpRequest.js
function cloneQuery(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return __spreadProps(__spreadValues({}, carry), {
      [paramName]: Array.isArray(param) ? [...param] : param
    });
  }, {});
}
var HttpRequest;
var init_httpRequest = __esm({
  "node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    "use strict";
    HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request2) {
        if (!request2)
          return false;
        const req = request2;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest(__spreadProps(__spreadValues({}, this), {
          headers: __spreadValues({}, this.headers)
        }));
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
  }
});

// node_modules/@smithy/protocol-http/dist-es/httpResponse.js
var HttpResponse;
var init_httpResponse = __esm({
  "node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    "use strict";
    HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});

// node_modules/@smithy/protocol-http/dist-es/isValidHostname.js
function isValidHostname(hostname) {
  const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname);
}
var init_isValidHostname = __esm({
  "node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
    "use strict";
  }
});

// node_modules/@smithy/protocol-http/dist-es/types.js
var init_types = __esm({
  "node_modules/@smithy/protocol-http/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/protocol-http/dist-es/index.js
var init_dist_es2 = __esm({
  "node_modules/@smithy/protocol-http/dist-es/index.js"() {
    "use strict";
    init_extensions();
    init_Field();
    init_Fields();
    init_httpHandler();
    init_httpRequest();
    init_httpResponse();
    init_isValidHostname();
    init_types();
  }
});

// node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js
function addExpectContinueMiddleware(options) {
  return (next) => (args) => __async(this, null, function* () {
    const { request: request2 } = args;
    if (HttpRequest.isInstance(request2) && request2.body && options.runtime === "node") {
      request2.headers = __spreadProps(__spreadValues({}, request2.headers), {
        Expect: "100-continue"
      });
    }
    return next(__spreadProps(__spreadValues({}, args), {
      request: request2
    }));
  });
}
var addExpectContinueMiddlewareOptions, getAddExpectContinuePlugin;
var init_dist_es3 = __esm({
  "node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js"() {
    "use strict";
    init_dist_es2();
    addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    getAddExpectContinuePlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware, hostHeaderMiddlewareOptions, getHostHeaderPlugin;
var init_dist_es4 = __esm({
  "node_modules/@aws-sdk/middleware-host-header/dist-es/index.js"() {
    "use strict";
    init_dist_es2();
    hostHeaderMiddleware = (options) => (next) => (args) => __async(void 0, null, function* () {
      if (!HttpRequest.isInstance(args.request))
        return next(args);
      const { request: request2 } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request2.headers[":authority"]) {
        delete request2.headers["host"];
        request2.headers[":authority"] = "";
      } else if (!request2.headers["host"]) {
        let host = request2.hostname;
        if (request2.port != null)
          host += `:${request2.port}`;
        request2.headers["host"] = host;
      }
      return next(args);
    });
    hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware, loggerMiddlewareOptions, getLoggerPlugin;
var init_loggerMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"() {
    "use strict";
    loggerMiddleware = () => (next, context) => (args) => __async(void 0, null, function* () {
      var _b, _c;
      try {
        const response = yield next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog != null ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const _a = response.output, { $metadata } = _a, outputWithoutMetadata = __objRest(_a, ["$metadata"]);
        (_b = logger2 == null ? void 0 : logger2.info) == null ? void 0 : _b.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_c = logger2 == null ? void 0 : logger2.error) == null ? void 0 : _c.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    });
    loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-es/index.js
var init_dist_es5 = __esm({
  "node_modules/@aws-sdk/middleware-logger/dist-es/index.js"() {
    "use strict";
    init_loggerMiddleware();
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var TRACE_ID_HEADER_NAME, ENV_LAMBDA_FUNCTION_NAME, ENV_TRACE_ID, recursionDetectionMiddleware, addRecursionDetectionMiddlewareOptions, getRecursionDetectionPlugin;
var init_dist_es6 = __esm({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"() {
    "use strict";
    init_dist_es2();
    TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    recursionDetectionMiddleware = (options) => (next) => (args) => __async(void 0, null, function* () {
      const { request: request2 } = args;
      if (!HttpRequest.isInstance(request2) || options.runtime !== "node" || request2.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request2.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request: request2
      }));
    });
    addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js
var NoOpLogger;
var init_NoOpLogger = __esm({
  "node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    "use strict";
    NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js
var constructStack, stepWeights, priorityWeights;
var init_MiddlewareStack = __esm({
  "node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"() {
    "use strict";
    constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a5, b5) => stepWeights[b5.step] - stepWeights[a5.step] || priorityWeights[b5.priority || "normal"] - priorityWeights[a5.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, __spreadValues({}, entry));
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, __spreadValues({}, entry));
        });
        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = __spreadValues({
            step: "initialize",
            priority: "normal",
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = __spreadValues({
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          var _a, _b;
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || ((_b = (_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) != null ? _b : false));
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            var _a;
            const step = (_a = mw.step) != null ? _a : mw.relation + " " + mw.toMiddleware;
            return mw.name + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }
      };
      return stack;
    };
    stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-es/index.js
var init_dist_es7 = __esm({
  "node_modules/@smithy/middleware-stack/dist-es/index.js"() {
    "use strict";
    init_MiddlewareStack();
  }
});

// node_modules/@smithy/smithy-client/dist-es/client.js
var Client;
var init_client2 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/client.js"() {
    "use strict";
    init_dist_es7();
    Client = class {
      constructor(config2) {
        this.middlewareStack = constructStack();
        this.config = config2;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
  }
});

// node_modules/@smithy/is-array-buffer/dist-es/index.js
var isArrayBuffer;
var init_dist_es8 = __esm({
  "node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
    "use strict";
    isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
  }
});

// node_modules/@smithy/util-buffer-from/dist-es/index.js
var import_buffer, fromArrayBuffer, fromString;
var init_dist_es9 = __esm({
  "node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    "use strict";
    init_dist_es8();
    import_buffer = require("buffer");
    fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    };
    fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    };
  }
});

// node_modules/@smithy/util-base64/dist-es/fromBase64.js
var BASE64_REGEX, fromBase64;
var init_fromBase64 = __esm({
  "node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    "use strict";
    init_dist_es9();
    BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});

// node_modules/@smithy/util-base64/dist-es/toBase64.js
var toBase64;
var init_toBase64 = __esm({
  "node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    "use strict";
    init_dist_es9();
    toBase64 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
  }
});

// node_modules/@smithy/util-base64/dist-es/index.js
var init_dist_es10 = __esm({
  "node_modules/@smithy/util-base64/dist-es/index.js"() {
    "use strict";
    init_fromBase64();
    init_toBase64();
  }
});

// node_modules/@smithy/util-utf8/dist-es/fromUtf8.js
var fromUtf8;
var init_fromUtf8 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    "use strict";
    init_dist_es9();
    fromUtf8 = (input) => {
      const buf = fromString(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});

// node_modules/@smithy/util-utf8/dist-es/toUint8Array.js
var toUint8Array;
var init_toUint8Array = __esm({
  "node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    "use strict";
    init_fromUtf8();
    toUint8Array = (data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});

// node_modules/@smithy/util-utf8/dist-es/toUtf8.js
var toUtf8;
var init_toUtf8 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    "use strict";
    init_dist_es9();
    toUtf8 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
  }
});

// node_modules/@smithy/util-utf8/dist-es/index.js
var init_dist_es11 = __esm({
  "node_modules/@smithy/util-utf8/dist-es/index.js"() {
    "use strict";
    init_fromUtf8();
    init_toUint8Array();
    init_toUtf8();
  }
});

// node_modules/@smithy/util-stream/dist-es/blob/transforms.js
function transformToString(payload, encoding = "utf-8") {
  if (encoding === "base64") {
    return toBase64(payload);
  }
  return toUtf8(payload);
}
function transformFromString(str, encoding) {
  if (encoding === "base64") {
    return Uint8ArrayBlobAdapter.mutate(fromBase64(str));
  }
  return Uint8ArrayBlobAdapter.mutate(fromUtf8(str));
}
var init_transforms = __esm({
  "node_modules/@smithy/util-stream/dist-es/blob/transforms.js"() {
    "use strict";
    init_dist_es10();
    init_dist_es11();
    init_Uint8ArrayBlobAdapter();
  }
});

// node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js
var Uint8ArrayBlobAdapter;
var init_Uint8ArrayBlobAdapter = __esm({
  "node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
    "use strict";
    init_transforms();
    Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
  }
});

// node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js
var import_stream, getAwsChunkedEncodingStream;
var init_getAwsChunkedEncodingStream = __esm({
  "node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
    "use strict";
    import_stream = require("stream");
    getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new import_stream.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", () => __async(void 0, null, function* () {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(yield digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      }));
      return awsChunkedEncodingStream;
    };
  }
});

// node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escapeUri, hexEncode;
var init_escape_uri = __esm({
  "node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    "use strict";
    escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    hexEncode = (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js
var init_escape_uri_path = __esm({
  "node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
    "use strict";
    init_escape_uri();
  }
});

// node_modules/@smithy/util-uri-escape/dist-es/index.js
var init_dist_es12 = __esm({
  "node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    "use strict";
    init_escape_uri();
    init_escape_uri_path();
  }
});

// node_modules/@smithy/querystring-builder/dist-es/index.js
function buildQueryString(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri(key);
    if (Array.isArray(value)) {
      for (let i5 = 0, iLen = value.length; i5 < iLen; i5++) {
        parts.push(`${key}=${escapeUri(value[i5])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
var init_dist_es13 = __esm({
  "node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    "use strict";
    init_dist_es12();
  }
});

// node_modules/@smithy/node-http-handler/dist-es/constants.js
var NODEJS_TIMEOUT_ERROR_CODES;
var init_constants = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/constants.js"() {
    "use strict";
    NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js
var getTransformedHeaders;
var init_get_transformed_headers = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js"() {
    "use strict";
    getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js
var setConnectionTimeout;
var init_set_connection_timeout = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js"() {
    "use strict";
    setConnectionTimeout = (request2, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request2.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request2.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js
var setSocketKeepAlive;
var init_set_socket_keep_alive = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js"() {
    "use strict";
    setSocketKeepAlive = (request2, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request2.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js
var setSocketTimeout;
var init_set_socket_timeout = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js"() {
    "use strict";
    setSocketTimeout = (request2, reject, timeoutInMs = 0) => {
      request2.setTimeout(timeoutInMs, () => {
        request2.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/write-request-body.js
function writeRequestBody(_0, _1) {
  return __async(this, arguments, function* (httpRequest2, request2, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    var _a;
    const headers = (_a = request2.headers) != null ? _a : {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let hasError = false;
    if (expect === "100-continue") {
      yield Promise.race([
        new Promise((resolve) => {
          timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
        }),
        new Promise((resolve) => {
          httpRequest2.on("continue", () => {
            clearTimeout(timeoutId);
            resolve();
          });
          httpRequest2.on("error", () => {
            hasError = true;
            clearTimeout(timeoutId);
            resolve();
          });
        })
      ]);
    }
    if (!hasError) {
      writeBody(httpRequest2, request2.body);
    }
  });
}
function writeBody(httpRequest2, body) {
  if (body instanceof import_stream2.Readable) {
    body.pipe(httpRequest2);
  } else if (body) {
    httpRequest2.end(Buffer.from(body));
  } else {
    httpRequest2.end();
  }
}
var import_stream2, MIN_WAIT_TIME;
var init_write_request_body = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/write-request-body.js"() {
    "use strict";
    import_stream2 = require("stream");
    MIN_WAIT_TIME = 1e3;
  }
});

// node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js
var import_http, import_https, NodeHttpHandler;
var init_node_http_handler = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es13();
    import_http = require("http");
    import_https = require("https");
    init_constants();
    init_get_transformed_headers();
    init_set_connection_timeout();
    init_set_socket_keep_alive();
    init_set_socket_timeout();
    init_write_request_body();
    NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout != null ? requestTimeout : socketTimeout,
          httpAgent: httpAgent || new import_http.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new import_https.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();
        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();
      }
      handle(_0) {
        return __async(this, arguments, function* (request2, { abortSignal } = {}) {
          if (!this.config) {
            this.config = yield this.configProvider;
          }
          return new Promise((_resolve, _reject) => {
            var _a, _b;
            let writeRequestBodyPromise = void 0;
            const resolve = (arg) => __async(this, null, function* () {
              yield writeRequestBodyPromise;
              _resolve(arg);
            });
            const reject = (arg) => __async(this, null, function* () {
              yield writeRequestBodyPromise;
              _reject(arg);
            });
            if (!this.config) {
              throw new Error("Node HTTP request handler config is not resolved");
            }
            if (abortSignal == null ? void 0 : abortSignal.aborted) {
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
              return;
            }
            const isSSL = request2.protocol === "https:";
            const queryString = buildQueryString(request2.query || {});
            let auth = void 0;
            if (request2.username != null || request2.password != null) {
              const username = (_a = request2.username) != null ? _a : "";
              const password = (_b = request2.password) != null ? _b : "";
              auth = `${username}:${password}`;
            }
            let path3 = request2.path;
            if (queryString) {
              path3 += `?${queryString}`;
            }
            if (request2.fragment) {
              path3 += `#${request2.fragment}`;
            }
            const nodeHttpsOptions = {
              headers: request2.headers,
              host: request2.hostname,
              method: request2.method,
              path: path3,
              port: request2.port,
              agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
              auth
            };
            const requestFunc = isSSL ? import_https.request : import_http.request;
            const req = requestFunc(nodeHttpsOptions, (res) => {
              const httpResponse = new HttpResponse({
                statusCode: res.statusCode || -1,
                reason: res.statusMessage,
                headers: getTransformedHeaders(res.headers),
                body: res
              });
              resolve({ response: httpResponse });
            });
            req.on("error", (err) => {
              if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
                reject(Object.assign(err, { name: "TimeoutError" }));
              } else {
                reject(err);
              }
            });
            setConnectionTimeout(req, reject, this.config.connectionTimeout);
            setSocketTimeout(req, reject, this.config.requestTimeout);
            if (abortSignal) {
              abortSignal.onabort = () => {
                req.abort();
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
              };
            }
            const httpAgent = nodeHttpsOptions.agent;
            if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
              setSocketKeepAlive(req, {
                keepAlive: httpAgent.keepAlive,
                keepAliveMsecs: httpAgent.keepAliveMsecs
              });
            }
            writeRequestBodyPromise = writeRequestBody(req, request2, this.config.requestTimeout).catch(_reject);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config2) => {
          return __spreadProps(__spreadValues({}, config2), {
            [key]: value
          });
        });
      }
      httpHandlerConfigs() {
        var _a;
        return (_a = this.config) != null ? _a : {};
      }
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js
var NodeHttp2ConnectionPool;
var init_node_http2_connection_pool = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js"() {
    "use strict";
    NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions != null ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s5) => s5 !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js
var init_node_http2_connection_manager = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js"() {
    "use strict";
    init_node_http2_connection_pool();
  }
});

// node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js
var init_node_http2_handler = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es13();
    init_get_transformed_headers();
    init_node_http2_connection_manager();
    init_write_request_body();
  }
});

// node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js
var import_stream3, Collector;
var init_collector = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js"() {
    "use strict";
    import_stream3 = require("stream");
    Collector = class extends import_stream3.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
  }
});

// node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js
var streamCollector;
var init_stream_collector = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js"() {
    "use strict";
    init_collector();
    streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
  }
});

// node_modules/@smithy/node-http-handler/dist-es/index.js
var init_dist_es14 = __esm({
  "node_modules/@smithy/node-http-handler/dist-es/index.js"() {
    "use strict";
    init_node_http_handler();
    init_node_http2_handler();
    init_stream_collector();
  }
});

// node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js
var import_stream4, import_util, ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED, sdkStreamMixin;
var init_sdk_stream_mixin = __esm({
  "node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
    "use strict";
    init_dist_es14();
    init_dist_es9();
    import_stream4 = require("stream");
    import_util = require("util");
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof import_stream4.Readable)) {
        const name = ((_b = (_a = stream == null ? void 0 : stream.__proto__) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = () => __async(void 0, null, function* () {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return yield streamCollector(stream);
      });
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: (encoding) => __async(void 0, null, function* () {
          const buf = yield transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return fromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new import_util.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        }),
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof import_stream4.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return import_stream4.Readable.toWeb(stream);
        }
      });
    };
  }
});

// node_modules/@smithy/util-stream/dist-es/index.js
var init_dist_es15 = __esm({
  "node_modules/@smithy/util-stream/dist-es/index.js"() {
    "use strict";
    init_Uint8ArrayBlobAdapter();
    init_getAwsChunkedEncodingStream();
    init_sdk_stream_mixin();
  }
});

// node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js
var collectBody;
var init_collect_stream_body = __esm({
  "node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
    "use strict";
    init_dist_es15();
    collectBody = (..._0) => __async(void 0, [..._0], function* (streamBody = new Uint8Array(), context) {
      if (streamBody instanceof Uint8Array) {
        return Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return Uint8ArrayBlobAdapter.mutate(yield fromContext);
    });
  }
});

// node_modules/@smithy/smithy-client/dist-es/command.js
var Command;
var init_command2 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/command.js"() {
    "use strict";
    init_dist_es7();
    Command = class {
      constructor() {
        this.middlewareStack = constructStack();
      }
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/constants.js
var SENSITIVE_STRING;
var init_constants2 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/constants.js"() {
    "use strict";
    SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js
var createAggregatedClient;
var init_create_aggregated_client = __esm({
  "node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
    "use strict";
    createAggregatedClient = (commands5, Client2) => {
      for (const command of Object.keys(commands5)) {
        const CommandCtor = commands5[command];
        const methodImpl = function(args, optionsOrCb, cb) {
          return __async(this, null, function* () {
            const command2 = new CommandCtor(args);
            if (typeof optionsOrCb === "function") {
              this.send(command2, optionsOrCb);
            } else if (typeof cb === "function") {
              if (typeof optionsOrCb !== "object")
                throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
              this.send(command2, optionsOrCb || {}, cb);
            } else {
              return this.send(command2, optionsOrCb);
            }
          });
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/parse-utils.js
var parseBoolean, expectNumber, MAX_FLOAT, expectFloat32, expectLong, expectInt32, expectShort, expectByte, expectSizedInt, castInt, expectNonNull, expectObject, expectString, expectUnion, strictParseFloat32, NUMBER_REGEX, parseNumber, strictParseLong, strictParseInt32, strictParseShort, strictParseByte, stackTraceWarning, logger;
var init_parse_utils = __esm({
  "node_modules/@smithy/smithy-client/dist-es/parse-utils.js"() {
    "use strict";
    parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    expectFloat32 = (value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    expectInt32 = (value) => expectSizedInt(value, 32);
    expectShort = (value) => expectSizedInt(value, 16);
    expectByte = (value) => expectSizedInt(value, 8);
    expectSizedInt = (value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v3]) => v3 != null).map(([k5]) => k5);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    };
    NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    strictParseLong = (value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    };
    strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    };
    strictParseShort = (value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    };
    strictParseByte = (value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    };
    stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s5) => !s5.includes("stackTraceWarning")).join("\n");
    };
    logger = {
      warn: console.warn
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/date-utils.js
function dateToUtcString(date) {
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth();
  const dayOfWeek = date.getUTCDay();
  const dayOfMonthInt = date.getUTCDate();
  const hoursInt = date.getUTCHours();
  const minutesInt = date.getUTCMinutes();
  const secondsInt = date.getUTCSeconds();
  const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
  const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
  const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
  const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
  return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
var DAYS, MONTHS, RFC3339, RFC3339_WITH_OFFSET, parseRfc3339DateTimeWithOffset, IMF_FIXDATE, RFC_850_DATE, ASC_TIME, parseRfc7231DateTime, buildDate, parseTwoDigitYear, FIFTY_YEARS_IN_MILLIS, adjustRfc850Year, parseMonthByShortName, DAYS_IN_MONTH, validateDayOfMonth, isLeapYear, parseDateValue, parseMilliseconds, parseOffsetToMilliseconds, stripLeadingZeroes;
var init_date_utils = __esm({
  "node_modules/@smithy/smithy-client/dist-es/date-utils.js"() {
    "use strict";
    init_parse_utils();
    DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    parseDateValue = (value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    };
    parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/exceptions.js
var ServiceException, decorateServiceException;
var init_exceptions = __esm({
  "node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
    "use strict";
    ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v3]) => v3 !== void 0).forEach(([k5, v3]) => {
        if (exception[k5] == void 0 || exception[k5] === "") {
          exception[k5] = v3;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/default-error-handler.js
var throwDefaultError, withBaseException, deserializeMetadata;
var init_default_error_handler = __esm({
  "node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
    "use strict";
    init_exceptions();
    throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody == null ? void 0 : parsedBody.code) || (parsedBody == null ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    };
    withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/defaults-mode.js
var loadConfigsForDefaultMode;
var init_defaults_mode = __esm({
  "node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
    "use strict";
    loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js
var warningEmitted, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
    "use strict";
    warningEmitted = false;
    emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js
var getChecksumConfiguration2, resolveChecksumRuntimeConfig2;
var init_checksum3 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"() {
    "use strict";
    init_dist_es();
    getChecksumConfiguration2 = (runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in AlgorithmId) {
        const algorithmId = AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    resolveChecksumRuntimeConfig2 = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/extensions/retry.js
var getRetryConfiguration, resolveRetryRuntimeConfig;
var init_retry2 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/extensions/retry.js"() {
    "use strict";
    getRetryConfiguration = (runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    };
    resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js
var getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig;
var init_defaultExtensionConfiguration2 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
    "use strict";
    init_checksum3();
    init_retry2();
    getDefaultExtensionConfiguration = (runtimeConfig) => {
      return __spreadValues(__spreadValues({}, getChecksumConfiguration2(runtimeConfig)), getRetryConfiguration(runtimeConfig));
    };
    resolveDefaultRuntimeConfig = (config2) => {
      return __spreadValues(__spreadValues({}, resolveChecksumRuntimeConfig2(config2)), resolveRetryRuntimeConfig(config2));
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/extensions/index.js
var init_extensions3 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    "use strict";
    init_defaultExtensionConfiguration2();
  }
});

// node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c5) {
    return "%" + c5.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
    "use strict";
  }
});

// node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js
var getArrayIfSingleItem;
var init_get_array_if_single_item = __esm({
  "node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
    "use strict";
    getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
  }
});

// node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js
var getValueFromTextNode;
var init_get_value_from_text_node = __esm({
  "node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
    "use strict";
    getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/lazy-json.js
var StringWrapper;
var init_lazy_json = __esm({
  "node_modules/@smithy/smithy-client/dist-es/lazy-json.js"() {
    "use strict";
    StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(StringWrapper, String);
  }
});

// node_modules/@smithy/smithy-client/dist-es/object-mapping.js
function map(arg0, arg1, arg2) {
  let target;
  let filter;
  let instructions;
  if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
    target = {};
    instructions = arg0;
  } else {
    target = arg0;
    if (typeof arg1 === "function") {
      filter = arg1;
      instructions = arg2;
      return mapWithFilter(target, filter, instructions);
    } else {
      instructions = arg1;
    }
  }
  for (const key of Object.keys(instructions)) {
    if (!Array.isArray(instructions[key])) {
      target[key] = instructions[key];
      continue;
    }
    applyInstruction(target, null, instructions, key);
  }
  return target;
}
var take, mapWithFilter, applyInstruction, nonNullish, pass;
var init_object_mapping = __esm({
  "node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
    "use strict";
    take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    nonNullish = (_) => _ != null;
    pass = (_) => _;
  }
});

// node_modules/@smithy/smithy-client/dist-es/resolve-path.js
var resolvedPath;
var init_resolve_path = __esm({
  "node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
    "use strict";
    init_extended_encode_uri_component();
    resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/ser-utils.js
var init_ser_utils = __esm({
  "node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
    "use strict";
  }
});

// node_modules/@smithy/smithy-client/dist-es/serde-json.js
var _json;
var init_serde_json = __esm({
  "node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
    "use strict";
    _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    };
  }
});

// node_modules/@smithy/smithy-client/dist-es/split-every.js
var init_split_every = __esm({
  "node_modules/@smithy/smithy-client/dist-es/split-every.js"() {
    "use strict";
  }
});

// node_modules/@smithy/smithy-client/dist-es/index.js
var init_dist_es16 = __esm({
  "node_modules/@smithy/smithy-client/dist-es/index.js"() {
    "use strict";
    init_NoOpLogger();
    init_client2();
    init_collect_stream_body();
    init_command2();
    init_constants2();
    init_create_aggregated_client();
    init_date_utils();
    init_default_error_handler();
    init_defaults_mode();
    init_emitWarningIfUnsupportedVersion();
    init_extensions3();
    init_exceptions();
    init_extended_encode_uri_component();
    init_get_array_if_single_item();
    init_get_value_from_text_node();
    init_lazy_json();
    init_object_mapping();
    init_parse_utils();
    init_resolve_path();
    init_ser_utils();
    init_serde_json();
    init_split_every();
  }
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js
function checkContentLengthHeader() {
  return (next, context) => (args) => __async(this, null, function* () {
    var _a;
    const { request: request2 } = args;
    if (HttpRequest.isInstance(request2)) {
      if (!request2.headers[CONTENT_LENGTH_HEADER]) {
        const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
        if (typeof ((_a = context == null ? void 0 : context.logger) == null ? void 0 : _a.warn) === "function" && !(context.logger instanceof NoOpLogger)) {
          context.logger.warn(message);
        } else {
          console.warn(message);
        }
      }
    }
    return next(__spreadValues({}, args));
  });
}
var CONTENT_LENGTH_HEADER, checkContentLengthHeaderMiddlewareOptions, getCheckContentLengthHeaderPlugin;
var init_check_content_length_header = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es16();
    CONTENT_LENGTH_HEADER = "content-length";
    checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    getCheckContentLengthHeaderPlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3Configuration.js
var resolveS3Config;
var init_s3Configuration = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3Configuration.js"() {
    "use strict";
    resolveS3Config = (input) => {
      var _a, _b, _c;
      return __spreadProps(__spreadValues({}, input), {
        forcePathStyle: (_a = input.forcePathStyle) != null ? _a : false,
        useAccelerateEndpoint: (_b = input.useAccelerateEndpoint) != null ? _b : false,
        disableMultiregionAccessPoints: (_c = input.disableMultiregionAccessPoints) != null ? _c : false
      });
    };
  }
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js
var throw200ExceptionsMiddleware, collectBody2, collectBodyString, throw200ExceptionsMiddlewareOptions, getThrow200ExceptionsPlugin;
var init_throw_200_exceptions = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"() {
    "use strict";
    init_dist_es2();
    throw200ExceptionsMiddleware = (config2) => (next) => (args) => __async(void 0, null, function* () {
      const result = yield next(args);
      const { response } = result;
      if (!HttpResponse.isInstance(response))
        return result;
      const { statusCode, body } = response;
      if (statusCode < 200 || statusCode >= 300)
        return result;
      const bodyBytes = yield collectBody2(body, config2);
      const bodyString = yield collectBodyString(bodyBytes, config2);
      if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyString && bodyString.match("<Error>")) {
        response.statusCode = 400;
      }
      response.body = bodyBytes;
      return result;
    });
    collectBody2 = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    collectBodyString = (streamBody, context) => collectBody2(streamBody, context).then((body) => context.utf8Encoder(body));
    throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    getThrow200ExceptionsPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config2), throw200ExceptionsMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/util-arn-parser/dist-es/index.js
var validate;
var init_dist_es17 = __esm({
  "node_modules/@aws-sdk/util-arn-parser/dist-es/index.js"() {
    "use strict";
    validate = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
  }
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js
function validateBucketNameMiddleware() {
  return (next) => (args) => __async(this, null, function* () {
    const { input: { Bucket } } = args;
    if (typeof Bucket === "string" && !validate(Bucket) && Bucket.indexOf("/") >= 0) {
      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
      err.name = "InvalidBucketName";
      throw err;
    }
    return next(__spreadValues({}, args));
  });
}
var validateBucketNameMiddlewareOptions, getValidateBucketNamePlugin;
var init_validate_bucket_name = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js"() {
    "use strict";
    init_dist_es17();
    validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    getValidateBucketNamePlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js
var init_dist_es18 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js"() {
    "use strict";
    init_check_content_length_header();
    init_s3Configuration();
    init_throw_200_exceptions();
    init_validate_bucket_name();
  }
});

// node_modules/@smithy/property-provider/dist-es/ProviderError.js
var ProviderError;
var init_ProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/ProviderError.js"() {
    "use strict";
    ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
  }
});

// node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js
var CredentialsProviderError;
var init_CredentialsProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js"() {
    "use strict";
    init_ProviderError();
    CredentialsProviderError = class _CredentialsProviderError extends ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
  }
});

// node_modules/@smithy/property-provider/dist-es/TokenProviderError.js
var TokenProviderError;
var init_TokenProviderError = __esm({
  "node_modules/@smithy/property-provider/dist-es/TokenProviderError.js"() {
    "use strict";
    init_ProviderError();
    TokenProviderError = class _TokenProviderError extends ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
  }
});

// node_modules/@smithy/property-provider/dist-es/chain.js
var chain;
var init_chain = __esm({
  "node_modules/@smithy/property-provider/dist-es/chain.js"() {
    "use strict";
    init_ProviderError();
    chain = (...providers) => () => __async(void 0, null, function* () {
      if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = yield provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err == null ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    });
  }
});

// node_modules/@smithy/property-provider/dist-es/fromStatic.js
var fromStatic;
var init_fromStatic = __esm({
  "node_modules/@smithy/property-provider/dist-es/fromStatic.js"() {
    "use strict";
    fromStatic = (staticValue) => () => Promise.resolve(staticValue);
  }
});

// node_modules/@smithy/property-provider/dist-es/memoize.js
var memoize;
var init_memoize = __esm({
  "node_modules/@smithy/property-provider/dist-es/memoize.js"() {
    "use strict";
    memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = () => __async(void 0, null, function* () {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = yield pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      });
      if (isExpired === void 0) {
        return (options) => __async(void 0, null, function* () {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = yield coalesceProvider();
          }
          return resolved;
        });
      }
      return (options) => __async(void 0, null, function* () {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = yield coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          yield coalesceProvider();
          return resolved;
        }
        return resolved;
      });
    };
  }
});

// node_modules/@smithy/property-provider/dist-es/index.js
var init_dist_es19 = __esm({
  "node_modules/@smithy/property-provider/dist-es/index.js"() {
    "use strict";
    init_CredentialsProviderError();
    init_ProviderError();
    init_TokenProviderError();
    init_chain();
    init_fromStatic();
    init_memoize();
  }
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues,
  __await: () => __await2,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d5, b5) {
  extendStatics(d5, b5);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
}
function __rest(s5, e5) {
  var t4 = {};
  for (var p5 in s5)
    if (Object.prototype.hasOwnProperty.call(s5, p5) && e5.indexOf(p5) < 0)
      t4[p5] = s5[p5];
  if (s5 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i5 = 0, p5 = Object.getOwnPropertySymbols(s5); i5 < p5.length; i5++) {
      if (e5.indexOf(p5[i5]) < 0 && Object.prototype.propertyIsEnumerable.call(s5, p5[i5]))
        t4[p5[i5]] = s5[p5[i5]];
    }
  return t4;
}
function __decorate(decorators, target, key, desc) {
  var c5 = arguments.length, r5 = c5 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r5 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i5 = decorators.length - 1; i5 >= 0; i5--)
      if (d5 = decorators[i5])
        r5 = (c5 < 3 ? d5(r5) : c5 > 3 ? d5(target, key, r5) : d5(target, key)) || r5;
  return c5 > 3 && r5 && Object.defineProperty(target, key, r5), r5;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e5) {
        reject(e5);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t4[0] & 1)
      throw t4[1];
    return t4[1];
  }, trys: [], ops: [] }, f5, y3, t4, g5;
  return g5 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n5) {
    return function(v3) {
      return step([n5, v3]);
    };
  }
  function step(op) {
    if (f5)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f5 = 1, y3 && (t4 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t4 = y3["return"]) && t4.call(y3), 0) : y3.next) && !(t4 = t4.call(y3, op[1])).done)
          return t4;
        if (y3 = 0, t4)
          op = [op[0] & 2, t4.value];
        switch (op[0]) {
          case 0:
          case 1:
            t4 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y3 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t4 = _.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t4[1]) {
              _.label = t4[1];
              t4 = op;
              break;
            }
            if (t4 && _.label < t4[2]) {
              _.label = t4[2];
              _.ops.push(op);
              break;
            }
            if (t4[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e5) {
        op = [6, e5];
        y3 = 0;
      } finally {
        f5 = t4 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o5, m5, k5, k22) {
  if (k22 === void 0)
    k22 = k5;
  o5[k22] = m5[k5];
}
function __exportStar(m5, exports2) {
  for (var p5 in m5)
    if (p5 !== "default" && !exports2.hasOwnProperty(p5))
      exports2[p5] = m5[p5];
}
function __values(o5) {
  var s5 = typeof Symbol === "function" && Symbol.iterator, m5 = s5 && o5[s5], i5 = 0;
  if (m5)
    return m5.call(o5);
  if (o5 && typeof o5.length === "number")
    return {
      next: function() {
        if (o5 && i5 >= o5.length)
          o5 = void 0;
        return { value: o5 && o5[i5++], done: !o5 };
      }
    };
  throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o5, n5) {
  var m5 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m5)
    return o5;
  var i5 = m5.call(o5), r5, ar2 = [], e5;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r5 = i5.next()).done)
      ar2.push(r5.value);
  } catch (error) {
    e5 = { error };
  } finally {
    try {
      if (r5 && !r5.done && (m5 = i5["return"]))
        m5.call(i5);
    } finally {
      if (e5)
        throw e5.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i5 = 0; i5 < arguments.length; i5++)
    ar2 = ar2.concat(__read(arguments[i5]));
  return ar2;
}
function __spreadArrays() {
  for (var s5 = 0, i5 = 0, il = arguments.length; i5 < il; i5++)
    s5 += arguments[i5].length;
  for (var r5 = Array(s5), k5 = 0, i5 = 0; i5 < il; i5++)
    for (var a5 = arguments[i5], j5 = 0, jl = a5.length; j5 < jl; j5++, k5++)
      r5[k5] = a5[j5];
  return r5;
}
function __await2(v3) {
  return this instanceof __await2 ? (this.v = v3, this) : new __await2(v3);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g5 = generator.apply(thisArg, _arguments || []), i5, q5 = [];
  return i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5;
  function verb(n5) {
    if (g5[n5])
      i5[n5] = function(v3) {
        return new Promise(function(a5, b5) {
          q5.push([n5, v3, a5, b5]) > 1 || resume(n5, v3);
        });
      };
  }
  function resume(n5, v3) {
    try {
      step(g5[n5](v3));
    } catch (e5) {
      settle(q5[0][3], e5);
    }
  }
  function step(r5) {
    r5.value instanceof __await2 ? Promise.resolve(r5.value.v).then(fulfill, reject) : settle(q5[0][2], r5);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f5, v3) {
    if (f5(v3), q5.shift(), q5.length)
      resume(q5[0][0], q5[0][1]);
  }
}
function __asyncDelegator(o5) {
  var i5, p5;
  return i5 = {}, verb("next"), verb("throw", function(e5) {
    throw e5;
  }), verb("return"), i5[Symbol.iterator] = function() {
    return this;
  }, i5;
  function verb(n5, f5) {
    i5[n5] = o5[n5] ? function(v3) {
      return (p5 = !p5) ? { value: __await2(o5[n5](v3)), done: n5 === "return" } : f5 ? f5(v3) : v3;
    } : f5;
  }
}
function __asyncValues(o5) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m5 = o5[Symbol.asyncIterator], i5;
  return m5 ? m5.call(o5) : (o5 = typeof __values === "function" ? __values(o5) : o5[Symbol.iterator](), i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5);
  function verb(n5) {
    i5[n5] = o5[n5] && function(v3) {
      return new Promise(function(resolve, reject) {
        v3 = o5[n5](v3), settle(resolve, reject, v3.done, v3.value);
      });
    };
  }
  function settle(resolve, reject, d5, v3) {
    Promise.resolve(v3).then(function(v5) {
      resolve({ value: v5, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k5 in mod)
      if (Object.hasOwnProperty.call(mod, k5))
        result[k5] = mod[k5];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js"() {
    "use strict";
    extendStatics = function(d5, b5) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b6) {
        d6.__proto__ = b6;
      } || function(d6, b6) {
        for (var p5 in b6)
          if (b6.hasOwnProperty(p5))
            d6[p5] = b6[p5];
      };
      return extendStatics(d5, b5);
    };
    __assign = function() {
      __assign = Object.assign || function __assign3(t4) {
        for (var s5, i5 = 1, n5 = arguments.length; i5 < n5; i5++) {
          s5 = arguments[i5];
          for (var p5 in s5)
            if (Object.prototype.hasOwnProperty.call(s5, p5))
              t4[p5] = s5[p5];
        }
        return t4;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js
var fromUtf82, toUtf82;
var init_pureJs = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js"() {
    "use strict";
    fromUtf82 = (input) => {
      const bytes = [];
      for (let i5 = 0, len = input.length; i5 < len; i5++) {
        const value = input.charCodeAt(i5);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i5 + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i5 + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i5) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf82 = (input) => {
      let decoded = "";
      for (let i5 = 0, len = input.length; i5 < len; i5++) {
        const byte = input[i5];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i5];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i5], input[++i5], input[++i5]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i5] & 63) << 6 | input[++i5] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js
function fromUtf83(input) {
  return new TextEncoder().encode(input);
}
function toUtf83(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  fromUtf8: () => fromUtf84,
  toUtf8: () => toUtf84
});
var fromUtf84, toUtf84;
var init_dist_es20 = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js"() {
    "use strict";
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf84 = (input) => typeof TextEncoder === "function" ? fromUtf83(input) : fromUtf82(input);
    toUtf84 = (input) => typeof TextDecoder === "function" ? toUtf83(input) : toUtf82(input);
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es20(), __toCommonJS(dist_es_exports));
    var fromUtf85 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf85(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports2.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports2.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports2.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports2.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = exports2.numToUint8 = exports2.isEmptyData = exports2.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports2, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports2, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports2, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports2, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/crc32/build/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc322 = (
      /** @class */
      function() {
        function AwsCrc323() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc323.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc323.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc323.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc323;
      }()
    );
    exports2.AwsCrc32 = AwsCrc322;
  }
});

// node_modules/@aws-crypto/crc32/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = exports2.Crc32 = exports2.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc323().update(data).digest();
    }
    exports2.crc32 = crc32;
    var Crc323 = (
      /** @class */
      function() {
        function Crc324() {
          this.checksum = 4294967295;
        }
        Crc324.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc324.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc324;
      }()
    );
    exports2.Crc32 = Crc323;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports2, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// node_modules/@smithy/util-hex-encoding/dist-es/index.js
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i5 = 0; i5 < encoded.length; i5 += 2) {
    const encodedByte = encoded.slice(i5, i5 + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i5 / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
}
function toHex(bytes) {
  let out = "";
  for (let i5 = 0; i5 < bytes.byteLength; i5++) {
    out += SHORT_TO_HEX[bytes[i5]];
  }
  return out;
}
var SHORT_TO_HEX, HEX_TO_SHORT;
var init_dist_es21 = __esm({
  "node_modules/@smithy/util-hex-encoding/dist-es/index.js"() {
    "use strict";
    SHORT_TO_HEX = {};
    HEX_TO_SHORT = {};
    for (let i5 = 0; i5 < 256; i5++) {
      let encodedByte = i5.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i5] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i5;
    }
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/Int64.js
function negate(bytes) {
  for (let i5 = 0; i5 < 8; i5++) {
    bytes[i5] ^= 255;
  }
  for (let i5 = 7; i5 > -1; i5--) {
    bytes[i5]++;
    if (bytes[i5] !== 0)
      break;
  }
}
var Int64;
var init_Int64 = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/Int64.js"() {
    "use strict";
    init_dist_es21();
    Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i5 = 7, remaining = Math.abs(Math.round(number)); i5 > -1 && remaining > 0; i5--, remaining /= 256) {
          bytes[i5] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js
var HeaderMarshaller, HEADER_VALUE_TYPE, BOOLEAN_TAG, BYTE_TAG, SHORT_TAG, INT_TAG, LONG_TAG, BINARY_TAG, STRING_TAG, TIMESTAMP_TAG, UUID_TAG, UUID_PATTERN;
var init_HeaderMarshaller = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js"() {
    "use strict";
    init_dist_es21();
    init_Int64();
    HeaderMarshaller = class {
      constructor(toUtf85, fromUtf85) {
        this.toUtf8 = toUtf85;
        this.fromUtf8 = fromUtf85;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    BOOLEAN_TAG = "boolean";
    BYTE_TAG = "byte";
    SHORT_TAG = "short";
    INT_TAG = "integer";
    LONG_TAG = "long";
    BINARY_TAG = "binary";
    STRING_TAG = "string";
    TIMESTAMP_TAG = "timestamp";
    UUID_TAG = "uuid";
    UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js
function splitMessage({ byteLength, byteOffset, buffer }) {
  if (byteLength < MINIMUM_MESSAGE_LENGTH) {
    throw new Error("Provided message too short to accommodate event stream message overhead");
  }
  const view = new DataView(buffer, byteOffset, byteLength);
  const messageLength = view.getUint32(0, false);
  if (byteLength !== messageLength) {
    throw new Error("Reported message length does not match received message length");
  }
  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
  const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
  if (expectedPreludeChecksum !== checksummer.digest()) {
    throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
  }
  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
  if (expectedMessageChecksum !== checksummer.digest()) {
    throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
  }
  return {
    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
  };
}
var import_crc32, PRELUDE_MEMBER_LENGTH, PRELUDE_LENGTH, CHECKSUM_LENGTH, MINIMUM_MESSAGE_LENGTH;
var init_splitMessage = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js"() {
    "use strict";
    import_crc32 = __toESM(require_build2());
    PRELUDE_MEMBER_LENGTH = 4;
    PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    CHECKSUM_LENGTH = 4;
    MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js
var import_crc322, EventStreamCodec;
var init_EventStreamCodec = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js"() {
    "use strict";
    import_crc322 = __toESM(require_build2());
    init_HeaderMarshaller();
    init_splitMessage();
    EventStreamCodec = class {
      constructor(toUtf85, fromUtf85) {
        this.headerMarshaller = new HeaderMarshaller(toUtf85, fromUtf85);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new import_crc322.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = splitMessage(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/Message.js
var init_Message = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/Message.js"() {
    "use strict";
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js
var MessageDecoderStream;
var init_MessageDecoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js"() {
    "use strict";
    MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      asyncIterator() {
        return __asyncGenerator(this, null, function* () {
          try {
            for (var iter = __forAwait(this.options.inputStream), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
              const bytes = temp.value;
              const decoded = this.options.decoder.decode(bytes);
              yield decoded;
            }
          } catch (temp) {
            error = [temp];
          } finally {
            try {
              more && (temp = iter.return) && (yield new __await(temp.call(iter)));
            } finally {
              if (error)
                throw error[0];
            }
          }
        });
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js
var MessageEncoderStream;
var init_MessageEncoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js"() {
    "use strict";
    MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      asyncIterator() {
        return __asyncGenerator(this, null, function* () {
          try {
            for (var iter = __forAwait(this.options.messageStream), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
              const msg = temp.value;
              const encoded = this.options.encoder.encode(msg);
              yield encoded;
            }
          } catch (temp) {
            error = [temp];
          } finally {
            try {
              more && (temp = iter.return) && (yield new __await(temp.call(iter)));
            } finally {
              if (error)
                throw error[0];
            }
          }
          if (this.options.includeEndFrame) {
            yield new Uint8Array(0);
          }
        });
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js
var SmithyMessageDecoderStream;
var init_SmithyMessageDecoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js"() {
    "use strict";
    SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      asyncIterator() {
        return __asyncGenerator(this, null, function* () {
          try {
            for (var iter = __forAwait(this.options.messageStream), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
              const message = temp.value;
              const deserialized = yield new __await(this.options.deserializer(message));
              if (deserialized === void 0)
                continue;
              yield deserialized;
            }
          } catch (temp) {
            error = [temp];
          } finally {
            try {
              more && (temp = iter.return) && (yield new __await(temp.call(iter)));
            } finally {
              if (error)
                throw error[0];
            }
          }
        });
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js
var SmithyMessageEncoderStream;
var init_SmithyMessageEncoderStream = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js"() {
    "use strict";
    SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      asyncIterator() {
        return __asyncGenerator(this, null, function* () {
          try {
            for (var iter = __forAwait(this.options.inputStream), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
              const chunk = temp.value;
              const payloadBuf = this.options.serializer(chunk);
              yield payloadBuf;
            }
          } catch (temp) {
            error = [temp];
          } finally {
            try {
              more && (temp = iter.return) && (yield new __await(temp.call(iter)));
            } finally {
              if (error)
                throw error[0];
            }
          }
        });
      }
    };
  }
});

// node_modules/@smithy/eventstream-codec/dist-es/index.js
var init_dist_es22 = __esm({
  "node_modules/@smithy/eventstream-codec/dist-es/index.js"() {
    "use strict";
    init_EventStreamCodec();
    init_HeaderMarshaller();
    init_Int64();
    init_Message();
    init_MessageDecoderStream();
    init_MessageEncoderStream();
    init_SmithyMessageDecoderStream();
    init_SmithyMessageEncoderStream();
  }
});

// node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js
var init_getSmithyContext = __esm({
  "node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js"() {
    "use strict";
    init_dist_es();
  }
});

// node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js
var normalizeProvider;
var init_normalizeProvider = __esm({
  "node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js"() {
    "use strict";
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// node_modules/@smithy/util-middleware/dist-es/index.js
var init_dist_es23 = __esm({
  "node_modules/@smithy/util-middleware/dist-es/index.js"() {
    "use strict";
    init_getSmithyContext();
    init_normalizeProvider();
  }
});

// node_modules/@smithy/signature-v4/dist-es/constants.js
var ALGORITHM_QUERY_PARAM, CREDENTIAL_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, EXPIRES_QUERY_PARAM, SIGNATURE_QUERY_PARAM, TOKEN_QUERY_PARAM, AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER, GENERATED_HEADERS, SIGNATURE_HEADER, SHA256_HEADER, TOKEN_HEADER, ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN, ALGORITHM_IDENTIFIER, EVENT_ALGORITHM_IDENTIFIER, UNSIGNED_PAYLOAD, MAX_CACHE_SIZE, KEY_TYPE_IDENTIFIER, MAX_PRESIGNED_TTL;
var init_constants3 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/constants.js"() {
    "use strict";
    ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    AUTH_HEADER = "authorization";
    AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    DATE_HEADER = "date";
    GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    SHA256_HEADER = "x-amz-content-sha256";
    TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    PROXY_HEADER_PATTERN = /^proxy-/;
    SEC_HEADER_PATTERN = /^sec-/;
    ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    MAX_CACHE_SIZE = 50;
    KEY_TYPE_IDENTIFIER = "aws4_request";
    MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js
var signingKeyCache, cacheQueue, createScope, getSigningKey, hmac;
var init_credentialDerivation = __esm({
  "node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"() {
    "use strict";
    init_dist_es21();
    init_dist_es11();
    init_constants3();
    signingKeyCache = {};
    cacheQueue = [];
    createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
    getSigningKey = (sha256Constructor, credentials, shortDate, region, service) => __async(void 0, null, function* () {
      const credsHash = yield hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = yield hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    });
    hmac = (ctor, secret2, data) => {
      const hash = new ctor(secret2);
      hash.update(toUint8Array(data));
      return hash.digest();
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js
var getCanonicalHeaders;
var init_getCanonicalHeaders = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js"() {
    "use strict";
    init_constants3();
    getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js
var getCanonicalQuery;
var init_getCanonicalQuery = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js"() {
    "use strict";
    init_dist_es12();
    init_constants3();
    getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${escapeUri(key)}=${escapeUri(value2)}`]), []).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js
var getPayloadHash;
var init_getPayloadHash = __esm({
  "node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"() {
    "use strict";
    init_dist_es8();
    init_dist_es21();
    init_dist_es11();
    init_constants3();
    getPayloadHash = (_0, _1) => __async(void 0, [_0, _1], function* ({ headers, body }, hashConstructor) {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array(body));
        return toHex(yield hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    });
  }
});

// node_modules/@smithy/signature-v4/dist-es/headerUtil.js
var hasHeader;
var init_headerUtil = __esm({
  "node_modules/@smithy/signature-v4/dist-es/headerUtil.js"() {
    "use strict";
    hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/cloneRequest.js
var cloneRequest, cloneQuery2;
var init_cloneRequest = __esm({
  "node_modules/@smithy/signature-v4/dist-es/cloneRequest.js"() {
    "use strict";
    cloneRequest = (_a) => {
      var _b = _a, { headers, query } = _b, rest = __objRest(_b, ["headers", "query"]);
      return __spreadProps(__spreadValues({}, rest), {
        headers: __spreadValues({}, headers),
        query: query ? cloneQuery2(query) : void 0
      });
    };
    cloneQuery2 = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return __spreadProps(__spreadValues({}, carry), {
        [paramName]: Array.isArray(param) ? [...param] : param
      });
    }, {});
  }
});

// node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js
var moveHeadersToQuery;
var init_moveHeadersToQuery = __esm({
  "node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js"() {
    "use strict";
    init_cloneRequest();
    moveHeadersToQuery = (request2, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request2.clone === "function" ? request2.clone() : cloneRequest(request2);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return __spreadProps(__spreadValues({}, request2), {
        headers,
        query
      });
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/prepareRequest.js
var prepareRequest;
var init_prepareRequest = __esm({
  "node_modules/@smithy/signature-v4/dist-es/prepareRequest.js"() {
    "use strict";
    init_cloneRequest();
    init_constants3();
    prepareRequest = (request2) => {
      request2 = typeof request2.clone === "function" ? request2.clone() : cloneRequest(request2);
      for (const headerName of Object.keys(request2.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request2.headers[headerName];
        }
      }
      return request2;
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/utilDate.js
var iso8601, toDate;
var init_utilDate = __esm({
  "node_modules/@smithy/signature-v4/dist-es/utilDate.js"() {
    "use strict";
    iso8601 = (time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
  }
});

// node_modules/@smithy/signature-v4/dist-es/SignatureV4.js
var SignatureV4, formatDate, getCanonicalHeaderList;
var init_SignatureV4 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"() {
    "use strict";
    init_dist_es22();
    init_dist_es21();
    init_dist_es23();
    init_dist_es11();
    init_constants3();
    init_credentialDerivation();
    init_getCanonicalHeaders();
    init_getCanonicalQuery();
    init_getPayloadHash();
    init_headerUtil();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_utilDate();
    SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider(region);
        this.credentialProvider = normalizeProvider(credentials);
      }
      presign(_0) {
        return __async(this, arguments, function* (originalRequest, options = {}) {
          const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
          const credentials = yield this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : yield this.regionProvider();
          const { longDate, shortDate } = formatDate(signingDate);
          if (expiresIn > MAX_PRESIGNED_TTL) {
            return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
          }
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          const request2 = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
          if (credentials.sessionToken) {
            request2.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
          }
          request2.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
          request2.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
          request2.query[AMZ_DATE_QUERY_PARAM] = longDate;
          request2.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
          const canonicalHeaders = getCanonicalHeaders(request2, unsignableHeaders, signableHeaders);
          request2.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
          request2.query[SIGNATURE_QUERY_PARAM] = yield this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, yield getPayloadHash(originalRequest, this.sha256)));
          return request2;
        });
      }
      sign(toSign, options) {
        return __async(this, null, function* () {
          if (typeof toSign === "string") {
            return this.signString(toSign, options);
          } else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
          } else if (toSign.message) {
            return this.signMessage(toSign, options);
          } else {
            return this.signRequest(toSign, options);
          }
        });
      }
      signEvent(_0, _1) {
        return __async(this, arguments, function* ({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
          const region = signingRegion != null ? signingRegion : yield this.regionProvider();
          const { shortDate, longDate } = formatDate(signingDate);
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          const hashedPayload = yield getPayloadHash({ headers: {}, body: payload }, this.sha256);
          const hash = new this.sha256();
          hash.update(headers);
          const hashedHeaders = toHex(yield hash.digest());
          const stringToSign = [
            EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload
          ].join("\n");
          return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
        });
      }
      signMessage(_0, _1) {
        return __async(this, arguments, function* (signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
          const promise = this.signEvent({
            headers: this.headerMarshaller.format(signableMessage.message.headers),
            payload: signableMessage.message.body
          }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
          });
          return promise.then((signature) => {
            return { message: signableMessage.message, signature };
          });
        });
      }
      signString(_0) {
        return __async(this, arguments, function* (stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
          const credentials = yield this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : yield this.regionProvider();
          const { shortDate } = formatDate(signingDate);
          const hash = new this.sha256(yield this.getSigningKey(credentials, region, shortDate, signingService));
          hash.update(toUint8Array(stringToSign));
          return toHex(yield hash.digest());
        });
      }
      signRequest(_0) {
        return __async(this, arguments, function* (requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
          const credentials = yield this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : yield this.regionProvider();
          const request2 = prepareRequest(requestToSign);
          const { longDate, shortDate } = formatDate(signingDate);
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          request2.headers[AMZ_DATE_HEADER] = longDate;
          if (credentials.sessionToken) {
            request2.headers[TOKEN_HEADER] = credentials.sessionToken;
          }
          const payloadHash = yield getPayloadHash(request2, this.sha256);
          if (!hasHeader(SHA256_HEADER, request2.headers) && this.applyChecksum) {
            request2.headers[SHA256_HEADER] = payloadHash;
          }
          const canonicalHeaders = getCanonicalHeaders(request2, unsignableHeaders, signableHeaders);
          const signature = yield this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, payloadHash));
          request2.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
          return request2;
        });
      }
      createCanonicalRequest(request2, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request2.method}
${this.getCanonicalPath(request2)}
${getCanonicalQuery(request2)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      createStringToSign(longDate, credentialScope, canonicalRequest) {
        return __async(this, null, function* () {
          const hash = new this.sha256();
          hash.update(toUint8Array(canonicalRequest));
          const hashedRequest = yield hash.digest();
          return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${toHex(hashedRequest)}`;
        });
      }
      getCanonicalPath({ path: path3 }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path3.split("/")) {
            if ((pathSegment == null ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path3 == null ? void 0 : path3.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path3 == null ? void 0 : path3.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path3;
      }
      getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        return __async(this, null, function* () {
          const stringToSign = yield this.createStringToSign(longDate, credentialScope, canonicalRequest);
          const hash = new this.sha256(yield keyPromise);
          hash.update(toUint8Array(stringToSign));
          return toHex(yield hash.digest());
        });
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    formatDate = (now) => {
      const longDate = iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@smithy/signature-v4/dist-es/index.js
var init_dist_es24 = __esm({
  "node_modules/@smithy/signature-v4/dist-es/index.js"() {
    "use strict";
    init_SignatureV4();
    init_getCanonicalHeaders();
    init_getCanonicalQuery();
    init_getPayloadHash();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_credentialDerivation();
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js
var CREDENTIAL_EXPIRE_WINDOW, resolveAwsAuthConfig, normalizeCredentialProvider;
var init_awsAuthConfiguration = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es24();
    init_dist_es23();
    CREDENTIAL_EXPIRE_WINDOW = 3e5;
    resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => normalizeProvider(input.region)().then((region) => __async(void 0, null, function* () {
          return [
            (yield input.regionInfoProvider(region, {
              useFipsEndpoint: yield input.useFipsEndpoint(),
              useDualstackEndpoint: yield input.useDualstackEndpoint()
            })) || {},
            region
          ];
        })).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = __spreadProps(__spreadValues({}, input), {
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          });
          const SignerCtor = input.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = (authScheme) => __async(void 0, null, function* () {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: yield normalizeProvider(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = __spreadProps(__spreadValues({}, input), {
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          });
          const SignerCtor = input.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        });
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return memoize(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js"() {
    "use strict";
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js"() {
    "use strict";
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js"() {
    "use strict";
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js
var awsAuthMiddleware, getDateHeader, awsAuthMiddlewareOptions, getAwsAuthPlugin;
var init_awsAuthMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js"() {
    "use strict";
    init_dist_es2();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
    awsAuthMiddleware = (options) => (next, context) => function(args) {
      return __async(this, null, function* () {
        var _a, _b, _c, _d;
        if (!HttpRequest.isInstance(args.request))
          return next(args);
        const authScheme = (_c = (_b = (_a = context.endpointV2) == null ? void 0 : _a.properties) == null ? void 0 : _b.authSchemes) == null ? void 0 : _c[0];
        const multiRegionOverride = (authScheme == null ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme == null ? void 0 : authScheme.signingRegionSet) == null ? void 0 : _d.join(",") : void 0;
        const signer = yield options.signer(authScheme);
        const output = yield next(__spreadProps(__spreadValues({}, args), {
          request: yield signer.sign(args.request, {
            signingDate: getSkewCorrectedDate(options.systemClockOffset),
            signingRegion: multiRegionOverride || context["signing_region"],
            signingService: context["signing_service"]
          })
        })).catch((error) => {
          var _a2;
          const serverTime = (_a2 = error.ServerTime) != null ? _a2 : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
        }
        return output;
      });
    };
    getDateHeader = (response) => {
      var _a, _b, _c;
      return HttpResponse.isInstance(response) ? (_c = (_a = response.headers) == null ? void 0 : _a.date) != null ? _c : (_b = response.headers) == null ? void 0 : _b.Date : void 0;
    };
    awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-es/index.js
var init_dist_es25 = __esm({
  "node_modules/@aws-sdk/middleware-signing/dist-es/index.js"() {
    "use strict";
    init_awsAuthConfiguration();
    init_awsAuthMiddleware();
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig(input) {
  return __spreadProps(__spreadValues({}, input), {
    customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
  });
}
var init_configurations = __esm({
  "node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
var partitions_default;
var init_partitions = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json"() {
    partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {}
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js
var selectedPartitionsInfo, selectedUserAgentPrefix, partition, setPartitionInfo, useDefaultPartitionInfo, getUserAgentPrefix;
var init_partition = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"() {
    "use strict";
    init_partitions();
    selectedPartitionsInfo = partitions_default;
    selectedUserAgentPrefix = "";
    partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return __spreadValues(__spreadValues({}, outputs), regionData);
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return __spreadValues({}, outputs);
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return __spreadValues({}, DEFAULT_PARTITION.outputs);
    };
    setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    useDefaultPartitionInfo = () => {
      setPartitionInfo(partitions_default, "");
    };
    getUserAgentPrefix = () => selectedUserAgentPrefix;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js
var IP_V4_REGEX, isIpAddress;
var init_isIpAddress = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js"() {
    "use strict";
    IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js
var debugId;
var init_debugId = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js"() {
    "use strict";
    debugId = "endpoints";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js
function toDebugString(input) {
  if (typeof input !== "object" || input == null) {
    return input;
  }
  if ("ref" in input) {
    return `$${toDebugString(input.ref)}`;
  }
  if ("fn" in input) {
    return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
  }
  return JSON.stringify(input, null, 2);
}
var init_toDebugString = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js
var init_debug = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js"() {
    "use strict";
    init_debugId();
    init_toDebugString();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js
var EndpointError;
var init_EndpointError = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js"() {
    "use strict";
    EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js
var init_EndpointRuleObject2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js
var init_ErrorRuleObject2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js
var init_RuleSetObject2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js
var init_TreeRuleObject2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js
var init_shared2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js
var init_types2 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js"() {
    "use strict";
    init_EndpointError();
    init_EndpointRuleObject2();
    init_ErrorRuleObject2();
    init_RuleSetObject2();
    init_TreeRuleObject2();
    init_shared2();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js
var VALID_HOST_LABEL_REGEX, isValidHostLabel;
var init_isValidHostLabel = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js"() {
    "use strict";
    VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js
var isVirtualHostableS3Bucket;
var init_isVirtualHostableS3Bucket = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js"() {
    "use strict";
    init_isIpAddress();
    init_isValidHostLabel();
    isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!isValidHostLabel(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if (isIpAddress(value)) {
        return false;
      }
      return true;
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
var parseArn;
var init_parseArn = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js"() {
    "use strict";
    parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js
var aws_exports = {};
__export(aws_exports, {
  getUserAgentPrefix: () => getUserAgentPrefix,
  isVirtualHostableS3Bucket: () => isVirtualHostableS3Bucket,
  parseArn: () => parseArn,
  partition: () => partition,
  setPartitionInfo: () => setPartitionInfo,
  useDefaultPartitionInfo: () => useDefaultPartitionInfo
});
var init_aws = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js"() {
    "use strict";
    init_isVirtualHostableS3Bucket();
    init_parseArn();
    init_partition();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js
var booleanEquals;
var init_booleanEquals = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js"() {
    "use strict";
    booleanEquals = (value1, value2) => value1 === value2;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js
var getAttrPathList;
var init_getAttrPathList = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js"() {
    "use strict";
    init_types2();
    getAttrPathList = (path3) => {
      const parts = path3.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError(`Path: '${path3}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path3}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js
var getAttr;
var init_getAttr = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js"() {
    "use strict";
    init_types2();
    init_getAttrPathList();
    getAttr = (value, path3) => getAttrPathList(path3).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index}' in '${path3}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js
var isSet;
var init_isSet = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js"() {
    "use strict";
    isSet = (value) => value != null;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js
var not;
var init_not = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js"() {
    "use strict";
    not = (value) => !value;
  }
});

// node_modules/@aws-sdk/types/dist-es/abort.js
var init_abort2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/abort.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/auth.js
var init_auth2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/auth.js"() {
    "use strict";
    init_dist_es();
  }
});

// node_modules/@aws-sdk/types/dist-es/blob/blob-types.js
var init_blob_types = __esm({
  "node_modules/@aws-sdk/types/dist-es/blob/blob-types.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/checksum.js
var init_checksum4 = __esm({
  "node_modules/@aws-sdk/types/dist-es/checksum.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/client.js
var init_client3 = __esm({
  "node_modules/@aws-sdk/types/dist-es/client.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/command.js
var init_command3 = __esm({
  "node_modules/@aws-sdk/types/dist-es/command.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/connection.js
var init_connection2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/connection.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/credentials.js
var init_credentials = __esm({
  "node_modules/@aws-sdk/types/dist-es/credentials.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/crypto.js
var init_crypto2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/crypto.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/dns.js
var HostAddressType;
var init_dns = __esm({
  "node_modules/@aws-sdk/types/dist-es/dns.js"() {
    "use strict";
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType || (HostAddressType = {}));
  }
});

// node_modules/@aws-sdk/types/dist-es/encode.js
var init_encode2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/encode.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/endpoint.js
var init_endpoint2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/endpoint.js"() {
    "use strict";
    init_dist_es();
  }
});

// node_modules/@aws-sdk/types/dist-es/eventStream.js
var init_eventStream2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/eventStream.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/extensions/index.js
var init_extensions4 = __esm({
  "node_modules/@aws-sdk/types/dist-es/extensions/index.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/http.js
var init_http2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/http.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/AnonymousIdentity.js
var init_AnonymousIdentity = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/AnonymousIdentity.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/AwsCredentialIdentity.js
var init_AwsCredentialIdentity = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/AwsCredentialIdentity.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/Identity.js
var init_Identity = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/Identity.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/LoginIdentity.js
var init_LoginIdentity = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/LoginIdentity.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/TokenIdentity.js
var init_TokenIdentity = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/TokenIdentity.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/identity/index.js
var init_identity3 = __esm({
  "node_modules/@aws-sdk/types/dist-es/identity/index.js"() {
    "use strict";
    init_AnonymousIdentity();
    init_AwsCredentialIdentity();
    init_Identity();
    init_LoginIdentity();
    init_TokenIdentity();
  }
});

// node_modules/@aws-sdk/types/dist-es/logger.js
var init_logger3 = __esm({
  "node_modules/@aws-sdk/types/dist-es/logger.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/middleware.js
var init_middleware2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/middleware.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/pagination.js
var init_pagination2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/pagination.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/profile.js
var init_profile2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/profile.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/request.js
var init_request = __esm({
  "node_modules/@aws-sdk/types/dist-es/request.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/response.js
var init_response2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/response.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/retry.js
var init_retry3 = __esm({
  "node_modules/@aws-sdk/types/dist-es/retry.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/serde.js
var init_serde2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/serde.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/shapes.js
var init_shapes2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/shapes.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/signature.js
var init_signature2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/signature.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/stream.js
var init_stream2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/stream.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/token.js
var init_token = __esm({
  "node_modules/@aws-sdk/types/dist-es/token.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/transfer.js
var init_transfer2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/transfer.js"() {
    "use strict";
    init_dist_es();
  }
});

// node_modules/@aws-sdk/types/dist-es/uri.js
var init_uri2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/uri.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/util.js
var init_util2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/util.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/waiter.js
var init_waiter2 = __esm({
  "node_modules/@aws-sdk/types/dist-es/waiter.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/types/dist-es/index.js
var init_dist_es26 = __esm({
  "node_modules/@aws-sdk/types/dist-es/index.js"() {
    "use strict";
    init_abort2();
    init_auth2();
    init_blob_types();
    init_checksum4();
    init_client3();
    init_command3();
    init_connection2();
    init_credentials();
    init_crypto2();
    init_dns();
    init_encode2();
    init_endpoint2();
    init_eventStream2();
    init_extensions4();
    init_http2();
    init_identity3();
    init_logger3();
    init_middleware2();
    init_pagination2();
    init_profile2();
    init_request();
    init_response2();
    init_retry3();
    init_serde2();
    init_shapes2();
    init_signature2();
    init_stream2();
    init_token();
    init_transfer2();
    init_uri2();
    init_util2();
    init_waiter2();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js
var DEFAULT_PORTS, parseURL;
var init_parseURL = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js"() {
    "use strict";
    init_dist_es26();
    init_isIpAddress();
    DEFAULT_PORTS = {
      [EndpointURLScheme.HTTP]: 80,
      [EndpointURLScheme.HTTPS]: 443
    };
    parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path: path3 = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path3}`);
            url.search = Object.entries(query).map(([k5, v3]) => `${k5}=${v3}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js
var stringEquals;
var init_stringEquals = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js"() {
    "use strict";
    stringEquals = (value1, value2) => value1 === value2;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js
var substring;
var init_substring = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js"() {
    "use strict";
    substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js
var uriEncode;
var init_uriEncode = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js"() {
    "use strict";
    uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c5) => `%${c5.charCodeAt(0).toString(16).toUpperCase()}`);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js
var lib_exports = {};
__export(lib_exports, {
  aws: () => aws_exports,
  booleanEquals: () => booleanEquals,
  getAttr: () => getAttr,
  isSet: () => isSet,
  isValidHostLabel: () => isValidHostLabel,
  not: () => not,
  parseURL: () => parseURL,
  stringEquals: () => stringEquals,
  substring: () => substring,
  uriEncode: () => uriEncode
});
var init_lib = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js"() {
    "use strict";
    init_aws();
    init_booleanEquals();
    init_getAttr();
    init_isSet();
    init_isValidHostLabel();
    init_not();
    init_parseURL();
    init_stringEquals();
    init_substring();
    init_uriEncode();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js
var evaluateTemplate;
var init_evaluateTemplate = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js"() {
    "use strict";
    init_lib();
    evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = __spreadValues(__spreadValues({}, options.endpointParams), options.referenceRecord);
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js
var getReferenceValue;
var init_getReferenceValue = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js"() {
    "use strict";
    getReferenceValue = ({ ref }, options) => {
      const referenceRecord = __spreadValues(__spreadValues({}, options.endpointParams), options.referenceRecord);
      return referenceRecord[ref];
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js
var evaluateExpression;
var init_evaluateExpression = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js"() {
    "use strict";
    init_types2();
    init_callFunction();
    init_evaluateTemplate();
    init_getReferenceValue();
    evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js
var callFunction;
var init_callFunction = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js"() {
    "use strict";
    init_lib();
    init_evaluateExpression();
    callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib_exports)(...evaluatedArgs);
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js
var evaluateCondition;
var init_evaluateCondition = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js"() {
    "use strict";
    init_debug();
    init_types2();
    init_callFunction();
    evaluateCondition = (_a, options) => {
      var _b = _a, { assign } = _b, fnArgs = __objRest(_b, ["assign"]);
      var _a2, _b2;
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      (_b2 = (_a2 = options.logger) == null ? void 0 : _a2.debug) == null ? void 0 : _b2.call(_a2, debugId, `evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return __spreadValues({
        result: value === "" ? true : !!value
      }, assign != null && { toAssign: { name: assign, value } });
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js
var evaluateConditions;
var init_evaluateConditions = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js"() {
    "use strict";
    init_debug();
    init_evaluateCondition();
    evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, __spreadProps(__spreadValues({}, options), {
          referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), conditionsReferenceRecord)
        }));
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js
var getEndpointHeaders;
var init_getEndpointHeaders = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js"() {
    "use strict";
    init_types2();
    init_evaluateExpression();
    getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => __spreadProps(__spreadValues({}, acc), {
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js
var getEndpointProperty;
var init_getEndpointProperty = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js"() {
    "use strict";
    init_types2();
    init_evaluateTemplate();
    init_getEndpointProperties();
    getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js
var getEndpointProperties;
var init_getEndpointProperties = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js"() {
    "use strict";
    init_getEndpointProperty();
    getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => __spreadProps(__spreadValues({}, acc), {
      [propertyKey]: getEndpointProperty(propertyVal, options)
    }), {});
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js
var getEndpointUrl;
var init_getEndpointUrl = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js"() {
    "use strict";
    init_types2();
    init_evaluateExpression();
    getEndpointUrl = (endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js
var evaluateEndpointRule;
var init_evaluateEndpointRule = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js"() {
    "use strict";
    init_debug();
    init_evaluateConditions();
    init_getEndpointHeaders();
    init_getEndpointProperties();
    init_getEndpointUrl();
    evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = __spreadProps(__spreadValues({}, options), {
        referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord)
      });
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return __spreadProps(__spreadValues(__spreadValues({}, headers != void 0 && {
        headers: getEndpointHeaders(headers, endpointRuleOptions)
      }), properties != void 0 && {
        properties: getEndpointProperties(properties, endpointRuleOptions)
      }), {
        url: getEndpointUrl(url, endpointRuleOptions)
      });
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js
var evaluateErrorRule;
var init_evaluateErrorRule = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js"() {
    "use strict";
    init_types2();
    init_evaluateConditions();
    init_evaluateExpression();
    evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError(evaluateExpression(error, "Error", __spreadProps(__spreadValues({}, options), {
        referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord)
      })));
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js
var evaluateTreeRule;
var init_evaluateTreeRule = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js"() {
    "use strict";
    init_evaluateConditions();
    init_evaluateRules();
    evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, __spreadProps(__spreadValues({}, options), {
        referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord)
      }));
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js
var evaluateRules;
var init_evaluateRules = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js"() {
    "use strict";
    init_types2();
    init_evaluateEndpointRule();
    init_evaluateErrorRule();
    init_evaluateTreeRule();
    evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError(`Rules evaluation failed`);
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js
var init_utils = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js"() {
    "use strict";
    init_evaluateRules();
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js
var resolveEndpoint;
var init_resolveEndpoint = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js"() {
    "use strict";
    init_debug();
    init_types2();
    init_utils();
    resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v3]) => v3.default != null).map(([k5, v3]) => [k5, v3.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) != null ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v3]) => v3.required).map(([k5]) => k5);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      if ((_d = options.endpointParams) == null ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e5) {
        }
      }
      (_f = (_e = options.logger) == null ? void 0 : _e.debug) == null ? void 0 : _f.call(_e, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-es/index.js
var init_dist_es27 = __esm({
  "node_modules/@aws-sdk/util-endpoints/dist-es/index.js"() {
    "use strict";
    init_partition();
    init_isIpAddress();
    init_resolveEndpoint();
    init_types2();
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT, X_AMZ_USER_AGENT, SPACE, UA_NAME_SEPARATOR, UA_NAME_ESCAPE_REGEX, UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR;
var init_constants4 = __esm({
  "node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js"() {
    "use strict";
    USER_AGENT = "user-agent";
    X_AMZ_USER_AGENT = "x-amz-user-agent";
    SPACE = " ";
    UA_NAME_SEPARATOR = "/";
    UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    UA_ESCAPE_CHAR = "-";
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware, escapeUserAgent, getUserAgentMiddlewareOptions, getUserAgentPlugin;
var init_user_agent_middleware = __esm({
  "node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js"() {
    "use strict";
    init_dist_es27();
    init_dist_es2();
    init_constants4();
    userAgentMiddleware = (options) => (next, context) => (args) => __async(void 0, null, function* () {
      var _a, _b;
      const { request: request2 } = args;
      if (!HttpRequest.isInstance(request2))
        return next(args);
      const { headers } = request2;
      const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent2 = (yield options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = getUserAgentPrefix();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent2, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent2.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request: request2
      }));
    });
    escapeUserAgent = (userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    getUserAgentPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config2), getUserAgentMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js
var init_dist_es28 = __esm({
  "node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js"() {
    "use strict";
    init_configurations();
    init_user_agent_middleware();
  }
});

// node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js
var SelectorType, booleanSelector;
var init_booleanSelector = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js"() {
    "use strict";
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType || (SelectorType = {}));
    booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
  }
});

// node_modules/@smithy/util-config-provider/dist-es/index.js
var init_dist_es29 = __esm({
  "node_modules/@smithy/util-config-provider/dist-es/index.js"() {
    "use strict";
    init_booleanSelector();
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var ENV_USE_DUALSTACK_ENDPOINT, CONFIG_USE_DUALSTACK_ENDPOINT, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseDualstackEndpointConfigOptions = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"() {
    "use strict";
    init_dist_es29();
    ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => booleanSelector(env2, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var ENV_USE_FIPS_ENDPOINT, CONFIG_USE_FIPS_ENDPOINT, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseFipsEndpointConfigOptions = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"() {
    "use strict";
    init_dist_es29();
    ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => booleanSelector(env2, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js
var init_resolveCustomEndpointsConfig = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js"() {
    "use strict";
    init_dist_es23();
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js
var init_getEndpointFromRegion = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js
var init_resolveEndpointsConfig = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"() {
    "use strict";
    init_dist_es23();
    init_getEndpointFromRegion();
  }
});

// node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js
var init_endpointsConfig = __esm({
  "node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js"() {
    "use strict";
    init_NodeUseDualstackEndpointConfigOptions();
    init_NodeUseFipsEndpointConfigOptions();
    init_resolveCustomEndpointsConfig();
    init_resolveEndpointsConfig();
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js
var REGION_ENV_NAME, REGION_INI_NAME, NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS;
var init_config2 = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js"() {
    "use strict";
    REGION_ENV_NAME = "AWS_REGION";
    REGION_INI_NAME = "region";
    NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js
var isFipsRegion;
var init_isFipsRegion = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    "use strict";
    isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js
var getRealRegion;
var init_getRealRegion = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    "use strict";
    init_isFipsRegion();
    getRealRegion = (region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var resolveRegionConfig;
var init_resolveRegionConfig = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    "use strict";
    init_getRealRegion();
    init_isFipsRegion();
    resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return __spreadProps(__spreadValues({}, input), {
        region: () => __async(void 0, null, function* () {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = yield region();
          return getRealRegion(providedRegion);
        }),
        useFipsEndpoint: () => __async(void 0, null, function* () {
          const providedRegion = typeof region === "string" ? region : yield region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        })
      });
    };
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js
var init_regionConfig = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js"() {
    "use strict";
    init_config2();
    init_resolveRegionConfig();
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js
var init_PartitionHash = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js
var init_RegionHash = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js
var init_getHostnameFromVariants = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedHostname.js
var init_getResolvedHostname = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedHostname.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedPartition.js
var init_getResolvedPartition = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedPartition.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js
var init_getResolvedSigningRegion = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js"() {
    "use strict";
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js
var init_getRegionInfo = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"() {
    "use strict";
    init_getHostnameFromVariants();
    init_getResolvedHostname();
    init_getResolvedPartition();
    init_getResolvedSigningRegion();
  }
});

// node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js
var init_regionInfo = __esm({
  "node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js"() {
    "use strict";
    init_PartitionHash();
    init_RegionHash();
    init_getRegionInfo();
  }
});

// node_modules/@smithy/config-resolver/dist-es/index.js
var init_dist_es30 = __esm({
  "node_modules/@smithy/config-resolver/dist-es/index.js"() {
    "use strict";
    init_endpointsConfig();
    init_regionConfig();
    init_regionInfo();
  }
});

// node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js
var resolveEventStreamSerdeConfig;
var init_EventStreamSerdeConfig = __esm({
  "node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js"() {
    "use strict";
    resolveEventStreamSerdeConfig = (input) => __spreadProps(__spreadValues({}, input), {
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });
  }
});

// node_modules/@smithy/eventstream-serde-config-resolver/dist-es/index.js
var init_dist_es31 = __esm({
  "node_modules/@smithy/eventstream-serde-config-resolver/dist-es/index.js"() {
    "use strict";
    init_EventStreamSerdeConfig();
  }
});

// node_modules/@smithy/middleware-content-length/dist-es/index.js
function contentLengthMiddleware(bodyLengthChecker) {
  return (next) => (args) => __async(this, null, function* () {
    const request2 = args.request;
    if (HttpRequest.isInstance(request2)) {
      const { body, headers } = request2;
      if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER2) === -1) {
        try {
          const length = bodyLengthChecker(body);
          request2.headers = __spreadProps(__spreadValues({}, request2.headers), {
            [CONTENT_LENGTH_HEADER2]: String(length)
          });
        } catch (error) {
        }
      }
    }
    return next(__spreadProps(__spreadValues({}, args), {
      request: request2
    }));
  });
}
var CONTENT_LENGTH_HEADER2, contentLengthMiddlewareOptions, getContentLengthPlugin;
var init_dist_es32 = __esm({
  "node_modules/@smithy/middleware-content-length/dist-es/index.js"() {
    "use strict";
    init_dist_es2();
    CONTENT_LENGTH_HEADER2 = "content-length";
    contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js
var resolveParamsForS3, DOMAIN_PATTERN, IP_ADDRESS_PATTERN, DOTS_PATTERN, isDnsCompatibleBucketName, isArnBucketName;
var init_s3 = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"() {
    "use strict";
    resolveParamsForS3 = (endpointParams) => __async(void 0, null, function* () {
      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    });
    DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    DOTS_PATTERN = /\.\./;
    isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    isArnBucketName = (bucketName) => {
      const [arn, partition2, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition2, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition2 && !!service && !!account && !!typeOrId;
    };
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js
var init_service_customizations = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js"() {
    "use strict";
    init_s3();
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js
var createConfigValueProvider;
var init_createConfigValueProvider = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"() {
    "use strict";
    createConfigValueProvider = (configKey, canonicalEndpointParamKey, config2) => {
      const configProvider = () => __async(void 0, null, function* () {
        var _a;
        const configValue = (_a = config2[configKey]) != null ? _a : config2[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      });
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return () => __async(void 0, null, function* () {
          const endpoint = yield configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path: path3 } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path3}`;
            }
          }
          return endpoint;
        });
      }
      return configProvider;
    };
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js
var getEndpointFromInstructions, resolveParams;
var init_getEndpointFromInstructions = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"() {
    "use strict";
    init_service_customizations();
    init_createConfigValueProvider();
    getEndpointFromInstructions = (commandInput, instructionsSupplier, clientConfig, context) => __async(void 0, null, function* () {
      const endpointParams = yield resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    });
    resolveParams = (commandInput, instructionsSupplier, clientConfig) => __async(void 0, null, function* () {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = yield createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        yield resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    });
  }
});

// node_modules/@smithy/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
var init_dist_es33 = __esm({
  "node_modules/@smithy/querystring-parser/dist-es/index.js"() {
    "use strict";
  }
});

// node_modules/@smithy/url-parser/dist-es/index.js
var parseUrl;
var init_dist_es34 = __esm({
  "node_modules/@smithy/url-parser/dist-es/index.js"() {
    "use strict";
    init_dist_es33();
    parseUrl = (url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = parseQueryString(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js
var toEndpointV1;
var init_toEndpointV1 = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js"() {
    "use strict";
    init_dist_es34();
    toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return parseUrl(endpoint.url);
        }
        return endpoint;
      }
      return parseUrl(endpoint);
    };
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js
var init_adaptors = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js"() {
    "use strict";
    init_getEndpointFromInstructions();
    init_toEndpointV1();
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js
var endpointMiddleware;
var init_endpointMiddleware = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"() {
    "use strict";
    init_getEndpointFromInstructions();
    endpointMiddleware = ({ config: config2, instructions }) => {
      return (next, context) => (args) => __async(void 0, null, function* () {
        var _a, _b;
        const endpoint = yield getEndpointFromInstructions(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, __spreadValues({}, config2), context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next(__spreadValues({}, args));
      });
    };
  }
});

// node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js
var deserializerMiddleware;
var init_deserializerMiddleware = __esm({
  "node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
    "use strict";
    deserializerMiddleware = (options, deserializer) => (next, context) => (args) => __async(void 0, null, function* () {
      const { response } = yield next(args);
      try {
        const parsed = yield deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
        }
        throw error;
      }
    });
  }
});

// node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js
var serializerMiddleware;
var init_serializerMiddleware = __esm({
  "node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
    "use strict";
    serializerMiddleware = (options, serializer) => (next, context) => (args) => __async(void 0, null, function* () {
      var _a;
      const endpoint = ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser ? () => __async(void 0, null, function* () {
        return options.urlParser(context.endpointV2.url);
      }) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request2 = yield serializer(args.input, __spreadProps(__spreadValues({}, options), { endpoint }));
      return next(__spreadProps(__spreadValues({}, args), {
        request: request2
      }));
    });
  }
});

// node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js
function getSerdePlugin(config2, serializer, deserializer) {
  return {
    applyToStack: (commandStack) => {
      commandStack.add(deserializerMiddleware(config2, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config2, serializer), serializerMiddlewareOption);
    }
  };
}
var deserializerMiddlewareOption, serializerMiddlewareOption;
var init_serdePlugin = __esm({
  "node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    "use strict";
    init_deserializerMiddleware();
    init_serializerMiddleware();
    deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
  }
});

// node_modules/@smithy/middleware-serde/dist-es/index.js
var init_dist_es35 = __esm({
  "node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    "use strict";
    init_deserializerMiddleware();
    init_serdePlugin();
    init_serializerMiddleware();
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js
var endpointMiddlewareOptions, getEndpointPlugin;
var init_getEndpointPlugin = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js"() {
    "use strict";
    init_dist_es35();
    init_endpointMiddleware();
    endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
    getEndpointPlugin = (config2, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
          config: config2,
          instructions
        }), endpointMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js
var resolveEndpointConfig;
var init_resolveEndpointConfig = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"() {
    "use strict";
    init_dist_es23();
    init_toEndpointV1();
    resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) != null ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? () => __async(void 0, null, function* () {
        return toEndpointV1(yield normalizeProvider(endpoint)());
      }) : void 0;
      const isCustomEndpoint = !!endpoint;
      return __spreadProps(__spreadValues({}, input), {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: normalizeProvider((_b = input.useDualstackEndpoint) != null ? _b : false),
        useFipsEndpoint: normalizeProvider((_c = input.useFipsEndpoint) != null ? _c : false)
      });
    };
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/types.js
var init_types3 = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/middleware-endpoint/dist-es/index.js
var init_dist_es36 = __esm({
  "node_modules/@smithy/middleware-endpoint/dist-es/index.js"() {
    "use strict";
    init_adaptors();
    init_endpointMiddleware();
    init_getEndpointPlugin();
    init_resolveEndpointConfig();
    init_types3();
  }
});

// node_modules/@smithy/util-retry/dist-es/config.js
var RETRY_MODES, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE;
var init_config3 = __esm({
  "node_modules/@smithy/util-retry/dist-es/config.js"() {
    "use strict";
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES || (RETRY_MODES = {}));
    DEFAULT_MAX_ATTEMPTS = 3;
    DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@smithy/service-error-classification/dist-es/constants.js
var THROTTLING_ERROR_CODES, TRANSIENT_ERROR_CODES, TRANSIENT_ERROR_STATUS_CODES, NODEJS_TIMEOUT_ERROR_CODES2;
var init_constants5 = __esm({
  "node_modules/@smithy/service-error-classification/dist-es/constants.js"() {
    "use strict";
    THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    NODEJS_TIMEOUT_ERROR_CODES2 = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/service-error-classification/dist-es/index.js
var isThrottlingError, isTransientError, isServerError;
var init_dist_es37 = __esm({
  "node_modules/@smithy/service-error-classification/dist-es/index.js"() {
    "use strict";
    init_constants5();
    isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true;
    };
    isTransientError = (error) => {
      var _a;
      return TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES2.includes((error == null ? void 0 : error.code) || "") || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0);
    };
    isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js
var DefaultRateLimiter;
var init_DefaultRateLimiter = __esm({
  "node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js"() {
    "use strict";
    init_dist_es37();
    DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options == null ? void 0 : options.beta) != null ? _a : 0.7;
        this.minCapacity = (_b = options == null ? void 0 : options.minCapacity) != null ? _b : 1;
        this.minFillRate = (_c = options == null ? void 0 : options.minFillRate) != null ? _c : 0.5;
        this.scaleConstant = (_d = options == null ? void 0 : options.scaleConstant) != null ? _d : 0.4;
        this.smooth = (_e = options == null ? void 0 : options.smooth) != null ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      getSendToken() {
        return __async(this, null, function* () {
          return this.acquireTokenBucket(1);
        });
      }
      acquireTokenBucket(amount) {
        return __async(this, null, function* () {
          if (!this.enabled) {
            return;
          }
          this.refillTokenBucket();
          if (amount > this.currentCapacity) {
            const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
            yield new Promise((resolve) => setTimeout(resolve, delay));
          }
          this.currentCapacity = this.currentCapacity - amount;
        });
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (isThrottlingError(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t4 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t4 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/constants.js
var DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY, THROTTLING_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, RETRY_COST, TIMEOUT_RETRY_COST, NO_RETRY_INCREMENT, INVOCATION_ID_HEADER, REQUEST_HEADER;
var init_constants6 = __esm({
  "node_modules/@smithy/util-retry/dist-es/constants.js"() {
    "use strict";
    DEFAULT_RETRY_DELAY_BASE = 100;
    MAXIMUM_RETRY_DELAY = 20 * 1e3;
    THROTTLING_RETRY_DELAY_BASE = 500;
    INITIAL_RETRY_TOKENS = 500;
    RETRY_COST = 5;
    TIMEOUT_RETRY_COST = 10;
    NO_RETRY_INCREMENT = 1;
    INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js
var getDefaultRetryBackoffStrategy;
var init_defaultRetryBackoffStrategy = __esm({
  "node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js"() {
    "use strict";
    init_constants6();
    getDefaultRetryBackoffStrategy = () => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js
var createDefaultRetryToken;
var init_defaultRetryToken = __esm({
  "node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js"() {
    "use strict";
    init_constants6();
    createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js
var StandardRetryStrategy;
var init_StandardRetryStrategy = __esm({
  "node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"() {
    "use strict";
    init_config3();
    init_constants6();
    init_defaultRetryBackoffStrategy();
    init_defaultRetryToken();
    StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : () => __async(this, null, function* () {
          return maxAttempts;
        });
      }
      acquireInitialRetryToken(retryTokenScope) {
        return __async(this, null, function* () {
          return createDefaultRetryToken({
            retryDelay: DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0
          });
        });
      }
      refreshRetryTokenForRetry(token, errorInfo) {
        return __async(this, null, function* () {
          const maxAttempts = yield this.getMaxAttempts();
          if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return createDefaultRetryToken({
              retryDelay,
              retryCount: token.getRetryCount() + 1,
              retryCost: capacityCost
            });
          }
          throw new Error("No retry token available");
        });
      }
      recordSuccess(token) {
        var _a;
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) != null ? _a : NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      getMaxAttempts() {
        return __async(this, null, function* () {
          try {
            return yield this.maxAttemptsProvider();
          } catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
            return DEFAULT_MAX_ATTEMPTS;
          }
        });
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js
var AdaptiveRetryStrategy;
var init_AdaptiveRetryStrategy = __esm({
  "node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js"() {
    "use strict";
    init_config3();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options != null ? options : {};
        this.rateLimiter = rateLimiter != null ? rateLimiter : new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      acquireInitialRetryToken(retryTokenScope) {
        return __async(this, null, function* () {
          yield this.rateLimiter.getSendToken();
          return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
        });
      }
      refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        return __async(this, null, function* () {
          this.rateLimiter.updateClientSendingRate(errorInfo);
          return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        });
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
  }
});

// node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js
var init_ConfiguredRetryStrategy = __esm({
  "node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js"() {
    "use strict";
    init_constants6();
    init_StandardRetryStrategy();
  }
});

// node_modules/@smithy/util-retry/dist-es/types.js
var init_types4 = __esm({
  "node_modules/@smithy/util-retry/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/util-retry/dist-es/index.js
var init_dist_es38 = __esm({
  "node_modules/@smithy/util-retry/dist-es/index.js"() {
    "use strict";
    init_AdaptiveRetryStrategy();
    init_ConfiguredRetryStrategy();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    init_config3();
    init_constants6();
    init_types4();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js
var init_defaultRetryQuota = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js"() {
    "use strict";
    init_dist_es38();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/delayDecider.js
var init_delayDecider = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/delayDecider.js"() {
    "use strict";
    init_dist_es38();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/retryDecider.js
var init_retryDecider = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/retryDecider.js"() {
    "use strict";
    init_dist_es37();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/util.js
var asSdkError;
var init_util3 = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/util.js"() {
    "use strict";
    asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js
var import_uuid2;
var init_StandardRetryStrategy2 = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es37();
    init_dist_es38();
    import_uuid2 = require("uuid");
    init_defaultRetryQuota();
    init_delayDecider();
    init_retryDecider();
    init_util3();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js
var init_AdaptiveRetryStrategy2 = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js"() {
    "use strict";
    init_dist_es38();
    init_StandardRetryStrategy2();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/configurations.js
var ENV_MAX_ATTEMPTS, CONFIG_MAX_ATTEMPTS, NODE_MAX_ATTEMPT_CONFIG_OPTIONS, resolveRetryConfig, ENV_RETRY_MODE, CONFIG_RETRY_MODE, NODE_RETRY_MODE_CONFIG_OPTIONS;
var init_configurations2 = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/configurations.js"() {
    "use strict";
    init_dist_es23();
    init_dist_es38();
    ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    CONFIG_MAX_ATTEMPTS = "max_attempts";
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: DEFAULT_MAX_ATTEMPTS
    };
    resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = normalizeProvider((_a = input.maxAttempts) != null ? _a : DEFAULT_MAX_ATTEMPTS);
      return __spreadProps(__spreadValues({}, input), {
        maxAttempts,
        retryStrategy: () => __async(void 0, null, function* () {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = yield normalizeProvider(input.retryMode)();
          if (retryMode === RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy(maxAttempts);
        })
      });
    };
    ENV_RETRY_MODE = "AWS_RETRY_MODE";
    CONFIG_RETRY_MODE = "retry_mode";
    NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js
var init_omitRetryHeadersMiddleware = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es38();
  }
});

// node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js
var import_uuid3, retryMiddleware, isRetryStrategyV2, getRetryErrorInfo, getRetryErrorType, retryMiddlewareOptions, getRetryPlugin, getRetryAfterHint;
var init_retryMiddleware = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es37();
    init_dist_es38();
    import_uuid3 = require("uuid");
    init_util3();
    retryMiddleware = (options) => (next, context) => (args) => __async(void 0, null, function* () {
      let retryStrategy = yield options.retryStrategy();
      const maxAttempts = yield options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = yield retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request: request2 } = args;
        if (HttpRequest.isInstance(request2)) {
          request2.headers[INVOCATION_ID_HEADER] = (0, import_uuid3.v4)();
        }
        while (true) {
          try {
            if (HttpRequest.isInstance(request2)) {
              request2.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = yield next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e5) {
            const retryErrorInfo = getRetryErrorInfo(e5);
            lastError = asSdkError(e5);
            try {
              retryToken = yield retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            yield new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy == null ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    });
    isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    getRetryErrorInfo = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    getRetryErrorType = (error) => {
      if (isThrottlingError(error))
        return "THROTTLING";
      if (isTransientError(error))
        return "TRANSIENT";
      if (isServerError(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    });
    getRetryAfterHint = (response) => {
      if (!HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-es/index.js
var init_dist_es39 = __esm({
  "node_modules/@smithy/middleware-retry/dist-es/index.js"() {
    "use strict";
    init_AdaptiveRetryStrategy2();
    init_StandardRetryStrategy2();
    init_configurations2();
    init_delayDecider();
    init_omitRetryHeadersMiddleware();
    init_retryDecider();
    init_retryMiddleware();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters;
var init_EndpointParameters = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters = (options) => {
      var _a, _b, _c, _d, _e, _f;
      return __spreadProps(__spreadValues({}, options), {
        useFipsEndpoint: (_a = options.useFipsEndpoint) != null ? _a : false,
        useDualstackEndpoint: (_b = options.useDualstackEndpoint) != null ? _b : false,
        forcePathStyle: (_c = options.forcePathStyle) != null ? _c : false,
        useAccelerateEndpoint: (_d = options.useAccelerateEndpoint) != null ? _d : false,
        useGlobalEndpoint: (_e = options.useGlobalEndpoint) != null ? _e : false,
        disableMultiregionAccessPoints: (_f = options.disableMultiregionAccessPoints) != null ? _f : false,
        defaultSigningName: "s3"
      });
    };
  }
});

// node_modules/@aws-sdk/client-s3/package.json
var package_default;
var init_package = __esm({
  "node_modules/@aws-sdk/client-s3/package.json"() {
    package_default = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.417.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn test:unit",
        "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
        "test:unit": "ts-mocha test/**/*.spec.ts"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "3.0.0",
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.414.0",
        "@aws-sdk/credential-provider-node": "3.414.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.413.0",
        "@aws-sdk/middleware-expect-continue": "3.413.0",
        "@aws-sdk/middleware-flexible-checksums": "3.413.0",
        "@aws-sdk/middleware-host-header": "3.413.0",
        "@aws-sdk/middleware-location-constraint": "3.413.0",
        "@aws-sdk/middleware-logger": "3.413.0",
        "@aws-sdk/middleware-recursion-detection": "3.413.0",
        "@aws-sdk/middleware-sdk-s3": "3.414.0",
        "@aws-sdk/middleware-signing": "3.413.0",
        "@aws-sdk/middleware-ssec": "3.413.0",
        "@aws-sdk/middleware-user-agent": "3.413.0",
        "@aws-sdk/region-config-resolver": "3.413.0",
        "@aws-sdk/signature-v4-multi-region": "3.413.0",
        "@aws-sdk/types": "3.413.0",
        "@aws-sdk/util-endpoints": "3.413.0",
        "@aws-sdk/util-user-agent-browser": "3.413.0",
        "@aws-sdk/util-user-agent-node": "3.413.0",
        "@aws-sdk/xml-builder": "3.310.0",
        "@smithy/config-resolver": "^2.0.8",
        "@smithy/eventstream-serde-browser": "^2.0.7",
        "@smithy/eventstream-serde-config-resolver": "^2.0.7",
        "@smithy/eventstream-serde-node": "^2.0.7",
        "@smithy/fetch-http-handler": "^2.1.3",
        "@smithy/hash-blob-browser": "^2.0.7",
        "@smithy/hash-node": "^2.0.7",
        "@smithy/hash-stream-node": "^2.0.7",
        "@smithy/invalid-dependency": "^2.0.7",
        "@smithy/md5-js": "^2.0.7",
        "@smithy/middleware-content-length": "^2.0.9",
        "@smithy/middleware-endpoint": "^2.0.7",
        "@smithy/middleware-retry": "^2.0.10",
        "@smithy/middleware-serde": "^2.0.7",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.10",
        "@smithy/node-http-handler": "^2.1.3",
        "@smithy/protocol-http": "^3.0.3",
        "@smithy/smithy-client": "^2.1.4",
        "@smithy/types": "^2.3.1",
        "@smithy/url-parser": "^2.0.7",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.8",
        "@smithy/util-defaults-mode-node": "^2.0.10",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-stream": "^2.0.10",
        "@smithy/util-utf8": "^2.0.0",
        "@smithy/util-waiter": "^2.0.7",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/chai": "^4.2.11",
        "@types/mocha": "^8.0.4",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-es/index.js
var resolveStsAuthConfig;
var init_dist_es40 = __esm({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-es/index.js"() {
    "use strict";
    init_dist_es25();
    resolveStsAuthConfig = (input, { stsClientCtor }) => resolveAwsAuthConfig(__spreadProps(__spreadValues({}, input), {
      stsClientCtor
    }));
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters2;
var init_EndpointParameters2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters2 = (options) => {
      var _a, _b, _c;
      return __spreadProps(__spreadValues({}, options), {
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        useGlobalEndpoint: (_c = options.useGlobalEndpoint) != null ? _c : false,
        defaultSigningName: "sts"
      });
    };
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var package_default2;
var init_package2 = __esm({
  "node_modules/@aws-sdk/client-sts/package.json"() {
    package_default2 = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.414.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/credential-provider-node": "3.414.0",
        "@aws-sdk/middleware-host-header": "3.413.0",
        "@aws-sdk/middleware-logger": "3.413.0",
        "@aws-sdk/middleware-recursion-detection": "3.413.0",
        "@aws-sdk/middleware-sdk-sts": "3.413.0",
        "@aws-sdk/middleware-signing": "3.413.0",
        "@aws-sdk/middleware-user-agent": "3.413.0",
        "@aws-sdk/region-config-resolver": "3.413.0",
        "@aws-sdk/types": "3.413.0",
        "@aws-sdk/util-endpoints": "3.413.0",
        "@aws-sdk/util-user-agent-browser": "3.413.0",
        "@aws-sdk/util-user-agent-node": "3.413.0",
        "@smithy/config-resolver": "^2.0.8",
        "@smithy/fetch-http-handler": "^2.1.3",
        "@smithy/hash-node": "^2.0.7",
        "@smithy/invalid-dependency": "^2.0.7",
        "@smithy/middleware-content-length": "^2.0.9",
        "@smithy/middleware-endpoint": "^2.0.7",
        "@smithy/middleware-retry": "^2.0.10",
        "@smithy/middleware-serde": "^2.0.7",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.10",
        "@smithy/node-http-handler": "^2.1.3",
        "@smithy/protocol-http": "^3.0.3",
        "@smithy/smithy-client": "^2.1.4",
        "@smithy/types": "^2.3.1",
        "@smithy/url-parser": "^2.0.7",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.8",
        "@smithy/util-defaults-mode-node": "^2.0.10",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js
var STSServiceException;
var init_STSServiceException = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js"() {
    "use strict";
    init_dist_es16();
    STSServiceException = class _STSServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js
var ExpiredTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, IDPRejectedClaimException, InvalidIdentityTokenException, IDPCommunicationErrorException, InvalidAuthorizationMessageException, CredentialsFilterSensitiveLog, AssumeRoleResponseFilterSensitiveLog, AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog, AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, GetFederationTokenResponseFilterSensitiveLog, GetSessionTokenResponseFilterSensitiveLog;
var init_models_0 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es16();
    init_STSServiceException();
    ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExpiredTokenException",
          $fault: "client"
        }, opts));
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
      }
    };
    MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MalformedPolicyDocumentException",
          $fault: "client"
        }, opts));
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PackedPolicyTooLargeException",
          $fault: "client"
        }, opts));
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    RegionDisabledException = class _RegionDisabledException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RegionDisabledException",
          $fault: "client"
        }, opts));
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPRejectedClaimException",
          $fault: "client"
        }, opts));
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidIdentityTokenException",
          $fault: "client"
        }, opts));
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPCommunicationErrorException",
          $fault: "client"
        }, opts));
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidAuthorizationMessageException",
          $fault: "client"
        }, opts));
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    CredentialsFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING });
    AssumeRoleResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) });
    AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SAMLAssertion && { SAMLAssertion: SENSITIVE_STRING });
    AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) });
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.WebIdentityToken && { WebIdentityToken: SENSITIVE_STRING });
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) });
    GetFederationTokenResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) });
    GetSessionTokenResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v3) {
      return typeof v3 !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a5, arrayMode) {
      if (a5) {
        const keys = Object.keys(a5);
        const len = keys.length;
        for (let i5 = 0; i5 < len; i5++) {
          if (arrayMode === "strict") {
            target[keys[i5]] = [a5[keys[i5]]];
          } else {
            target[keys[i5]] = a5[keys[i5]];
          }
        }
      }
    };
    exports2.getValue = function(v3) {
      if (exports2.isExist(v3)) {
        return v3;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i5 = 0; i5 < xmlData.length; i5++) {
        if (xmlData[i5] === "<" && xmlData[i5 + 1] === "?") {
          i5 += 2;
          i5 = readPI(xmlData, i5);
          if (i5.err)
            return i5;
        } else if (xmlData[i5] === "<") {
          let tagStartPos = i5;
          i5++;
          if (xmlData[i5] === "!") {
            i5 = readCommentAndCDATA(xmlData, i5);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i5] === "/") {
              closingTag = true;
              i5++;
            }
            let tagName = "";
            for (; i5 < xmlData.length && xmlData[i5] !== ">" && xmlData[i5] !== " " && xmlData[i5] !== "	" && xmlData[i5] !== "\n" && xmlData[i5] !== "\r"; i5++) {
              tagName += xmlData[i5];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i5--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i5));
            }
            const result = readAttributeStr(xmlData, i5);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i5));
            }
            let attrStr = result.value;
            i5 = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i5 - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i5));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i5 - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i5));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i5++; i5 < xmlData.length; i5++) {
              if (xmlData[i5] === "<") {
                if (xmlData[i5 + 1] === "!") {
                  i5++;
                  i5 = readCommentAndCDATA(xmlData, i5);
                  continue;
                } else if (xmlData[i5 + 1] === "?") {
                  i5 = readPI(xmlData, ++i5);
                  if (i5.err)
                    return i5;
                } else {
                  break;
                }
              } else if (xmlData[i5] === "&") {
                const afterAmp = validateAmpersand(xmlData, i5);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i5));
                i5 = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i5])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i5));
                }
              }
            }
            if (xmlData[i5] === "<") {
              i5--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i5])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i5] + "' is not expected.", getLineNumberForPosition(xmlData, i5));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t4) => t4.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i5) {
      const start = i5;
      for (; i5 < xmlData.length; i5++) {
        if (xmlData[i5] == "?" || xmlData[i5] == " ") {
          const tagname = xmlData.substr(start, i5 - start);
          if (i5 > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i5));
          } else if (xmlData[i5] == "?" && xmlData[i5 + 1] == ">") {
            i5++;
            break;
          } else {
            continue;
          }
        }
      }
      return i5;
    }
    function readCommentAndCDATA(xmlData, i5) {
      if (xmlData.length > i5 + 5 && xmlData[i5 + 1] === "-" && xmlData[i5 + 2] === "-") {
        for (i5 += 3; i5 < xmlData.length; i5++) {
          if (xmlData[i5] === "-" && xmlData[i5 + 1] === "-" && xmlData[i5 + 2] === ">") {
            i5 += 2;
            break;
          }
        }
      } else if (xmlData.length > i5 + 8 && xmlData[i5 + 1] === "D" && xmlData[i5 + 2] === "O" && xmlData[i5 + 3] === "C" && xmlData[i5 + 4] === "T" && xmlData[i5 + 5] === "Y" && xmlData[i5 + 6] === "P" && xmlData[i5 + 7] === "E") {
        let angleBracketsCount = 1;
        for (i5 += 8; i5 < xmlData.length; i5++) {
          if (xmlData[i5] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i5] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i5 + 9 && xmlData[i5 + 1] === "[" && xmlData[i5 + 2] === "C" && xmlData[i5 + 3] === "D" && xmlData[i5 + 4] === "A" && xmlData[i5 + 5] === "T" && xmlData[i5 + 6] === "A" && xmlData[i5 + 7] === "[") {
        for (i5 += 8; i5 < xmlData.length; i5++) {
          if (xmlData[i5] === "]" && xmlData[i5 + 1] === "]" && xmlData[i5 + 2] === ">") {
            i5 += 2;
            break;
          }
        }
      }
      return i5;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i5) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i5 < xmlData.length; i5++) {
        if (xmlData[i5] === doubleQuote || xmlData[i5] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i5];
          } else if (startChar !== xmlData[i5]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i5] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i5];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i5,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i5 = 0; i5 < matches.length; i5++) {
        if (matches[i5][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i5][2] + "' has no space in starting.", getPositionFromMatch(matches[i5]));
        } else if (matches[i5][3] !== void 0 && matches[i5][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i5][2] + "' is without value.", getPositionFromMatch(matches[i5]));
        } else if (matches[i5][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i5][2] + "' is not allowed.", getPositionFromMatch(matches[i5]));
        }
        const attrName = matches[i5][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i5]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i5]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i5) {
      let re = /\d/;
      if (xmlData[i5] === "x") {
        i5++;
        re = /[\da-fA-F]/;
      }
      for (; i5 < xmlData.length; i5++) {
        if (xmlData[i5] === ";")
          return i5;
        if (!xmlData[i5].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i5) {
      i5++;
      if (xmlData[i5] === ";")
        return -1;
      if (xmlData[i5] === "#") {
        i5++;
        return validateNumberAmpersand(xmlData, i5);
      }
      let count = 0;
      for (; i5 < xmlData.length; i5++, count++) {
        if (xmlData[i5].match(/\w/) && count < 20)
          continue;
        if (xmlData[i5] === ";")
          break;
        return -1;
      }
      return i5;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    "use strict";
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode2 = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode2;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    function readDocType(xmlData, i5) {
      const entities = {};
      if (xmlData[i5 + 3] === "O" && xmlData[i5 + 4] === "C" && xmlData[i5 + 5] === "T" && xmlData[i5 + 6] === "Y" && xmlData[i5 + 7] === "P" && xmlData[i5 + 8] === "E") {
        i5 = i5 + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i5 < xmlData.length; i5++) {
          if (xmlData[i5] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i5)) {
              i5 += 7;
              [entityName, val, i5] = readEntityExp(xmlData, i5 + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i5))
              i5 += 8;
            else if (hasBody && isAttlist(xmlData, i5))
              i5 += 8;
            else if (hasBody && isNotation(xmlData, i5))
              i5 += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i5] === ">") {
            if (comment) {
              if (xmlData[i5 - 1] === "-" && xmlData[i5 - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i5] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i5];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i: i5 };
    }
    function readEntityExp(xmlData, i5) {
      let entityName2 = "";
      for (; i5 < xmlData.length && (xmlData[i5] !== "'" && xmlData[i5] !== '"'); i5++) {
        entityName2 += xmlData[i5];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i5++];
      let val2 = "";
      for (; i5 < xmlData.length && xmlData[i5] !== startChar; i5++) {
        val2 += xmlData[i5];
      }
      return [entityName2, val2, i5];
    }
    function isComment(xmlData, i5) {
      if (xmlData[i5 + 1] === "!" && xmlData[i5 + 2] === "-" && xmlData[i5 + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i5) {
      if (xmlData[i5 + 1] === "!" && xmlData[i5 + 2] === "E" && xmlData[i5 + 3] === "N" && xmlData[i5 + 4] === "T" && xmlData[i5 + 5] === "I" && xmlData[i5 + 6] === "T" && xmlData[i5 + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i5) {
      if (xmlData[i5 + 1] === "!" && xmlData[i5 + 2] === "E" && xmlData[i5 + 3] === "L" && xmlData[i5 + 4] === "E" && xmlData[i5 + 5] === "M" && xmlData[i5 + 6] === "E" && xmlData[i5 + 7] === "N" && xmlData[i5 + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i5) {
      if (xmlData[i5 + 1] === "!" && xmlData[i5 + 2] === "A" && xmlData[i5 + 3] === "T" && xmlData[i5 + 4] === "T" && xmlData[i5 + 5] === "L" && xmlData[i5 + 6] === "I" && xmlData[i5 + 7] === "S" && xmlData[i5 + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i5) {
      if (xmlData[i5 + 1] === "!" && xmlData[i5 + 2] === "N" && xmlData[i5 + 3] === "O" && xmlData[i5 + 4] === "T" && xmlData[i5 + 5] === "A" && xmlData[i5 + 6] === "T" && xmlData[i5 + 7] === "I" && xmlData[i5 + 8] === "O" && xmlData[i5 + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports2, module2) {
    "use strict";
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i5 = 0; i5 < entKeys.length; i5++) {
        const ent = entKeys[i5];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i5 = 0; i5 < len; i5++) {
          const attrName = this.resolveNameSpace(matches[i5][1]);
          let oldVal = matches[i5][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i5 = 0; i5 < xmlData.length; i5++) {
        const ch = xmlData[i5];
        if (ch === "<") {
          if (xmlData[i5 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i5, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i5 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i5 = closeIndex;
          } else if (xmlData[i5 + 1] === "?") {
            let tagData = readTagExp(xmlData, i5, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i5 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i5 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i5 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i5 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i5 = endIndex;
          } else if (xmlData.substr(i5 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i5);
            this.docTypeEntities = result.entities;
            i5 = result.i;
          } else if (xmlData.substr(i5 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i5, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i5 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i5 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i5, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i5 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i5 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i5 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i5 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i5];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i5, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i5; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i5, errMsg) {
      const closingIndex = xmlData.indexOf(str, i5);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i5, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i5 + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i5) {
      const startIndex = i5;
      let openTagCount = 1;
      for (; i5 < xmlData.length; i5++) {
        if (xmlData[i5] === "<") {
          if (xmlData[i5 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i5, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i5 + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i5),
                  i: closeIndex
                };
              }
            }
            i5 = closeIndex;
          } else if (xmlData[i5 + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i5 + 1, "StopNode is not closed.");
            i5 = closeIndex;
          } else if (xmlData.substr(i5 + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i5 + 3, "StopNode is not closed.");
            i5 = closeIndex;
          } else if (xmlData.substr(i5 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i5, "StopNode is not closed.") - 2;
            i5 = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i5, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i5 = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i5 = 0; i5 < arr.length; i5++) {
        const tagObj = arr[i5];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i5 = 0; i5 < keys.length; i5++) {
        const key = keys[i5];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i5 = 0; i5 < len; i5++) {
          const atrrName = keys[i5];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports2.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    "use strict";
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser3 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser3;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    "use strict";
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i5 = 0; i5 < arr.length; i5++) {
        const tagObj = arr[i5];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i5 = 0; i5 < keys.length; i5++) {
        const key = keys[i5];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i5 = 0; i5 < options.entities.length; i5++) {
          const entity = options.entities[i5];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a5) {
        return a5;
      },
      attributeValueProcessor: function(attrName, a5) {
        return a5;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level2) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level2) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level2) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level2);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level2);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j5 = 0; j5 < arrLen; j5++) {
            const item = jObj[key][j5];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level2) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level2) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level2 + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level2);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level2);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level2);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L2 = Ks.length;
            for (let j5 = 0; j5 < L2; j5++) {
              attrStr += this.buildAttrPairStr(Ks[j5], "" + jObj[key][Ks[j5]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level2);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level2) {
      const result = this.j2x(object, level2 + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level2);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level2);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level2) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level2) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level2) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level2) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level2) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level2) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level2) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level2) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level2) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level2) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level2) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level2) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level2) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i5 = 0; i5 < this.options.entities.length; i5++) {
          const entity = this.options.entities[i5];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level2) {
      return this.options.indentBy.repeat(level2);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser3 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser: XMLParser3,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js
var import_fast_xml_parser, se_AssumeRoleCommand, se_AssumeRoleWithSAMLCommand, se_AssumeRoleWithWebIdentityCommand, se_DecodeAuthorizationMessageCommand, se_GetAccessKeyInfoCommand, se_GetCallerIdentityCommand, se_GetFederationTokenCommand, se_GetSessionTokenCommand, de_AssumeRoleCommand, de_AssumeRoleCommandError, de_AssumeRoleWithSAMLCommand, de_AssumeRoleWithSAMLCommandError, de_AssumeRoleWithWebIdentityCommand, de_AssumeRoleWithWebIdentityCommandError, de_DecodeAuthorizationMessageCommand, de_DecodeAuthorizationMessageCommandError, de_GetAccessKeyInfoCommand, de_GetAccessKeyInfoCommandError, de_GetCallerIdentityCommand, de_GetCallerIdentityCommandError, de_GetFederationTokenCommand, de_GetFederationTokenCommandError, de_GetSessionTokenCommand, de_GetSessionTokenCommandError, de_ExpiredTokenExceptionRes, de_IDPCommunicationErrorExceptionRes, de_IDPRejectedClaimExceptionRes, de_InvalidAuthorizationMessageExceptionRes, de_InvalidIdentityTokenExceptionRes, de_MalformedPolicyDocumentExceptionRes, de_PackedPolicyTooLargeExceptionRes, de_RegionDisabledExceptionRes, se_AssumeRoleRequest, se_AssumeRoleWithSAMLRequest, se_AssumeRoleWithWebIdentityRequest, se_DecodeAuthorizationMessageRequest, se_GetAccessKeyInfoRequest, se_GetCallerIdentityRequest, se_GetFederationTokenRequest, se_GetSessionTokenRequest, se_policyDescriptorListType, se_PolicyDescriptorType, se_ProvidedContext, se_ProvidedContextsListType, se_Tag, se_tagKeyListType, se_tagListType, de_AssumedRoleUser, de_AssumeRoleResponse, de_AssumeRoleWithSAMLResponse, de_AssumeRoleWithWebIdentityResponse, de_Credentials, de_DecodeAuthorizationMessageResponse, de_ExpiredTokenException, de_FederatedUser, de_GetAccessKeyInfoResponse, de_GetCallerIdentityResponse, de_GetFederationTokenResponse, de_GetSessionTokenResponse, de_IDPCommunicationErrorException, de_IDPRejectedClaimException, de_InvalidAuthorizationMessageException, de_InvalidIdentityTokenException, de_MalformedPolicyDocumentException, de_PackedPolicyTooLargeException, de_RegionDisabledException, deserializeMetadata2, collectBodyString2, throwDefaultError2, buildHttpRpcRequest, SHARED_HEADERS, parseBody, parseErrorBody, buildFormUrlencodedString, loadQueryErrorCode;
var init_Aws_query = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es16();
    import_fast_xml_parser = __toESM(require_fxp());
    init_models_0();
    init_STSServiceException();
    se_AssumeRoleCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_AssumeRoleRequest(input, context)), {
        Action: "AssumeRole",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_AssumeRoleWithSAMLCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_AssumeRoleWithSAMLRequest(input, context)), {
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_AssumeRoleWithWebIdentityCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_AssumeRoleWithWebIdentityRequest(input, context)), {
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_DecodeAuthorizationMessageCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_DecodeAuthorizationMessageRequest(input, context)), {
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_GetAccessKeyInfoCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_GetAccessKeyInfoRequest(input, context)), {
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_GetCallerIdentityCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_GetCallerIdentityRequest(input, context)), {
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_GetFederationTokenCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_GetFederationTokenRequest(input, context)), {
        Action: "GetFederationToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    se_GetSessionTokenCommand = (input, context) => __async(void 0, null, function* () {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, se_GetSessionTokenRequest(input, context)), {
        Action: "GetSessionToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    });
    de_AssumeRoleCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_AssumeRoleCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw yield de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw yield de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw yield de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw yield de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_AssumeRoleWithSAMLCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_AssumeRoleWithSAMLCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw yield de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw yield de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw yield de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw yield de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw yield de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw yield de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_AssumeRoleWithWebIdentityCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_AssumeRoleWithWebIdentityCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw yield de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw yield de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw yield de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw yield de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw yield de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw yield de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw yield de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_DecodeAuthorizationMessageCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_DecodeAuthorizationMessageCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw yield de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_GetAccessKeyInfoCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_GetAccessKeyInfoCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    });
    de_GetCallerIdentityCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_GetCallerIdentityCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError2({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    });
    de_GetFederationTokenCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_GetFederationTokenCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw yield de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw yield de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw yield de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_GetSessionTokenCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = yield parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata2(output)
      }, contents);
      return response;
    });
    de_GetSessionTokenCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody(output.body, context)
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw yield de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    });
    de_ExpiredTokenExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_IDPCommunicationErrorExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_IDPRejectedClaimExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_InvalidAuthorizationMessageExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_InvalidIdentityTokenExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_MalformedPolicyDocumentExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_PackedPolicyTooLargeExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    de_RegionDisabledExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException(__spreadValues({
        $metadata: deserializeMetadata2(parsedOutput)
      }, deserialized));
      return decorateServiceException(exception, body);
    });
    se_AssumeRoleRequest = (input, context) => {
      var _a, _b, _c, _d;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      if (input.ProvidedContexts != null) {
        const memberEntries = se_ProvidedContextsListType(input.ProvidedContexts, context);
        if (((_d = input.ProvidedContexts) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_AssumeRoleWithSAMLRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    se_GetFederationTokenRequest = (input, context) => {
      var _a, _b;
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input.ProviderArn != null) {
        entries["ProviderArn"] = input.ProviderArn;
      }
      if (input.ContextAssertion != null) {
        entries["ContextAssertion"] = input.ContextAssertion;
      }
      return entries;
    };
    se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = expectString(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = expectString(output["Arn"]);
      }
      return contents;
    };
    de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = expectString(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = expectString(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = expectString(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = expectString(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = expectString(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = expectString(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = expectString(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = expectString(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = expectString(output["SourceIdentity"]);
      }
      return contents;
    };
    de_Credentials = (output, context) => {
      const contents = {};
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = expectString(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = expectString(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = expectString(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = expectNonNull(parseRfc3339DateTimeWithOffset(output["Expiration"]));
      }
      return contents;
    };
    de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = expectString(output["DecodedMessage"]);
      }
      return contents;
    };
    de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_FederatedUser = (output, context) => {
      const contents = {};
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = expectString(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = expectString(output["Arn"]);
      }
      return contents;
    };
    de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output["Account"] !== void 0) {
        contents.Account = expectString(output["Account"]);
      }
      return contents;
    };
    de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = expectString(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = expectString(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = expectString(output["Arn"]);
      }
      return contents;
    };
    de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = strictParseInt32(output["PackedPolicySize"]);
      }
      return contents;
    };
    de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      return contents;
    };
    de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = expectString(output["message"]);
      }
      return contents;
    };
    deserializeMetadata2 = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    collectBodyString2 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    throwDefaultError2 = withBaseException(STSServiceException);
    buildHttpRpcRequest = (context, headers, path3, resolvedHostname, body) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path3 : basePath + path3,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new HttpRequest(contents);
    });
    SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    parseBody = (streamBody, context) => collectBodyString2(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    parseErrorBody = (errorBody, context) => __async(void 0, null, function* () {
      var _a;
      const value = yield parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = (_a = value.Error.message) != null ? _a : value.Error.Message;
      }
      return value;
    });
    buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
    loadQueryErrorCode = (output, data) => {
      var _a;
      if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js
var AssumeRoleCommand;
var init_AssumeRoleCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_0();
    init_Aws_query();
    AssumeRoleCommand = class _AssumeRoleCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_AssumeRoleCommand(input, context);
      }
      deserialize(output, context) {
        return de_AssumeRoleCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js
var AssumeRoleWithWebIdentityCommand;
var init_AssumeRoleWithWebIdentityCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_0();
    init_Aws_query();
    AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_AssumeRoleWithWebIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return de_AssumeRoleWithWebIdentityCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js
var ASSUME_ROLE_DEFAULT_REGION, decorateDefaultRegion, getDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity, decorateDefaultCredentialProvider;
var init_defaultStsRoleAssumers = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js"() {
    "use strict";
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return () => __async(void 0, null, function* () {
        try {
          return yield region();
        } catch (e5) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      });
    };
    getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return (sourceCreds, params) => __async(void 0, null, function* () {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger: logger2,
            credentialDefaultProvider: () => () => __async(void 0, null, function* () {
              return closureSourceCreds;
            }),
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = yield stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      });
    };
    getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return (params) => __async(void 0, null, function* () {
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger: logger2,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = yield stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      });
    };
    decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor)
    }, input));
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js
var ENV_KEY, ENV_SECRET, ENV_SESSION, ENV_EXPIRATION, fromEnv;
var init_fromEnv = __esm({
  "node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es19();
    ENV_KEY = "AWS_ACCESS_KEY_ID";
    ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    ENV_SESSION = "AWS_SESSION_TOKEN";
    ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    fromEnv = () => () => __async(void 0, null, function* () {
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return __spreadValues(__spreadValues({
          accessKeyId,
          secretAccessKey
        }, sessionToken && { sessionToken }), expiry && { expiration: new Date(expiry) });
      }
      throw new CredentialsProviderError("Unable to find environment variable credentials.");
    });
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-es/index.js
var init_dist_es41 = __esm({
  "node_modules/@aws-sdk/credential-provider-env/dist-es/index.js"() {
    "use strict";
    init_fromEnv();
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js
var import_os, import_path, homeDirCache, getHomeDirCacheKey, getHomeDir;
var init_getHomeDir = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js"() {
    "use strict";
    import_os = require("os");
    import_path = require("path");
    homeDirCache = {};
    getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${import_path.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, import_os.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js
var ENV_PROFILE, DEFAULT_PROFILE, getProfileName;
var init_getProfileName = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js"() {
    "use strict";
    ENV_PROFILE = "AWS_PROFILE";
    DEFAULT_PROFILE = "default";
    getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js
var import_crypto, import_path2, getSSOTokenFilepath;
var init_getSSOTokenFilepath = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js"() {
    "use strict";
    import_crypto = require("crypto");
    import_path2 = require("path");
    init_getHomeDir();
    getSSOTokenFilepath = (id) => {
      const hasher = (0, import_crypto.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, import_path2.join)(getHomeDir(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js
var import_fs, readFile, getSSOTokenFromFile;
var init_getSSOTokenFromFile = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"() {
    "use strict";
    import_fs = require("fs");
    init_getSSOTokenFilepath();
    ({ readFile } = import_fs.promises);
    getSSOTokenFromFile = (id) => __async(void 0, null, function* () {
      const ssoTokenFilepath = getSSOTokenFilepath(id);
      const ssoTokenText = yield readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js
var import_path3, ENV_CONFIG_PATH, getConfigFilepath;
var init_getConfigFilepath = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js"() {
    "use strict";
    import_path3 = require("path");
    init_getHomeDir();
    ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || (0, import_path3.join)(getHomeDir(), ".aws", "config");
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js
var import_path4, ENV_CREDENTIALS_PATH, getCredentialsFilepath;
var init_getCredentialsFilepath = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js"() {
    "use strict";
    import_path4 = require("path");
    init_getHomeDir();
    ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || (0, import_path4.join)(getHomeDir(), ".aws", "credentials");
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileData.js
var profileKeyRegex, getProfileData;
var init_getProfileData = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileData.js"() {
    "use strict";
    profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), { [profileKeyRegex.exec(key)[2]]: value }), __spreadValues({}, data.default && { default: data.default }));
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js
var profileNameBlockList, parseIni;
var init_parseIni = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js"() {
    "use strict";
    profileNameBlockList = ["__proto__", "profile __proto__"];
    parseIni = (iniData) => {
      const map2 = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map2[currentSection] = map2[currentSection] || {};
            map2[currentSection][name] = value;
          }
        }
      }
      return map2;
    };
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js
var import_fs2, readFile2, filePromisesHash, slurpFile;
var init_slurpFile = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js"() {
    "use strict";
    import_fs2 = require("fs");
    ({ readFile: readFile2 } = import_fs2.promises);
    filePromisesHash = {};
    slurpFile = (path3, options) => {
      if (!filePromisesHash[path3] || (options == null ? void 0 : options.ignoreCache)) {
        filePromisesHash[path3] = readFile2(path3, "utf8");
      }
      return filePromisesHash[path3];
    };
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js
var swallowError, loadSharedConfigFiles;
var init_loadSharedConfigFiles = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js"() {
    "use strict";
    init_getConfigFilepath();
    init_getCredentialsFilepath();
    init_getProfileData();
    init_parseIni();
    init_slurpFile();
    swallowError = () => ({});
    loadSharedConfigFiles = (..._0) => __async(void 0, [..._0], function* (init = {}) {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const parsedFiles = yield Promise.all([
        slurpFile(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getProfileData).catch(swallowError),
        slurpFile(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js
var ssoSessionKeyRegex, getSsoSessionData;
var init_getSsoSessionData = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js"() {
    "use strict";
    ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), { [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js
var swallowError2, loadSsoSessionData;
var init_loadSsoSessionData = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js"() {
    "use strict";
    init_getConfigFilepath();
    init_getSsoSessionData();
    init_parseIni();
    init_slurpFile();
    swallowError2 = () => ({});
    loadSsoSessionData = (..._0) => __async(void 0, [..._0], function* (init = {}) {
      var _a;
      return slurpFile((_a = init.configFilepath) != null ? _a : getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2);
    });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js
var mergeConfigFiles;
var init_mergeConfigFiles = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js"() {
    "use strict";
    mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js
var parseKnownFiles;
var init_parseKnownFiles = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js"() {
    "use strict";
    init_loadSharedConfigFiles();
    init_mergeConfigFiles();
    parseKnownFiles = (init) => __async(void 0, null, function* () {
      const parsedFiles = yield loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/types.js
var init_types5 = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-es/index.js
var init_dist_es42 = __esm({
  "node_modules/@smithy/shared-ini-file-loader/dist-es/index.js"() {
    "use strict";
    init_getHomeDir();
    init_getProfileName();
    init_getSSOTokenFilepath();
    init_getSSOTokenFromFile();
    init_loadSharedConfigFiles();
    init_loadSsoSessionData();
    init_parseKnownFiles();
    init_types5();
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js
function httpRequest(options) {
  return new Promise((resolve, reject) => {
    var _a;
    const req = (0, import_http2.request)(__spreadProps(__spreadValues({
      method: "GET"
    }, options), {
      hostname: (_a = options.hostname) == null ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
    }));
    req.on("error", (err) => {
      reject(Object.assign(new ProviderError("Unable to connect to instance metadata service"), err));
      req.destroy();
    });
    req.on("timeout", () => {
      reject(new ProviderError("TimeoutError from instance metadata service"));
      req.destroy();
    });
    req.on("response", (res) => {
      const { statusCode = 400 } = res;
      if (statusCode < 200 || 300 <= statusCode) {
        reject(Object.assign(new ProviderError("Error response received from instance metadata service"), { statusCode }));
        req.destroy();
      }
      const chunks = [];
      res.on("data", (chunk) => {
        chunks.push(chunk);
      });
      res.on("end", () => {
        resolve(import_buffer2.Buffer.concat(chunks));
        req.destroy();
      });
    });
    req.end();
  });
}
var import_buffer2, import_http2;
var init_httpRequest2 = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js"() {
    "use strict";
    init_dist_es19();
    import_buffer2 = require("buffer");
    import_http2 = require("http");
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js
var isImdsCredentials, fromImdsCredentials;
var init_ImdsCredentials = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js"() {
    "use strict";
    isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js
var DEFAULT_TIMEOUT, DEFAULT_MAX_RETRIES, providerConfigFromInit;
var init_RemoteProviderInit = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js"() {
    "use strict";
    DEFAULT_TIMEOUT = 1e3;
    DEFAULT_MAX_RETRIES = 0;
    providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js
var retry;
var init_retry4 = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js"() {
    "use strict";
    retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i5 = 0; i5 < maxRetries; i5++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js
var import_url, ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, ENV_CMDS_AUTH_TOKEN, fromContainerMetadata, requestFromEcsImds, CMDS_IP, GREENGRASS_HOSTS, GREENGRASS_PROTOCOLS, getCmdsUri;
var init_fromContainerMetadata = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"() {
    "use strict";
    init_dist_es19();
    import_url = require("url");
    init_httpRequest2();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry4();
    ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(() => __async(void 0, null, function* () {
        const requestOptions = yield getCmdsUri();
        const credsResponse = JSON.parse(yield requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return fromImdsCredentials(credsResponse);
      }), maxRetries);
    };
    requestFromEcsImds = (timeout, options) => __async(void 0, null, function* () {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = __spreadProps(__spreadValues({}, options.headers), {
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        });
      }
      const buffer = yield httpRequest(__spreadProps(__spreadValues({}, options), {
        timeout
      }));
      return buffer.toString();
    });
    CMDS_IP = "169.254.170.2";
    GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    getCmdsUri = () => __async(void 0, null, function* () {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return __spreadProps(__spreadValues({}, parsed), {
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        });
      }
      throw new CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, false);
    });
  }
});

// node_modules/@smithy/node-config-provider/dist-es/fromEnv.js
var fromEnv2;
var init_fromEnv2 = __esm({
  "node_modules/@smithy/node-config-provider/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es19();
    fromEnv2 = (envVarSelector) => () => __async(void 0, null, function* () {
      try {
        const config2 = envVarSelector(process.env);
        if (config2 === void 0) {
          throw new Error();
        }
        return config2;
      } catch (e5) {
        throw new CredentialsProviderError(e5.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    });
  }
});

// node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js
var fromSharedConfigFiles;
var init_fromSharedConfigFiles = __esm({
  "node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es42();
    fromSharedConfigFiles = (configSelector, _a = {}) => {
      var _b = _a, { preferredFile = "config" } = _b, init = __objRest(_b, ["preferredFile"]);
      return () => __async(void 0, null, function* () {
        const profile = getProfileName(init);
        const { configFile, credentialsFile } = yield loadSharedConfigFiles(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? __spreadValues(__spreadValues({}, profileFromCredentials), profileFromConfig) : __spreadValues(__spreadValues({}, profileFromConfig), profileFromCredentials);
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e5) {
          throw new CredentialsProviderError(e5.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
      });
    };
  }
});

// node_modules/@smithy/node-config-provider/dist-es/fromStatic.js
var isFunction, fromStatic2;
var init_fromStatic2 = __esm({
  "node_modules/@smithy/node-config-provider/dist-es/fromStatic.js"() {
    "use strict";
    init_dist_es19();
    isFunction = (func) => typeof func === "function";
    fromStatic2 = (defaultValue) => isFunction(defaultValue) ? () => __async(void 0, null, function* () {
      return yield defaultValue();
    }) : fromStatic(defaultValue);
  }
});

// node_modules/@smithy/node-config-provider/dist-es/configLoader.js
var loadConfig;
var init_configLoader = __esm({
  "node_modules/@smithy/node-config-provider/dist-es/configLoader.js"() {
    "use strict";
    init_dist_es19();
    init_fromEnv2();
    init_fromSharedConfigFiles();
    init_fromStatic2();
    loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => memoize(chain(fromEnv2(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic2(defaultValue)));
  }
});

// node_modules/@smithy/node-config-provider/dist-es/index.js
var init_dist_es43 = __esm({
  "node_modules/@smithy/node-config-provider/dist-es/index.js"() {
    "use strict";
    init_configLoader();
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js
var Endpoint;
var init_Endpoint = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js"() {
    "use strict";
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint || (Endpoint = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js
var ENV_ENDPOINT_NAME, CONFIG_ENDPOINT_NAME, ENDPOINT_CONFIG_OPTIONS;
var init_EndpointConfigOptions = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js"() {
    "use strict";
    ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js
var EndpointMode;
var init_EndpointMode = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js"() {
    "use strict";
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode || (EndpointMode = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js
var ENV_ENDPOINT_MODE_NAME, CONFIG_ENDPOINT_MODE_NAME, ENDPOINT_MODE_CONFIG_OPTIONS;
var init_EndpointModeConfigOptions = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js"() {
    "use strict";
    init_EndpointMode();
    ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode.IPv4
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js
var getInstanceMetadataEndpoint, getFromEndpointConfig, getFromEndpointModeConfig;
var init_getInstanceMetadataEndpoint = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"() {
    "use strict";
    init_dist_es43();
    init_dist_es34();
    init_Endpoint();
    init_EndpointConfigOptions();
    init_EndpointMode();
    init_EndpointModeConfigOptions();
    getInstanceMetadataEndpoint = () => __async(void 0, null, function* () {
      return parseUrl((yield getFromEndpointConfig()) || (yield getFromEndpointModeConfig()));
    });
    getFromEndpointConfig = () => __async(void 0, null, function* () {
      return loadConfig(ENDPOINT_CONFIG_OPTIONS)();
    });
    getFromEndpointModeConfig = () => __async(void 0, null, function* () {
      const endpointMode = yield loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode.IPv4:
          return Endpoint.IPv4;
        case EndpointMode.IPv6:
          return Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js
var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS, STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS, STATIC_STABILITY_DOC_URL, getExtendedInstanceMetadataCredentials;
var init_getExtendedInstanceMetadataCredentials = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js"() {
    "use strict";
    STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    getExtendedInstanceMetadataCredentials = (credentials, logger2) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) != null ? _a : credentials.expiration;
      return __spreadProps(__spreadValues(__spreadValues({}, credentials), originalExpiration ? { originalExpiration } : {}), {
        expiration: newExpiration
      });
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js
var staticStabilityProvider;
var init_staticStabilityProvider = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"() {
    "use strict";
    init_getExtendedInstanceMetadataCredentials();
    staticStabilityProvider = (provider, options = {}) => {
      const logger2 = (options == null ? void 0 : options.logger) || console;
      let pastCredentials;
      return () => __async(void 0, null, function* () {
        let credentials;
        try {
          credentials = yield provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e5) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e5);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e5;
          }
        }
        pastCredentials = credentials;
        return credentials;
      });
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js
var IMDS_PATH, IMDS_TOKEN_PATH, fromInstanceMetadata, getInstanceImdsProvider, getMetadataToken, getProfile, getCredentialsFromProfile;
var init_fromInstanceMetadata = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"() {
    "use strict";
    init_dist_es19();
    init_httpRequest2();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry4();
    init_getInstanceMetadataEndpoint();
    init_staticStabilityProvider();
    IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    IMDS_TOKEN_PATH = "/latest/api/token";
    fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger });
    getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = (maxRetries2, options) => __async(void 0, null, function* () {
        const profile = (yield retry(() => __async(void 0, null, function* () {
          let profile2;
          try {
            profile2 = yield getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }), maxRetries2)).trim();
        return retry(() => __async(void 0, null, function* () {
          let creds;
          try {
            creds = yield getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }), maxRetries2);
      });
      return () => __async(void 0, null, function* () {
        const endpoint = yield getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
        } else {
          let token;
          try {
            token = (yield getMetadataToken(__spreadProps(__spreadValues({}, endpoint), { timeout }))).toString();
          } catch (error) {
            if ((error == null ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
          }
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), {
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          }));
        }
      });
    };
    getMetadataToken = (options) => __async(void 0, null, function* () {
      return httpRequest(__spreadProps(__spreadValues({}, options), {
        path: IMDS_TOKEN_PATH,
        method: "PUT",
        headers: {
          "x-aws-ec2-metadata-token-ttl-seconds": "21600"
        }
      }));
    });
    getProfile = (options) => __async(void 0, null, function* () {
      return (yield httpRequest(__spreadProps(__spreadValues({}, options), { path: IMDS_PATH }))).toString();
    });
    getCredentialsFromProfile = (profile, options) => __async(void 0, null, function* () {
      const credsResponse = JSON.parse((yield httpRequest(__spreadProps(__spreadValues({}, options), {
        path: IMDS_PATH + profile
      }))).toString());
      if (!isImdsCredentials(credsResponse)) {
        throw new CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return fromImdsCredentials(credsResponse);
    });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/types.js
var init_types6 = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@smithy/credential-provider-imds/dist-es/index.js
var init_dist_es44 = __esm({
  "node_modules/@smithy/credential-provider-imds/dist-es/index.js"() {
    "use strict";
    init_fromContainerMetadata();
    init_fromInstanceMetadata();
    init_RemoteProviderInit();
    init_types6();
    init_httpRequest2();
    init_getInstanceMetadataEndpoint();
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js
var resolveCredentialSource;
var init_resolveCredentialSource = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js"() {
    "use strict";
    init_dist_es41();
    init_dist_es44();
    init_dist_es19();
    resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: fromContainerMetadata,
        Ec2InstanceMetadata: fromInstanceMetadata,
        Environment: fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js
var isAssumeRoleProfile, isAssumeRoleWithSourceProfile, isAssumeRoleWithProviderProfile, resolveAssumeRoleCredentials;
var init_resolveAssumeRoleCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es42();
    init_resolveCredentialSource();
    init_resolveProfileData();
    isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    resolveAssumeRoleCredentials = (_0, _1, _2, ..._3) => __async(void 0, [_0, _1, _2, ..._3], function* (profileName, profiles, options, visitedProfiles = {}) {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${getProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, profiles, options, __spreadProps(__spreadValues({}, visitedProfiles), {
        [source_profile]: true
      })) : resolveCredentialSource(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = yield options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = yield sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js
var getValidatedProcessCredentials;
var init_getValidatedProcessCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js"() {
    "use strict";
    getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return __spreadValues(__spreadValues({
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey
      }, data.SessionToken && { sessionToken: data.SessionToken }), data.Expiration && { expiration: new Date(data.Expiration) });
    };
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js
var import_child_process, import_util4, resolveProcessCredentials;
var init_resolveProcessCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    init_dist_es19();
    import_child_process = require("child_process");
    import_util4 = require("util");
    init_getValidatedProcessCredentials();
    resolveProcessCredentials = (profileName, profiles) => __async(void 0, null, function* () {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util4.promisify)(import_child_process.exec);
          try {
            const { stdout } = yield execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (e5) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data);
          } catch (error) {
            throw new CredentialsProviderError(error.message);
          }
        } else {
          throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    });
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js
var fromProcess;
var init_fromProcess = __esm({
  "node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"() {
    "use strict";
    init_dist_es42();
    init_resolveProcessCredentials();
    fromProcess = (init = {}) => () => __async(void 0, null, function* () {
      const profiles = yield parseKnownFiles(init);
      return resolveProcessCredentials(getProfileName(init), profiles);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-es/index.js
var init_dist_es45 = __esm({
  "node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"() {
    "use strict";
    init_fromProcess();
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js
var isProcessProfile, resolveProcessCredentials2;
var init_resolveProcessCredentials2 = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    init_dist_es45();
    isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    resolveProcessCredentials2 = (options, profile) => __async(void 0, null, function* () {
      return fromProcess(__spreadProps(__spreadValues({}, options), {
        profile
      }))();
    });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js
var isSsoProfile;
var init_isSsoProfile = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js"() {
    "use strict";
    isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters3;
var init_EndpointParameters3 = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters3 = (options) => {
      var _a, _b;
      return __spreadProps(__spreadValues({}, options), {
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        defaultSigningName: "awsssoportal"
      });
    };
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var package_default3;
var init_package3 = __esm({
  "node_modules/@aws-sdk/client-sso/package.json"() {
    package_default3 = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.414.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.413.0",
        "@aws-sdk/middleware-logger": "3.413.0",
        "@aws-sdk/middleware-recursion-detection": "3.413.0",
        "@aws-sdk/middleware-user-agent": "3.413.0",
        "@aws-sdk/region-config-resolver": "3.413.0",
        "@aws-sdk/types": "3.413.0",
        "@aws-sdk/util-endpoints": "3.413.0",
        "@aws-sdk/util-user-agent-browser": "3.413.0",
        "@aws-sdk/util-user-agent-node": "3.413.0",
        "@smithy/config-resolver": "^2.0.8",
        "@smithy/fetch-http-handler": "^2.1.3",
        "@smithy/hash-node": "^2.0.7",
        "@smithy/invalid-dependency": "^2.0.7",
        "@smithy/middleware-content-length": "^2.0.9",
        "@smithy/middleware-endpoint": "^2.0.7",
        "@smithy/middleware-retry": "^2.0.10",
        "@smithy/middleware-serde": "^2.0.7",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.10",
        "@smithy/node-http-handler": "^2.1.3",
        "@smithy/protocol-http": "^3.0.3",
        "@smithy/smithy-client": "^2.1.4",
        "@smithy/types": "^2.3.1",
        "@smithy/url-parser": "^2.0.7",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.8",
        "@smithy/util-defaults-mode-node": "^2.0.10",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js
var isCrtAvailable;
var init_is_crt_available = __esm({
  "node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js"() {
    "use strict";
    isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module !== "undefined" && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e5) {
        return null;
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js
var import_os2, import_process, UA_APP_ID_ENV_NAME, UA_APP_ID_INI_NAME, defaultUserAgent;
var init_dist_es46 = __esm({
  "node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js"() {
    "use strict";
    init_dist_es43();
    import_os2 = require("os");
    import_process = require("process");
    init_is_crt_available();
    UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, import_os2.platform)()}`, (0, import_os2.release)()],
        ["lang/js"],
        ["md/nodejs", `${import_process.versions.node}`]
      ];
      const crtAvailable = isCrtAvailable();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (import_process.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = loadConfig({
        environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return () => __async(void 0, null, function* () {
        if (!resolvedUserAgent) {
          const appId = yield appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      });
    };
  }
});

// node_modules/@smithy/hash-node/dist-es/index.js
function castSourceData(toCast, encoding) {
  if (import_buffer3.Buffer.isBuffer(toCast)) {
    return toCast;
  }
  if (typeof toCast === "string") {
    return fromString(toCast, encoding);
  }
  if (ArrayBuffer.isView(toCast)) {
    return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);
  }
  return fromArrayBuffer(toCast);
}
var import_buffer3, import_crypto2, Hash;
var init_dist_es47 = __esm({
  "node_modules/@smithy/hash-node/dist-es/index.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es11();
    import_buffer3 = require("buffer");
    import_crypto2 = require("crypto");
    Hash = class {
      constructor(algorithmIdentifier, secret2) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret2;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(toUint8Array(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto2.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto2.createHash)(this.algorithmIdentifier);
      }
    };
  }
});

// node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js
var import_fs3, calculateBodyLength;
var init_calculateBodyLength = __esm({
  "node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js"() {
    "use strict";
    import_fs3 = require("fs");
    calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs3.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs3.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
  }
});

// node_modules/@smithy/util-body-length-node/dist-es/index.js
var init_dist_es48 = __esm({
  "node_modules/@smithy/util-body-length-node/dist-es/index.js"() {
    "use strict";
    init_calculateBodyLength();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js
var q, r, s, t, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, _data, ruleSet;
var init_ruleset = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js"() {
    "use strict";
    q = "required";
    r = "fn";
    s = "argv";
    t = "ref";
    a = "isSet";
    b = "tree";
    c = "error";
    d = "endpoint";
    e = "PartitionResult";
    f = { [q]: false, "type": "String" };
    g = { [q]: true, "default": false, "type": "Boolean" };
    h = { [t]: "Endpoint" };
    i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    k = {};
    l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    n = [i];
    o = [j];
    p = [{ [t]: "Region" }];
    _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }, { conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] };
    ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver;
var init_endpointResolver = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es27();
    init_ruleset();
    defaultEndpointResolver = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js
var getRuntimeConfig;
var init_runtimeConfig_shared = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es16();
    init_dist_es34();
    init_dist_es10();
    init_dist_es11();
    init_endpointResolver();
    getRuntimeConfig = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      return {
        apiVersion: "2019-06-10",
        base64Decoder: (_a = config2 == null ? void 0 : config2.base64Decoder) != null ? _a : fromBase64,
        base64Encoder: (_b = config2 == null ? void 0 : config2.base64Encoder) != null ? _b : toBase64,
        disableHostPrefix: (_c = config2 == null ? void 0 : config2.disableHostPrefix) != null ? _c : false,
        endpointProvider: (_d = config2 == null ? void 0 : config2.endpointProvider) != null ? _d : defaultEndpointResolver,
        extensions: (_e = config2 == null ? void 0 : config2.extensions) != null ? _e : [],
        logger: (_f = config2 == null ? void 0 : config2.logger) != null ? _f : new NoOpLogger(),
        serviceId: (_g = config2 == null ? void 0 : config2.serviceId) != null ? _g : "SSO",
        urlParser: (_h = config2 == null ? void 0 : config2.urlParser) != null ? _h : parseUrl,
        utf8Decoder: (_i = config2 == null ? void 0 : config2.utf8Decoder) != null ? _i : fromUtf8,
        utf8Encoder: (_j = config2 == null ? void 0 : config2.utf8Encoder) != null ? _j : toUtf8
      };
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js
var AWS_EXECUTION_ENV, AWS_REGION_ENV, AWS_DEFAULT_REGION_ENV, ENV_IMDS_DISABLED, DEFAULTS_MODE_OPTIONS, IMDS_REGION_PATH;
var init_constants7 = __esm({
  "node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js"() {
    "use strict";
    AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    AWS_REGION_ENV = "AWS_REGION";
    AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js
var AWS_DEFAULTS_MODE_ENV, AWS_DEFAULTS_MODE_CONFIG, NODE_DEFAULTS_MODE_CONFIG_OPTIONS;
var init_defaultsModeConfig = __esm({
  "node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js"() {
    "use strict";
    AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        return env2[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js
var resolveDefaultsModeConfig, resolveNodeDefaultsModeAuto, inferPhysicalRegion;
var init_resolveDefaultsModeConfig = __esm({
  "node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js"() {
    "use strict";
    init_dist_es30();
    init_dist_es44();
    init_dist_es43();
    init_dist_es19();
    init_constants7();
    init_defaultsModeConfig();
    resolveDefaultsModeConfig = ({ region = loadConfig(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => memoize(() => __async(void 0, null, function* () {
      const mode = typeof defaultsMode === "function" ? yield defaultsMode() : defaultsMode;
      switch (mode == null ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    }));
    resolveNodeDefaultsModeAuto = (clientRegion) => __async(void 0, null, function* () {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? yield clientRegion() : clientRegion;
        const inferredRegion = yield inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    });
    inferPhysicalRegion = () => __async(void 0, null, function* () {
      var _a;
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[AWS_REGION_ENV]) != null ? _a : process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const endpoint = yield getInstanceMetadataEndpoint();
          return (yield httpRequest(__spreadProps(__spreadValues({}, endpoint), { path: IMDS_REGION_PATH }))).toString();
        } catch (e5) {
        }
      }
    });
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-es/index.js
var init_dist_es49 = __esm({
  "node_modules/@smithy/util-defaults-mode-node/dist-es/index.js"() {
    "use strict";
    init_resolveDefaultsModeConfig();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js
var getRuntimeConfig2;
var init_runtimeConfig = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package3();
    init_dist_es46();
    init_dist_es30();
    init_dist_es47();
    init_dist_es39();
    init_dist_es43();
    init_dist_es14();
    init_dist_es48();
    init_dist_es38();
    init_runtimeConfig_shared();
    init_dist_es16();
    init_dist_es49();
    init_dist_es16();
    getRuntimeConfig2 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config2);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config2), {
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config2 == null ? void 0 : config2.bodyLengthChecker) != null ? _a : calculateBodyLength,
        defaultUserAgentProvider: (_b = config2 == null ? void 0 : config2.defaultUserAgentProvider) != null ? _b : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default3.version }),
        maxAttempts: (_c = config2 == null ? void 0 : config2.maxAttempts) != null ? _c : loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_d = config2 == null ? void 0 : config2.region) != null ? _d : loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_e = config2 == null ? void 0 : config2.requestHandler) != null ? _e : new NodeHttpHandler(defaultConfigProvider),
        retryMode: (_f = config2 == null ? void 0 : config2.retryMode) != null ? _f : loadConfig(__spreadProps(__spreadValues({}, NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: () => __async(void 0, null, function* () {
            return (yield defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE;
          })
        })),
        sha256: (_g = config2 == null ? void 0 : config2.sha256) != null ? _g : Hash.bind(null, "sha256"),
        streamCollector: (_h = config2 == null ? void 0 : config2.streamCollector) != null ? _h : streamCollector,
        useDualstackEndpoint: (_i = config2 == null ? void 0 : config2.useDualstackEndpoint) != null ? _i : loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_j = config2 == null ? void 0 : config2.useFipsEndpoint) != null ? _j : loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      });
    };
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
var getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration;
var init_extensions5 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js"() {
    "use strict";
    getAwsRegionExtensionConfiguration = (runtimeConfig) => {
      let runtimeConfigRegion = () => __async(void 0, null, function* () {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      });
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    };
    resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    };
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js
var init_config4 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js
var init_isFipsRegion2 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js
var init_getRealRegion2 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    "use strict";
    init_isFipsRegion2();
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var init_resolveRegionConfig2 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    "use strict";
    init_getRealRegion2();
    init_isFipsRegion2();
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js
var init_regionConfig2 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js"() {
    "use strict";
    init_config4();
    init_resolveRegionConfig2();
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-es/index.js
var init_dist_es50 = __esm({
  "node_modules/@aws-sdk/region-config-resolver/dist-es/index.js"() {
    "use strict";
    init_extensions5();
    init_regionConfig2();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js
var asPartial, resolveRuntimeExtensions;
var init_runtimeExtensions = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es50();
    init_dist_es2();
    init_dist_es16();
    asPartial = (t4) => t4;
    resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = __spreadValues(__spreadValues(__spreadValues({}, asPartial(getAwsRegionExtensionConfiguration(runtimeConfig))), asPartial(getDefaultExtensionConfiguration(runtimeConfig))), asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, runtimeConfig), resolveAwsRegionExtensionConfiguration(extensionConfiguration)), resolveDefaultRuntimeConfig(extensionConfiguration)), resolveHttpHandlerRuntimeConfig(extensionConfiguration));
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js
var SSOClient;
var init_SSOClient = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es5();
    init_dist_es6();
    init_dist_es28();
    init_dist_es30();
    init_dist_es32();
    init_dist_es36();
    init_dist_es39();
    init_dist_es16();
    init_EndpointParameters3();
    init_runtimeConfig();
    init_runtimeExtensions();
    SSOClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters3(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        const _config_7 = resolveRuntimeExtensions(_config_6, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js
var SSOServiceException;
var init_SSOServiceException = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js"() {
    "use strict";
    init_dist_es16();
    SSOServiceException = class _SSOServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js
var InvalidRequestException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, GetRoleCredentialsRequestFilterSensitiveLog, RoleCredentialsFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog, ListAccountRolesRequestFilterSensitiveLog, ListAccountsRequestFilterSensitiveLog, LogoutRequestFilterSensitiveLog;
var init_models_02 = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es16();
    init_SSOServiceException();
    InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRequestException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TooManyRequestsException",
          $fault: "client"
        }, opts));
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    UnauthorizedException = class _UnauthorizedException extends SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnauthorizedException",
          $fault: "client"
        }, opts));
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    GetRoleCredentialsRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: SENSITIVE_STRING });
    RoleCredentialsFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.secretAccessKey && { secretAccessKey: SENSITIVE_STRING }), obj.sessionToken && { sessionToken: SENSITIVE_STRING });
    GetRoleCredentialsResponseFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) });
    ListAccountRolesRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: SENSITIVE_STRING });
    ListAccountsRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: SENSITIVE_STRING });
    LogoutRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: SENSITIVE_STRING });
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js
var se_GetRoleCredentialsCommand, se_ListAccountRolesCommand, se_ListAccountsCommand, se_LogoutCommand, de_GetRoleCredentialsCommand, de_GetRoleCredentialsCommandError, de_ListAccountRolesCommand, de_ListAccountRolesCommandError, de_ListAccountsCommand, de_ListAccountsCommandError, de_LogoutCommand, de_LogoutCommandError, throwDefaultError3, de_InvalidRequestExceptionRes, de_ResourceNotFoundExceptionRes, de_TooManyRequestsExceptionRes, de_UnauthorizedExceptionRes, deserializeMetadata3, collectBodyString3, isSerializableHeaderValue, parseBody2, parseErrorBody2, loadRestJsonErrorCode;
var init_Aws_restJson1 = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es16();
    init_models_02();
    init_SSOServiceException();
    se_GetRoleCredentialsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, expectNonNull(input.roleName, `roleName`)],
        account_id: [, expectNonNull(input.accountId, `accountId`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListAccountRolesCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, expectNonNull(input.accountId, `accountId`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListAccountsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_LogoutCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        body
      });
    });
    de_GetRoleCredentialsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(yield parseBody2(output.body, context)), "body");
      const doc = take(data, {
        roleCredentials: _json
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_GetRoleCredentialsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody2(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw yield de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw yield de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw yield de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_ListAccountRolesCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(yield parseBody2(output.body, context)), "body");
      const doc = take(data, {
        nextToken: expectString,
        roleList: _json
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_ListAccountRolesCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody2(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw yield de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw yield de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw yield de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_ListAccountsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(yield parseBody2(output.body, context)), "body");
      const doc = take(data, {
        accountList: _json,
        nextToken: expectString
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_ListAccountsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody2(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw yield de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw yield de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw yield de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_LogoutCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata3(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_LogoutCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody2(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw yield de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw yield de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    throwDefaultError3 = withBaseException(SSOServiceException);
    de_InvalidRequestExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException(__spreadValues({
        $metadata: deserializeMetadata3(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_ResourceNotFoundExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException(__spreadValues({
        $metadata: deserializeMetadata3(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_TooManyRequestsExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException(__spreadValues({
        $metadata: deserializeMetadata3(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_UnauthorizedExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException(__spreadValues({
        $metadata: deserializeMetadata3(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    deserializeMetadata3 = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    collectBodyString3 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    parseBody2 = (streamBody, context) => collectBodyString3(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    parseErrorBody2 = (errorBody, context) => __async(void 0, null, function* () {
      var _a;
      const value = yield parseBody2(errorBody, context);
      value.message = (_a = value.message) != null ? _a : value.Message;
      return value;
    });
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k5) => k5.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js
var GetRoleCredentialsCommand;
var init_GetRoleCredentialsCommand = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_02();
    init_Aws_restJson1();
    GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetRoleCredentialsCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetRoleCredentialsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountRolesCommand.js
var ListAccountRolesCommand;
var init_ListAccountRolesCommand = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountRolesCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_02();
    init_Aws_restJson1();
    ListAccountRolesCommand = class _ListAccountRolesCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListAccountRolesCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListAccountRolesCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountsCommand.js
var ListAccountsCommand;
var init_ListAccountsCommand = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_02();
    init_Aws_restJson1();
    ListAccountsCommand = class _ListAccountsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListAccountsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListAccountsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/commands/LogoutCommand.js
var LogoutCommand;
var init_LogoutCommand = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/commands/LogoutCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_02();
    init_Aws_restJson1();
    LogoutCommand = class _LogoutCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_LogoutCommand(input, context);
      }
      deserialize(output, context) {
        return de_LogoutCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/SSO.js
var commands, SSO;
var init_SSO = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/SSO.js"() {
    "use strict";
    init_dist_es16();
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
    init_SSOClient();
    commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    SSO = class extends SSOClient {
    };
    createAggregatedClient(commands, SSO);
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/commands/index.js
var init_commands = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/commands/index.js"() {
    "use strict";
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/pagination/Interfaces.js
var init_Interfaces = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/pagination/Interfaces.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js
var init_ListAccountRolesPaginator = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountsPaginator.js
var init_ListAccountsPaginator = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountsPaginator.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/pagination/index.js
var init_pagination3 = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/pagination/index.js"() {
    "use strict";
    init_Interfaces();
    init_ListAccountRolesPaginator();
    init_ListAccountsPaginator();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/models/index.js
var init_models = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/models/index.js"() {
    "use strict";
    init_models_02();
  }
});

// node_modules/@aws-sdk/client-sso/dist-es/index.js
var init_dist_es51 = __esm({
  "node_modules/@aws-sdk/client-sso/dist-es/index.js"() {
    "use strict";
    init_SSOClient();
    init_SSO();
    init_commands();
    init_pagination3();
    init_models();
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/bundle/client-sso-oidc-node.js
var resolveClientEndpointParameters4, package_default4, p2, q2, r2, s2, a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, _data2, ruleSet2, defaultEndpointResolver2, getRuntimeConfig3, getRuntimeConfig22, SSOOIDCClient, SSOOIDCServiceException, AccessDeniedException, AuthorizationPendingException, ExpiredTokenException2, InternalServerException, InvalidClientException, InvalidGrantException, InvalidRequestException2, InvalidScopeException, SlowDownException, UnauthorizedClientException, UnsupportedGrantTypeException, InvalidClientMetadataException, se_CreateTokenCommand, se_RegisterClientCommand, se_StartDeviceAuthorizationCommand, de_CreateTokenCommand, de_CreateTokenCommandError, de_RegisterClientCommand, de_RegisterClientCommandError, de_StartDeviceAuthorizationCommand, de_StartDeviceAuthorizationCommandError, throwDefaultError4, de_AccessDeniedExceptionRes, de_AuthorizationPendingExceptionRes, de_ExpiredTokenExceptionRes2, de_InternalServerExceptionRes, de_InvalidClientExceptionRes, de_InvalidClientMetadataExceptionRes, de_InvalidGrantExceptionRes, de_InvalidRequestExceptionRes2, de_InvalidScopeExceptionRes, de_SlowDownExceptionRes, de_UnauthorizedClientExceptionRes, de_UnsupportedGrantTypeExceptionRes, deserializeMetadata4, collectBodyString4, parseBody3, parseErrorBody3, loadRestJsonErrorCode2, CreateTokenCommand, RegisterClientCommand, StartDeviceAuthorizationCommand, commands2, SSOOIDC;
var init_client_sso_oidc_node = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/bundle/client-sso-oidc-node.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es5();
    init_dist_es6();
    init_dist_es28();
    init_dist_es30();
    init_dist_es32();
    init_dist_es36();
    init_dist_es39();
    init_dist_es16();
    init_dist_es46();
    init_dist_es30();
    init_dist_es47();
    init_dist_es39();
    init_dist_es43();
    init_dist_es14();
    init_dist_es48();
    init_dist_es38();
    init_dist_es16();
    init_dist_es34();
    init_dist_es10();
    init_dist_es11();
    init_dist_es27();
    init_dist_es16();
    init_dist_es49();
    init_dist_es16();
    init_dist_es16();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_dist_es2();
    init_dist_es16();
    init_dist_es16();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    resolveClientEndpointParameters4 = (options) => {
      var _a, _b;
      return __spreadProps(__spreadValues({}, options), {
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        defaultSigningName: "awsssooidc"
      });
    };
    package_default4 = { version: "3.387.0" };
    p2 = "required";
    q2 = "fn";
    r2 = "argv";
    s2 = "ref";
    a2 = "PartitionResult";
    b2 = "tree";
    c2 = "error";
    d2 = "endpoint";
    e2 = { [p2]: false, "type": "String" };
    f2 = { [p2]: true, "default": false, "type": "Boolean" };
    g2 = { [s2]: "Endpoint" };
    h2 = { [q2]: "booleanEquals", [r2]: [{ [s2]: "UseFIPS" }, true] };
    i2 = { [q2]: "booleanEquals", [r2]: [{ [s2]: "UseDualStack" }, true] };
    j2 = {};
    k2 = { [q2]: "booleanEquals", [r2]: [true, { [q2]: "getAttr", [r2]: [{ [s2]: a2 }, "supportsFIPS"] }] };
    l2 = { [q2]: "booleanEquals", [r2]: [true, { [q2]: "getAttr", [r2]: [{ [s2]: a2 }, "supportsDualStack"] }] };
    m2 = [g2];
    n2 = [h2];
    o2 = [i2];
    _data2 = { version: "1.0", parameters: { Region: e2, UseDualStack: f2, UseFIPS: f2, Endpoint: e2 }, rules: [{ conditions: [{ [q2]: "aws.partition", [r2]: [{ [s2]: "Region" }], assign: a2 }], type: b2, rules: [{ conditions: [{ [q2]: "isSet", [r2]: m2 }, { [q2]: "parseURL", [r2]: m2, assign: "url" }], type: b2, rules: [{ conditions: n2, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c2 }, { type: b2, rules: [{ conditions: o2, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c2 }, { endpoint: { url: g2, properties: j2, headers: j2 }, type: d2 }] }] }, { conditions: [h2, i2], type: b2, rules: [{ conditions: [k2, l2], type: b2, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j2, headers: j2 }, type: d2 }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c2 }] }, { conditions: n2, type: b2, rules: [{ conditions: [k2], type: b2, rules: [{ type: b2, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j2, headers: j2 }, type: d2 }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c2 }] }, { conditions: o2, type: b2, rules: [{ conditions: [l2], type: b2, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j2, headers: j2 }, type: d2 }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c2 }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j2, headers: j2 }, type: d2 }] }] };
    ruleSet2 = _data2;
    defaultEndpointResolver2 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet2, {
        endpointParams,
        logger: context.logger
      });
    };
    getRuntimeConfig3 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i;
      return {
        apiVersion: "2019-06-10",
        base64Decoder: (_a = config2 == null ? void 0 : config2.base64Decoder) != null ? _a : fromBase64,
        base64Encoder: (_b = config2 == null ? void 0 : config2.base64Encoder) != null ? _b : toBase64,
        disableHostPrefix: (_c = config2 == null ? void 0 : config2.disableHostPrefix) != null ? _c : false,
        endpointProvider: (_d = config2 == null ? void 0 : config2.endpointProvider) != null ? _d : defaultEndpointResolver2,
        logger: (_e = config2 == null ? void 0 : config2.logger) != null ? _e : new NoOpLogger(),
        serviceId: (_f = config2 == null ? void 0 : config2.serviceId) != null ? _f : "SSO OIDC",
        urlParser: (_g = config2 == null ? void 0 : config2.urlParser) != null ? _g : parseUrl,
        utf8Decoder: (_h = config2 == null ? void 0 : config2.utf8Decoder) != null ? _h : fromUtf8,
        utf8Encoder: (_i = config2 == null ? void 0 : config2.utf8Encoder) != null ? _i : toUtf8
      };
    };
    getRuntimeConfig22 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig3(config2);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config2), {
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config2 == null ? void 0 : config2.bodyLengthChecker) != null ? _a : calculateBodyLength,
        defaultUserAgentProvider: (_b = config2 == null ? void 0 : config2.defaultUserAgentProvider) != null ? _b : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default4.version }),
        maxAttempts: (_c = config2 == null ? void 0 : config2.maxAttempts) != null ? _c : loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_d = config2 == null ? void 0 : config2.region) != null ? _d : loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_e = config2 == null ? void 0 : config2.requestHandler) != null ? _e : new NodeHttpHandler(defaultConfigProvider),
        retryMode: (_f = config2 == null ? void 0 : config2.retryMode) != null ? _f : loadConfig(__spreadProps(__spreadValues({}, NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: () => __async(void 0, null, function* () {
            return (yield defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE;
          })
        })),
        sha256: (_g = config2 == null ? void 0 : config2.sha256) != null ? _g : Hash.bind(null, "sha256"),
        streamCollector: (_h = config2 == null ? void 0 : config2.streamCollector) != null ? _h : streamCollector,
        useDualstackEndpoint: (_i = config2 == null ? void 0 : config2.useDualstackEndpoint) != null ? _i : loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_j = config2 == null ? void 0 : config2.useFipsEndpoint) != null ? _j : loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      });
    };
    SSOOIDCClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig22(configuration || {});
        const _config_1 = resolveClientEndpointParameters4(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    SSOOIDCServiceException = class _SSOOIDCServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AccessDeniedException",
          $fault: "client"
        }, opts));
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "AuthorizationPendingException",
          $fault: "client"
        }, opts));
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    ExpiredTokenException2 = class _ExpiredTokenException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExpiredTokenException",
          $fault: "client"
        }, opts));
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InternalServerException",
          $fault: "server"
        }, opts));
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidClientException",
          $fault: "client"
        }, opts));
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidGrantException",
          $fault: "client"
        }, opts));
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRequestException2 = class _InvalidRequestException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRequestException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidScopeException",
          $fault: "client"
        }, opts));
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "SlowDownException",
          $fault: "client"
        }, opts));
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnauthorizedClientException",
          $fault: "client"
        }, opts));
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnsupportedGrantTypeException",
          $fault: "client"
        }, opts));
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidClientMetadataException",
          $fault: "client"
        }, opts));
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    se_CreateTokenCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify(take(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_) => _json(_)
      }));
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_RegisterClientCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify(take(input, {
        clientName: [],
        clientType: [],
        scopes: (_) => _json(_)
      }));
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_StartDeviceAuthorizationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify(take(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        body
      });
    });
    de_CreateTokenCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata4(output)
      });
      const data = expectNonNull(expectObject(yield parseBody3(output.body, context)), "body");
      const doc = take(data, {
        accessToken: expectString,
        expiresIn: expectInt32,
        idToken: expectString,
        refreshToken: expectString,
        tokenType: expectString
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_CreateTokenCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody3(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw yield de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw yield de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw yield de_ExpiredTokenExceptionRes2(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw yield de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw yield de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw yield de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw yield de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw yield de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw yield de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw yield de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError4({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_RegisterClientCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata4(output)
      });
      const data = expectNonNull(expectObject(yield parseBody3(output.body, context)), "body");
      const doc = take(data, {
        authorizationEndpoint: expectString,
        clientId: expectString,
        clientIdIssuedAt: expectLong,
        clientSecret: expectString,
        clientSecretExpiresAt: expectLong,
        tokenEndpoint: expectString
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_RegisterClientCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody3(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw yield de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw yield de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw yield de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError4({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_StartDeviceAuthorizationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata4(output)
      });
      const data = expectNonNull(expectObject(yield parseBody3(output.body, context)), "body");
      const doc = take(data, {
        deviceCode: expectString,
        expiresIn: expectInt32,
        interval: expectInt32,
        userCode: expectString,
        verificationUri: expectString,
        verificationUriComplete: expectString
      });
      Object.assign(contents, doc);
      return contents;
    });
    de_StartDeviceAuthorizationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody3(output.body, context)
      });
      const errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw yield de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw yield de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw yield de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw yield de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw yield de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError4({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    throwDefaultError4 = withBaseException(SSOOIDCServiceException);
    de_AccessDeniedExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_AuthorizationPendingExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_ExpiredTokenExceptionRes2 = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException2(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InternalServerExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidClientExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidClientMetadataExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidGrantExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidRequestExceptionRes2 = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException2(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidScopeExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_SlowDownExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_UnauthorizedClientExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_UnsupportedGrantTypeExceptionRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException(__spreadValues({
        $metadata: deserializeMetadata4(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    deserializeMetadata4 = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    collectBodyString4 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    parseBody3 = (streamBody, context) => collectBodyString4(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    parseErrorBody3 = (errorBody, context) => __async(void 0, null, function* () {
      var _a;
      const value = yield parseBody3(errorBody, context);
      value.message = (_a = value.message) != null ? _a : value.Message;
      return value;
    });
    loadRestJsonErrorCode2 = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k22) => k22.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
    CreateTokenCommand = class _CreateTokenCommand extends Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateTokenCommand(output, context);
      }
    };
    RegisterClientCommand = class _RegisterClientCommand extends Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_RegisterClientCommand(input, context);
      }
      deserialize(output, context) {
        return de_RegisterClientCommand(output, context);
      }
    };
    StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_StartDeviceAuthorizationCommand(input, context);
      }
      deserialize(output, context) {
        return de_StartDeviceAuthorizationCommand(output, context);
      }
    };
    commands2 = {
      CreateTokenCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    SSOOIDC = class extends SSOOIDCClient {
    };
    createAggregatedClient(commands2, SSOOIDC);
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/constants.js
var EXPIRE_WINDOW_MS, REFRESH_MESSAGE;
var init_constants8 = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/constants.js"() {
    "use strict";
    EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js
var ssoOidcClientsHash, getSsoOidcClient;
var init_getSsoOidcClient = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js"() {
    "use strict";
    init_client_sso_oidc_node();
    ssoOidcClientsHash = {};
    getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js
var getNewSsoOidcToken;
var init_getNewSsoOidcToken = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js"() {
    "use strict";
    init_client_sso_oidc_node();
    init_getSsoOidcClient();
    getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = getSsoOidcClient(ssoRegion);
      return ssoOidcClient.send(new CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js
var validateTokenExpiry;
var init_validateTokenExpiry = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js"() {
    "use strict";
    init_dist_es19();
    init_constants8();
    validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js
var validateTokenKey;
var init_validateTokenKey = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js"() {
    "use strict";
    init_dist_es19();
    init_constants8();
    validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js
var import_fs4, writeFile, writeSSOTokenToFile;
var init_writeSSOTokenToFile = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js"() {
    "use strict";
    init_dist_es42();
    import_fs4 = require("fs");
    ({ writeFile } = import_fs4.promises);
    writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = getSSOTokenFilepath(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/fromSso.js
var lastRefreshAttemptTime, fromSso;
var init_fromSso = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/fromSso.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es42();
    init_constants8();
    init_getNewSsoOidcToken();
    init_validateTokenExpiry();
    init_validateTokenKey();
    init_writeSSOTokenToFile();
    lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    fromSso = (init = {}) => () => __async(void 0, null, function* () {
      const profiles = yield parseKnownFiles(init);
      const profileName = getProfileName(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = yield loadSsoSessionData(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = yield getSSOTokenFromFile(ssoSessionName);
      } catch (e5) {
        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = yield getNewSsoOidcToken(ssoToken, ssoRegion);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          yield writeSSOTokenToFile(ssoSessionName, __spreadProps(__spreadValues({}, ssoToken), {
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          }));
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    });
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js
var init_fromStatic3 = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js"() {
    "use strict";
    init_dist_es19();
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js
var init_nodeProvider = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js"() {
    "use strict";
    init_dist_es19();
  }
});

// node_modules/@aws-sdk/token-providers/dist-es/index.js
var init_dist_es52 = __esm({
  "node_modules/@aws-sdk/token-providers/dist-es/index.js"() {
    "use strict";
    init_client_sso_oidc_node();
    init_fromSso();
    init_fromStatic3();
    init_nodeProvider();
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js
var SHOULD_FAIL_CREDENTIAL_CHAIN, resolveSSOCredentials;
var init_resolveSSOCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js"() {
    "use strict";
    init_dist_es51();
    init_dist_es52();
    init_dist_es19();
    init_dist_es42();
    SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    resolveSSOCredentials = (_0) => __async(void 0, [_0], function* ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = yield fromSso({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e5) {
          throw new CredentialsProviderError(e5.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = yield getSSOTokenFromFile(ssoStartUrl);
        } catch (e5) {
          throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = yield sso.send(new GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e5) {
        throw CredentialsProviderError.from(e5, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js
var validateSsoProfile;
var init_validateSsoProfile = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js"() {
    "use strict";
    init_dist_es19();
    validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js
var fromSSO;
var init_fromSSO = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es42();
    init_isSsoProfile();
    init_resolveSSOCredentials();
    init_validateSsoProfile();
    fromSSO = (init = {}) => () => __async(void 0, null, function* () {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = getProfileName(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = yield parseKnownFiles(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!isSsoProfile(profile)) {
          throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile == null ? void 0 : profile.sso_session) {
          const ssoSessions = yield loadSsoSessionData(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js
var init_types7 = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js
var init_dist_es53 = __esm({
  "node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"() {
    "use strict";
    init_fromSSO();
    init_isSsoProfile();
    init_types7();
    init_validateSsoProfile();
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js
var resolveSsoCredentials;
var init_resolveSsoCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js"() {
    "use strict";
    init_dist_es53();
    init_dist_es53();
    resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = validateSsoProfile(data);
      return fromSSO({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js
var isStaticCredsProfile, resolveStaticCredentials;
var init_resolveStaticCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js"() {
    "use strict";
    isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js
var fromWebToken;
var init_fromWebToken = __esm({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js"() {
    "use strict";
    init_dist_es19();
    fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName != null ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js
var import_fs5, ENV_TOKEN_FILE, ENV_ROLE_ARN, ENV_ROLE_SESSION_NAME, fromTokenFile;
var init_fromTokenFile = __esm({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"() {
    "use strict";
    init_dist_es19();
    import_fs5 = require("fs");
    init_fromWebToken();
    ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    ENV_ROLE_ARN = "AWS_ROLE_ARN";
    ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    fromTokenFile = (init = {}) => () => __async(void 0, null, function* () {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init == null ? void 0 : init.webIdentityTokenFile) != null ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init == null ? void 0 : init.roleArn) != null ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init == null ? void 0 : init.roleSessionName) != null ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new CredentialsProviderError("Web identity configuration not specified");
      }
      return fromWebToken(__spreadProps(__spreadValues({}, init), {
        webIdentityToken: (0, import_fs5.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      }))();
    });
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js
var init_dist_es54 = __esm({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"() {
    "use strict";
    init_fromTokenFile();
    init_fromWebToken();
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js
var isWebIdentityProfile, resolveWebIdentityCredentials;
var init_resolveWebIdentityCredentials = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"() {
    "use strict";
    init_dist_es54();
    isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    resolveWebIdentityCredentials = (profile, options) => __async(void 0, null, function* () {
      return fromTokenFile({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
      })();
    });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js
var resolveProfileData;
var init_resolveProfileData = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"() {
    "use strict";
    init_dist_es19();
    init_resolveAssumeRoleCredentials();
    init_resolveProcessCredentials2();
    init_resolveSsoCredentials();
    init_resolveStaticCredentials();
    init_resolveWebIdentityCredentials();
    resolveProfileData = (_0, _1, _2, ..._3) => __async(void 0, [_0, _1, _2, ..._3], function* (profileName, profiles, options, visitedProfiles = {}) {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data);
      }
      if (isAssumeRoleProfile(data)) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials2(options, profileName);
      }
      if (isSsoProfile(data)) {
        return resolveSsoCredentials(data);
      }
      throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js
var fromIni;
var init_fromIni = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"() {
    "use strict";
    init_dist_es42();
    init_resolveProfileData();
    fromIni = (init = {}) => () => __async(void 0, null, function* () {
      const profiles = yield parseKnownFiles(init);
      return resolveProfileData(getProfileName(init), profiles, init);
    });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js
var init_dist_es55 = __esm({
  "node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"() {
    "use strict";
    init_fromIni();
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js
var ENV_IMDS_DISABLED2, remoteProvider;
var init_remoteProvider = __esm({
  "node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js"() {
    "use strict";
    init_dist_es44();
    init_dist_es19();
    ENV_IMDS_DISABLED2 = "AWS_EC2_METADATA_DISABLED";
    remoteProvider = (init) => {
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        return fromContainerMetadata(init);
      }
      if (process.env[ENV_IMDS_DISABLED2]) {
        return () => __async(void 0, null, function* () {
          throw new CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        });
      }
      return fromInstanceMetadata(init);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js
var defaultProvider;
var init_defaultProvider = __esm({
  "node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js"() {
    "use strict";
    init_dist_es41();
    init_dist_es55();
    init_dist_es45();
    init_dist_es53();
    init_dist_es54();
    init_dist_es19();
    init_dist_es42();
    init_remoteProvider();
    defaultProvider = (init = {}) => memoize(chain(...init.profile || process.env[ENV_PROFILE] ? [] : [fromEnv()], fromSSO(init), fromIni(init), fromProcess(init), fromTokenFile(init), remoteProvider(init), () => __async(void 0, null, function* () {
      throw new CredentialsProviderError("Could not load credentials from any providers", false);
    })), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-es/index.js
var init_dist_es56 = __esm({
  "node_modules/@aws-sdk/credential-provider-node/dist-es/index.js"() {
    "use strict";
    init_defaultProvider();
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js
var F, G, H, I, J, a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t2, u, v, w, x, y, z, A, B, C, D, E, _data3, ruleSet3;
var init_ruleset2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js"() {
    "use strict";
    F = "required";
    G = "type";
    H = "fn";
    I = "argv";
    J = "ref";
    a3 = false;
    b3 = true;
    c3 = "booleanEquals";
    d3 = "tree";
    e3 = "stringEquals";
    f3 = "sigv4";
    g3 = "sts";
    h3 = "us-east-1";
    i3 = "endpoint";
    j3 = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    k3 = "error";
    l3 = "getAttr";
    m3 = { [F]: false, [G]: "String" };
    n3 = { [F]: true, "default": false, [G]: "Boolean" };
    o3 = { [J]: "Endpoint" };
    p3 = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    q3 = { [J]: "Region" };
    r3 = { [H]: "aws.partition", [I]: [q3], "assign": "PartitionResult" };
    s3 = { [J]: "UseFIPS" };
    t2 = { [J]: "UseDualStack" };
    u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f3, "signingName": g3, "signingRegion": h3 }] }, "headers": {} };
    v = {};
    w = { "conditions": [{ [H]: e3, [I]: [q3, "aws-global"] }], [i3]: u, [G]: i3 };
    x = { [H]: c3, [I]: [s3, true] };
    y = { [H]: c3, [I]: [t2, true] };
    z = { [H]: c3, [I]: [true, { [H]: l3, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
    A = { [J]: "PartitionResult" };
    B = { [H]: c3, [I]: [true, { [H]: l3, [I]: [A, "supportsDualStack"] }] };
    C = [{ [H]: "isSet", [I]: [o3] }];
    D = [x];
    E = [y];
    _data3 = { version: "1.0", parameters: { Region: m3, UseDualStack: n3, UseFIPS: n3, Endpoint: m3, UseGlobalEndpoint: n3 }, rules: [{ conditions: [{ [H]: c3, [I]: [{ [J]: "UseGlobalEndpoint" }, b3] }, { [H]: "not", [I]: C }, p3, r3, { [H]: c3, [I]: [s3, a3] }, { [H]: c3, [I]: [t2, a3] }], [G]: d3, rules: [{ conditions: [{ [H]: e3, [I]: [q3, "ap-northeast-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "ap-south-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "ap-southeast-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "ap-southeast-2"] }], endpoint: u, [G]: i3 }, w, { conditions: [{ [H]: e3, [I]: [q3, "ca-central-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "eu-central-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "eu-north-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "eu-west-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "eu-west-2"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "eu-west-3"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "sa-east-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, h3] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "us-east-2"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "us-west-1"] }], endpoint: u, [G]: i3 }, { conditions: [{ [H]: e3, [I]: [q3, "us-west-2"] }], endpoint: u, [G]: i3 }, { endpoint: { url: j3, properties: { authSchemes: [{ name: f3, signingName: g3, signingRegion: "{Region}" }] }, headers: v }, [G]: i3 }] }, { conditions: C, [G]: d3, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k3 }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k3 }, { endpoint: { url: o3, properties: v, headers: v }, [G]: i3 }] }, { conditions: [p3], [G]: d3, rules: [{ conditions: [r3], [G]: d3, rules: [{ conditions: [x, y], [G]: d3, rules: [{ conditions: [z, B], [G]: d3, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i3 }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k3 }] }, { conditions: D, [G]: d3, rules: [{ conditions: [z], [G]: d3, rules: [{ conditions: [{ [H]: e3, [I]: ["aws-us-gov", { [H]: l3, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i3 }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i3 }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k3 }] }, { conditions: E, [G]: d3, rules: [{ conditions: [B], [G]: d3, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i3 }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k3 }] }, w, { endpoint: { url: j3, properties: v, headers: v }, [G]: i3 }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k3 }] };
    ruleSet3 = _data3;
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver3;
var init_endpointResolver2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es27();
    init_ruleset2();
    defaultEndpointResolver3 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet3, {
        endpointParams,
        logger: context.logger
      });
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js
var getRuntimeConfig4;
var init_runtimeConfig_shared2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es16();
    init_dist_es34();
    init_dist_es10();
    init_dist_es11();
    init_endpointResolver2();
    getRuntimeConfig4 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      return {
        apiVersion: "2011-06-15",
        base64Decoder: (_a = config2 == null ? void 0 : config2.base64Decoder) != null ? _a : fromBase64,
        base64Encoder: (_b = config2 == null ? void 0 : config2.base64Encoder) != null ? _b : toBase64,
        disableHostPrefix: (_c = config2 == null ? void 0 : config2.disableHostPrefix) != null ? _c : false,
        endpointProvider: (_d = config2 == null ? void 0 : config2.endpointProvider) != null ? _d : defaultEndpointResolver3,
        extensions: (_e = config2 == null ? void 0 : config2.extensions) != null ? _e : [],
        logger: (_f = config2 == null ? void 0 : config2.logger) != null ? _f : new NoOpLogger(),
        serviceId: (_g = config2 == null ? void 0 : config2.serviceId) != null ? _g : "STS",
        urlParser: (_h = config2 == null ? void 0 : config2.urlParser) != null ? _h : parseUrl,
        utf8Decoder: (_i = config2 == null ? void 0 : config2.utf8Decoder) != null ? _i : fromUtf8,
        utf8Encoder: (_j = config2 == null ? void 0 : config2.utf8Encoder) != null ? _j : toUtf8
      };
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js
var getRuntimeConfig5;
var init_runtimeConfig2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package2();
    init_defaultStsRoleAssumers();
    init_dist_es56();
    init_dist_es46();
    init_dist_es30();
    init_dist_es47();
    init_dist_es39();
    init_dist_es43();
    init_dist_es14();
    init_dist_es48();
    init_dist_es38();
    init_runtimeConfig_shared2();
    init_dist_es16();
    init_dist_es49();
    init_dist_es16();
    getRuntimeConfig5 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig4(config2);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config2), {
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config2 == null ? void 0 : config2.bodyLengthChecker) != null ? _a : calculateBodyLength,
        credentialDefaultProvider: (_b = config2 == null ? void 0 : config2.credentialDefaultProvider) != null ? _b : decorateDefaultCredentialProvider(defaultProvider),
        defaultUserAgentProvider: (_c = config2 == null ? void 0 : config2.defaultUserAgentProvider) != null ? _c : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }),
        maxAttempts: (_d = config2 == null ? void 0 : config2.maxAttempts) != null ? _d : loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_e = config2 == null ? void 0 : config2.region) != null ? _e : loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_f = config2 == null ? void 0 : config2.requestHandler) != null ? _f : new NodeHttpHandler(defaultConfigProvider),
        retryMode: (_g = config2 == null ? void 0 : config2.retryMode) != null ? _g : loadConfig(__spreadProps(__spreadValues({}, NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: () => __async(void 0, null, function* () {
            return (yield defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE;
          })
        })),
        sha256: (_h = config2 == null ? void 0 : config2.sha256) != null ? _h : Hash.bind(null, "sha256"),
        streamCollector: (_i = config2 == null ? void 0 : config2.streamCollector) != null ? _i : streamCollector,
        useDualstackEndpoint: (_j = config2 == null ? void 0 : config2.useDualstackEndpoint) != null ? _j : loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_k = config2 == null ? void 0 : config2.useFipsEndpoint) != null ? _k : loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      });
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js
var asPartial2, resolveRuntimeExtensions2;
var init_runtimeExtensions2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es50();
    init_dist_es2();
    init_dist_es16();
    asPartial2 = (t4) => t4;
    resolveRuntimeExtensions2 = (runtimeConfig, extensions) => {
      const extensionConfiguration = __spreadValues(__spreadValues(__spreadValues({}, asPartial2(getAwsRegionExtensionConfiguration(runtimeConfig))), asPartial2(getDefaultExtensionConfiguration(runtimeConfig))), asPartial2(getHttpHandlerExtensionConfiguration(runtimeConfig)));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, runtimeConfig), resolveAwsRegionExtensionConfiguration(extensionConfiguration)), resolveDefaultRuntimeConfig(extensionConfiguration)), resolveHttpHandlerRuntimeConfig(extensionConfiguration));
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/STSClient.js
var STSClient;
var init_STSClient = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/STSClient.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es5();
    init_dist_es6();
    init_dist_es40();
    init_dist_es28();
    init_dist_es30();
    init_dist_es32();
    init_dist_es36();
    init_dist_es39();
    init_dist_es16();
    init_EndpointParameters2();
    init_runtimeConfig2();
    init_runtimeExtensions2();
    STSClient = class _STSClient extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig5(configuration || {});
        const _config_1 = resolveClientEndpointParameters2(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveStsAuthConfig(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = resolveUserAgentConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions2(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js
var AssumeRoleWithSAMLCommand;
var init_AssumeRoleWithSAMLCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_0();
    init_Aws_query();
    AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_AssumeRoleWithSAMLCommand(input, context);
      }
      deserialize(output, context) {
        return de_AssumeRoleWithSAMLCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js
var DecodeAuthorizationMessageCommand;
var init_DecodeAuthorizationMessageCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_query();
    DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DecodeAuthorizationMessageCommand(input, context);
      }
      deserialize(output, context) {
        return de_DecodeAuthorizationMessageCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js
var GetAccessKeyInfoCommand;
var init_GetAccessKeyInfoCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_query();
    GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetAccessKeyInfoCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetAccessKeyInfoCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js
var GetCallerIdentityCommand;
var init_GetCallerIdentityCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_query();
    GetCallerIdentityCommand = class _GetCallerIdentityCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetCallerIdentityCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetCallerIdentityCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js
var GetFederationTokenCommand;
var init_GetFederationTokenCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_0();
    init_Aws_query();
    GetFederationTokenCommand = class _GetFederationTokenCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetFederationTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetFederationTokenCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js
var GetSessionTokenCommand;
var init_GetSessionTokenCommand = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js"() {
    "use strict";
    init_dist_es25();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_0();
    init_Aws_query();
    GetSessionTokenCommand = class _GetSessionTokenCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getAwsAuthPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetSessionTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetSessionTokenCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/STS.js
var commands3, STS;
var init_STS = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/STS.js"() {
    "use strict";
    init_dist_es16();
    init_AssumeRoleCommand();
    init_AssumeRoleWithSAMLCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_DecodeAuthorizationMessageCommand();
    init_GetAccessKeyInfoCommand();
    init_GetCallerIdentityCommand();
    init_GetFederationTokenCommand();
    init_GetSessionTokenCommand();
    init_STSClient();
    commands3 = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    STS = class extends STSClient {
    };
    createAggregatedClient(commands3, STS);
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/commands/index.js
var init_commands2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/commands/index.js"() {
    "use strict";
    init_AssumeRoleCommand();
    init_AssumeRoleWithSAMLCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_DecodeAuthorizationMessageCommand();
    init_GetAccessKeyInfoCommand();
    init_GetCallerIdentityCommand();
    init_GetFederationTokenCommand();
    init_GetSessionTokenCommand();
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/models/index.js
var init_models2 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/models/index.js"() {
    "use strict";
    init_models_0();
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js
var getCustomizableStsClientCtor, getDefaultRoleAssumer2, getDefaultRoleAssumerWithWebIdentity2, decorateDefaultCredentialProvider2;
var init_defaultRoleAssumers = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js"() {
    "use strict";
    init_defaultStsRoleAssumers();
    init_STSClient();
    getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config2) {
            super(config2);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    getDefaultRoleAssumer2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    getDefaultRoleAssumerWithWebIdentity2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    decorateDefaultCredentialProvider2 = (provider) => (input) => provider(__spreadValues({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input)
    }, input));
  }
});

// node_modules/@aws-sdk/client-sts/dist-es/index.js
var init_dist_es57 = __esm({
  "node_modules/@aws-sdk/client-sts/dist-es/index.js"() {
    "use strict";
    init_STSClient();
    init_STS();
    init_commands2();
    init_models2();
    init_defaultRoleAssumers();
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js
var init_NodeDisableMultiregionAccessPointConfigOptions = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js"() {
    "use strict";
    init_dist_es29();
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js
var NODE_USE_ARN_REGION_ENV_NAME, NODE_USE_ARN_REGION_INI_NAME, NODE_USE_ARN_REGION_CONFIG_OPTIONS;
var init_NodeUseArnRegionConfigOptions = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js"() {
    "use strict";
    init_dist_es29();
    NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
    NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
    NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => booleanSelector(env2, NODE_USE_ARN_REGION_ENV_NAME, SelectorType.ENV),
      configFileSelector: (profile) => booleanSelector(profile, NODE_USE_ARN_REGION_INI_NAME, SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js
var init_bucketHostnameUtils = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js
var init_bucketHostname = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js"() {
    "use strict";
    init_bucketHostnameUtils();
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js
var init_bucketEndpointMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js"() {
    "use strict";
    init_dist_es17();
    init_dist_es2();
    init_bucketHostname();
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js
var init_configurations3 = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js
var init_dist_es58 = __esm({
  "node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js"() {
    "use strict";
    init_NodeDisableMultiregionAccessPointConfigOptions();
    init_NodeUseArnRegionConfigOptions();
    init_bucketEndpointMiddleware();
    init_bucketHostname();
    init_configurations3();
    init_bucketHostnameUtils();
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js
function getChunkedStream(source) {
  let currentMessageTotalLength = 0;
  let currentMessagePendingLength = 0;
  let currentMessage = null;
  let messageLengthBuffer = null;
  const allocateMessage = (size) => {
    if (typeof size !== "number") {
      throw new Error("Attempted to allocate an event message where size was not a number: " + size);
    }
    currentMessageTotalLength = size;
    currentMessagePendingLength = 4;
    currentMessage = new Uint8Array(size);
    const currentMessageView = new DataView(currentMessage.buffer);
    currentMessageView.setUint32(0, size, false);
  };
  const iterator = function() {
    return __asyncGenerator(this, null, function* () {
      const sourceIterator = source[Symbol.asyncIterator]();
      while (true) {
        const { value, done } = yield new __await(sourceIterator.next());
        if (done) {
          if (!currentMessageTotalLength) {
            return;
          } else if (currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
          } else {
            throw new Error("Truncated event message received.");
          }
          return;
        }
        const chunkLength = value.length;
        let currentOffset = 0;
        while (currentOffset < chunkLength) {
          if (!currentMessage) {
            const bytesRemaining = chunkLength - currentOffset;
            if (!messageLengthBuffer) {
              messageLengthBuffer = new Uint8Array(4);
            }
            const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
            currentMessagePendingLength += numBytesForTotal;
            currentOffset += numBytesForTotal;
            if (currentMessagePendingLength < 4) {
              break;
            }
            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
            messageLengthBuffer = null;
          }
          const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
          currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
          currentMessagePendingLength += numBytesToWrite;
          currentOffset += numBytesToWrite;
          if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
          }
        }
      }
    });
  };
  return {
    [Symbol.asyncIterator]: iterator
  };
}
var init_getChunkedStream = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js"() {
    "use strict";
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js
function getMessageUnmarshaller(deserializer, toUtf85) {
  return function(message) {
    return __async(this, null, function* () {
      const { value: messageType } = message.headers[":message-type"];
      if (messageType === "error") {
        const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
        unmodeledError.name = message.headers[":error-code"].value;
        throw unmodeledError;
      } else if (messageType === "exception") {
        const code = message.headers[":exception-type"].value;
        const exception = { [code]: message };
        const deserializedException = yield deserializer(exception);
        if (deserializedException.$unknown) {
          const error = new Error(toUtf85(message.body));
          error.name = code;
          throw error;
        }
        throw deserializedException[code];
      } else if (messageType === "event") {
        const event = {
          [message.headers[":event-type"].value]: message
        };
        const deserialized = yield deserializer(event);
        if (deserialized.$unknown)
          return;
        return deserialized;
      } else {
        throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
      }
    });
  };
}
var init_getUnmarshalledStream = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"() {
    "use strict";
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js
var EventStreamMarshaller;
var init_EventStreamMarshaller = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js"() {
    "use strict";
    init_dist_es22();
    init_getChunkedStream();
    init_getUnmarshalledStream();
    EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = getChunkedStream(body);
        return new SmithyMessageDecoderStream({
          messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new MessageEncoderStream({
          messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-es/provider.js
var init_provider = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/provider.js"() {
    "use strict";
    init_EventStreamMarshaller();
  }
});

// node_modules/@smithy/eventstream-serde-universal/dist-es/index.js
var init_dist_es59 = __esm({
  "node_modules/@smithy/eventstream-serde-universal/dist-es/index.js"() {
    "use strict";
    init_EventStreamMarshaller();
    init_provider();
  }
});

// node_modules/@smithy/eventstream-serde-node/dist-es/utils.js
function readabletoIterable(readStream) {
  return __asyncGenerator(this, null, function* () {
    let streamEnded = false;
    let generationEnded = false;
    const records = new Array();
    readStream.on("error", (err) => {
      if (!streamEnded) {
        streamEnded = true;
      }
      if (err) {
        throw err;
      }
    });
    readStream.on("data", (data) => {
      records.push(data);
    });
    readStream.on("end", () => {
      streamEnded = true;
    });
    while (!generationEnded) {
      const value = yield new __await(new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0)));
      if (value) {
        yield value;
      }
      generationEnded = streamEnded && records.length === 0;
    }
  });
}
var init_utils2 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/utils.js"() {
    "use strict";
  }
});

// node_modules/@smithy/eventstream-serde-node/dist-es/EventStreamMarshaller.js
var import_stream5, EventStreamMarshaller2;
var init_EventStreamMarshaller2 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/EventStreamMarshaller.js"() {
    "use strict";
    init_dist_es59();
    import_stream5 = require("stream");
    init_utils2();
    EventStreamMarshaller2 = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        return import_stream5.Readable.from(this.universalMarshaller.serialize(input, serializer));
      }
    };
  }
});

// node_modules/@smithy/eventstream-serde-node/dist-es/provider.js
var eventStreamSerdeProvider;
var init_provider2 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/provider.js"() {
    "use strict";
    init_EventStreamMarshaller2();
    eventStreamSerdeProvider = (options) => new EventStreamMarshaller2(options);
  }
});

// node_modules/@smithy/eventstream-serde-node/dist-es/index.js
var init_dist_es60 = __esm({
  "node_modules/@smithy/eventstream-serde-node/dist-es/index.js"() {
    "use strict";
    init_EventStreamMarshaller2();
    init_provider2();
  }
});

// node_modules/@smithy/hash-stream-node/dist-es/HashCalculator.js
var import_stream6, HashCalculator;
var init_HashCalculator = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/HashCalculator.js"() {
    "use strict";
    init_dist_es11();
    import_stream6 = require("stream");
    HashCalculator = class extends import_stream6.Writable {
      constructor(hash, options) {
        super(options);
        this.hash = hash;
      }
      _write(chunk, encoding, callback) {
        try {
          this.hash.update(toUint8Array(chunk));
        } catch (err) {
          return callback(err);
        }
        callback();
      }
    };
  }
});

// node_modules/@smithy/hash-stream-node/dist-es/fileStreamHasher.js
var init_fileStreamHasher = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/fileStreamHasher.js"() {
    "use strict";
    init_HashCalculator();
  }
});

// node_modules/@smithy/hash-stream-node/dist-es/readableStreamHasher.js
var readableStreamHasher;
var init_readableStreamHasher = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/readableStreamHasher.js"() {
    "use strict";
    init_HashCalculator();
    readableStreamHasher = (hashCtor, readableStream) => {
      if (readableStream.readableFlowing !== null) {
        throw new Error("Unable to calculate hash for flowing readable stream");
      }
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator(hash);
      readableStream.pipe(hashCalculator);
      return new Promise((resolve, reject) => {
        readableStream.on("error", (err) => {
          hashCalculator.end();
          reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", () => {
          hash.digest().then(resolve).catch(reject);
        });
      });
    };
  }
});

// node_modules/@smithy/hash-stream-node/dist-es/index.js
var init_dist_es61 = __esm({
  "node_modules/@smithy/hash-stream-node/dist-es/index.js"() {
    "use strict";
    init_fileStreamHasher();
    init_readableStreamHasher();
  }
});

// node_modules/@aws-sdk/signature-v4-multi-region/dist-es/signature-v4-crt-container.js
var signatureV4CrtContainer;
var init_signature_v4_crt_container = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/signature-v4-crt-container.js"() {
    "use strict";
    signatureV4CrtContainer = {
      CrtSignerV4: null
    };
  }
});

// node_modules/@aws-sdk/signature-v4-multi-region/dist-es/load-crt.js
function loadCrt() {
  if (signatureV4CrtContainer.CrtSignerV4) {
    return;
  }
  try {
    if (typeof require === "function") {
      const __require = require;
      const moduleName = "@aws-sdk/signature-v4-crt";
      __require.call(null, moduleName);
    }
  } catch (e5) {
  }
}
var init_load_crt = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/load-crt.js"() {
    "use strict";
    init_signature_v4_crt_container();
  }
});

// node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js
var SignatureV4MultiRegion;
var init_SignatureV4MultiRegion = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js"() {
    "use strict";
    init_dist_es24();
    init_load_crt();
    init_signature_v4_crt_container();
    SignatureV4MultiRegion = class {
      constructor(options) {
        this.sigv4Signer = new SignatureV4(options);
        this.signerOptions = options;
      }
      sign(_0) {
        return __async(this, arguments, function* (requestToSign, options = {}) {
          if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
              throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().sign(requestToSign, options);
          }
          return this.sigv4Signer.sign(requestToSign, options);
        });
      }
      presign(_0) {
        return __async(this, arguments, function* (originalRequest, options = {}) {
          if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
              throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().presign(originalRequest, options);
          }
          return this.sigv4Signer.presign(originalRequest, options);
        });
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          let CrtSignerV4 = null;
          try {
            loadCrt();
            CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
            if (typeof CrtSignerV4 !== "function")
              throw new Error();
          } catch (e5) {
            e5.message = `${e5.message}
Please check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
            throw e5;
          }
          this.sigv4aSigner = new CrtSignerV4(__spreadProps(__spreadValues({}, this.signerOptions), {
            signingAlgorithm: 1
          }));
        }
        return this.sigv4aSigner;
      }
    };
  }
});

// node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js
var init_dist_es62 = __esm({
  "node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js"() {
    "use strict";
    init_SignatureV4MultiRegion();
    init_signature_v4_crt_container();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js
var bJ, bK, bL, bM, bN, bO, bP, bQ, bR, bS, bT, bU, bV, bW, a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t3, u2, v2, w2, x2, y2, z2, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, aA, aB, aC, aD, aE, aF, aG, aH, aI, aJ, aK, aL, aM, aN, aO, aP, aQ, aR, aS, aT, aU, aV, aW, aX, aY, aZ, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, bA, bB, bC, bD, bE, bF, bG, bH, bI, _data4, ruleSet4;
var init_ruleset3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js"() {
    "use strict";
    bJ = "required";
    bK = "type";
    bL = "conditions";
    bM = "fn";
    bN = "argv";
    bO = "ref";
    bP = "assign";
    bQ = "url";
    bR = "properties";
    bS = "authSchemes";
    bT = "disableDoubleEncoding";
    bU = "signingName";
    bV = "signingRegion";
    bW = "headers";
    a4 = false;
    b4 = true;
    c4 = "isSet";
    d4 = "tree";
    e4 = "booleanEquals";
    f4 = "error";
    g4 = "aws.partition";
    h4 = "stringEquals";
    i4 = "getAttr";
    j4 = "name";
    k4 = "substring";
    l4 = "hardwareType";
    m4 = "regionPrefix";
    n4 = "bucketAliasSuffix";
    o4 = "outpostId";
    p4 = "isValidHostLabel";
    q4 = "not";
    r4 = "parseURL";
    s4 = "s3-outposts";
    t3 = "endpoint";
    u2 = "aws.isVirtualHostableS3Bucket";
    v2 = "s3";
    w2 = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
    x2 = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
    y2 = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
    z2 = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    A2 = "aws.parseArn";
    B2 = "bucketArn";
    C2 = "arnType";
    D2 = "";
    E2 = "s3-object-lambda";
    F2 = "accesspoint";
    G2 = "accessPointName";
    H2 = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    I2 = "mrapPartition";
    J2 = "outpostType";
    K = "arnPrefix";
    L = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
    M = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
    N = "{url#scheme}://{url#authority}{url#path}";
    O = "https://s3.{partitionResult#dnsSuffix}";
    P = { [bJ]: false, [bK]: "String" };
    Q = { [bJ]: true, "default": false, [bK]: "Boolean" };
    R = { [bJ]: false, [bK]: "Boolean" };
    S = { [bM]: e4, [bN]: [{ [bO]: "Accelerate" }, true] };
    T = { [bM]: e4, [bN]: [{ [bO]: "UseFIPS" }, true] };
    U = { [bM]: e4, [bN]: [{ [bO]: "UseDualStack" }, true] };
    V = { [bM]: c4, [bN]: [{ [bO]: "Endpoint" }] };
    W = { [bM]: g4, [bN]: [{ [bO]: "Region" }], [bP]: "partitionResult" };
    X = { [bM]: h4, [bN]: [{ [bM]: i4, [bN]: [{ [bO]: "partitionResult" }, j4] }, "aws-cn"] };
    Y = { [bM]: c4, [bN]: [{ [bO]: "Bucket" }] };
    Z = { [bO]: "Bucket" };
    aa = { [bO]: l4 };
    ab = { [bL]: [{ [bM]: q4, [bN]: [V] }], [f4]: "Expected a endpoint to be specified but no endpoint was found", [bK]: f4 };
    ac = { [bM]: q4, [bN]: [V] };
    ad = { [bM]: r4, [bN]: [{ [bO]: "Endpoint" }], [bP]: "url" };
    ae = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: s4, [bV]: "{Region}" }] };
    af = {};
    ag = { [bM]: e4, [bN]: [{ [bO]: "ForcePathStyle" }, false] };
    ah = { [bO]: "ForcePathStyle" };
    ai = { [bM]: e4, [bN]: [{ [bO]: "Accelerate" }, false] };
    aj = { [bM]: h4, [bN]: [{ [bO]: "Region" }, "aws-global"] };
    ak = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: v2, [bV]: "us-east-1" }] };
    al = { [bM]: q4, [bN]: [aj] };
    am = { [bM]: e4, [bN]: [{ [bO]: "UseGlobalEndpoint" }, true] };
    an = { [bQ]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: v2, [bV]: "{Region}" }] }, [bW]: {} };
    ao = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: v2, [bV]: "{Region}" }] };
    ap = { [bM]: e4, [bN]: [{ [bO]: "UseGlobalEndpoint" }, false] };
    aq = { [bM]: e4, [bN]: [{ [bO]: "UseDualStack" }, false] };
    ar = { [bQ]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    as = { [bM]: e4, [bN]: [{ [bO]: "UseFIPS" }, false] };
    at = { [bQ]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    au = { [bQ]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    av = { [bM]: e4, [bN]: [{ [bM]: i4, [bN]: [{ [bO]: "url" }, "isIp"] }, true] };
    aw = { [bO]: "url" };
    ax = { [bM]: e4, [bN]: [{ [bM]: i4, [bN]: [aw, "isIp"] }, false] };
    ay = { [bQ]: w2, [bR]: ao, [bW]: {} };
    az = { [bQ]: x2, [bR]: ao, [bW]: {} };
    aA = { [t3]: az, [bK]: t3 };
    aB = { [bQ]: y2, [bR]: ao, [bW]: {} };
    aC = { [bQ]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    aD = { [f4]: "Invalid region: region was not a valid DNS name.", [bK]: f4 };
    aE = { [bO]: B2 };
    aF = { [bO]: C2 };
    aG = { [bM]: i4, [bN]: [aE, "service"] };
    aH = { [bO]: G2 };
    aI = { [bL]: [U], [f4]: "S3 Object Lambda does not support Dual-stack", [bK]: f4 };
    aJ = { [bL]: [S], [f4]: "S3 Object Lambda does not support S3 Accelerate", [bK]: f4 };
    aK = { [bL]: [{ [bM]: c4, [bN]: [{ [bO]: "DisableAccessPoints" }] }, { [bM]: e4, [bN]: [{ [bO]: "DisableAccessPoints" }, true] }], [f4]: "Access points are not supported for this operation", [bK]: f4 };
    aL = { [bL]: [{ [bM]: c4, [bN]: [{ [bO]: "UseArnRegion" }] }, { [bM]: e4, [bN]: [{ [bO]: "UseArnRegion" }, false] }, { [bM]: q4, [bN]: [{ [bM]: h4, [bN]: [{ [bM]: i4, [bN]: [aE, "region"] }, "{Region}"] }] }], [f4]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [bK]: f4 };
    aM = { [bM]: i4, [bN]: [{ [bO]: "bucketPartition" }, j4] };
    aN = { [bM]: i4, [bN]: [aE, "accountId"] };
    aO = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: E2, [bV]: "{bucketArn#region}" }] };
    aP = { [f4]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [bK]: f4 };
    aQ = { [f4]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [bK]: f4 };
    aR = { [f4]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [bK]: f4 };
    aS = { [f4]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [bK]: f4 };
    aT = { [f4]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [bK]: f4 };
    aU = { [f4]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [bK]: f4 };
    aV = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: v2, [bV]: "{bucketArn#region}" }] };
    aW = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: s4, [bV]: "{bucketArn#region}" }] };
    aX = { [bM]: A2, [bN]: [Z] };
    aY = { [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    aZ = { [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    ba = { [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    bb = { [bQ]: L, [bR]: ao, [bW]: {} };
    bc = { [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ao, [bW]: {} };
    bd = { [bO]: "UseObjectLambdaEndpoint" };
    be = { [bS]: [{ [bT]: true, [j4]: "sigv4", [bU]: E2, [bV]: "{Region}" }] };
    bf = { [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    bg = { [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    bh = { [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    bi = { [bQ]: N, [bR]: ao, [bW]: {} };
    bj = { [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [bR]: ao, [bW]: {} };
    bk = [{ [bO]: "Region" }];
    bl = [{ [bO]: "Endpoint" }];
    bm = [Z];
    bn = [{ [bM]: p4, [bN]: [{ [bO]: o4 }, false] }];
    bo = [{ [bM]: h4, [bN]: [{ [bO]: m4 }, "beta"] }];
    bp = [V, ad];
    bq = [Y];
    br = [W];
    bs = [{ [bM]: p4, [bN]: [{ [bO]: "Region" }, false] }];
    bt = [{ [bM]: h4, [bN]: [{ [bO]: "Region" }, "us-east-1"] }];
    bu = [{ [bM]: h4, [bN]: [aF, F2] }];
    bv = [{ [bM]: i4, [bN]: [aE, "resourceId[1]"], [bP]: G2 }, { [bM]: q4, [bN]: [{ [bM]: h4, [bN]: [aH, D2] }] }];
    bw = [aE, "resourceId[1]"];
    bx = [U];
    by = [S];
    bz = [{ [bM]: q4, [bN]: [{ [bM]: h4, [bN]: [{ [bM]: i4, [bN]: [aE, "region"] }, D2] }] }];
    bA = [{ [bM]: q4, [bN]: [{ [bM]: c4, [bN]: [{ [bM]: i4, [bN]: [aE, "resourceId[2]"] }] }] }];
    bB = [aE, "resourceId[2]"];
    bC = [{ [bM]: g4, [bN]: [{ [bM]: i4, [bN]: [aE, "region"] }], [bP]: "bucketPartition" }];
    bD = [{ [bM]: h4, [bN]: [aM, { [bM]: i4, [bN]: [{ [bO]: "partitionResult" }, j4] }] }];
    bE = [{ [bM]: p4, [bN]: [{ [bM]: i4, [bN]: [aE, "region"] }, true] }];
    bF = [{ [bM]: p4, [bN]: [aN, false] }];
    bG = [{ [bM]: p4, [bN]: [aH, false] }];
    bH = [T];
    bI = [{ [bM]: p4, [bN]: [{ [bO]: "Region" }, true] }];
    _data4 = { version: "1.0", parameters: { Bucket: P, Region: P, UseFIPS: Q, UseDualStack: Q, Endpoint: P, ForcePathStyle: Q, Accelerate: Q, UseGlobalEndpoint: Q, UseObjectLambdaEndpoint: R, DisableAccessPoints: R, DisableMultiRegionAccessPoints: Q, UseArnRegion: R }, rules: [{ [bL]: [{ [bM]: c4, [bN]: bk }], [bK]: d4, rules: [{ [bL]: [S, T], error: "Accelerate cannot be used with FIPS", [bK]: f4 }, { [bL]: [U, V], error: "Cannot set dual-stack in combination with a custom endpoint.", [bK]: f4 }, { [bL]: [V, T], error: "A custom endpoint cannot be combined with FIPS", [bK]: f4 }, { [bL]: [V, S], error: "A custom endpoint cannot be combined with S3 Accelerate", [bK]: f4 }, { [bL]: [T, W, X], error: "Partition does not support FIPS", [bK]: f4 }, { [bL]: [Y, { [bM]: k4, [bN]: [Z, 49, 50, b4], [bP]: l4 }, { [bM]: k4, [bN]: [Z, 8, 12, b4], [bP]: m4 }, { [bM]: k4, [bN]: [Z, 0, 7, b4], [bP]: n4 }, { [bM]: k4, [bN]: [Z, 32, 49, b4], [bP]: o4 }, { [bM]: g4, [bN]: bk, [bP]: "regionPartition" }, { [bM]: h4, [bN]: [{ [bO]: n4 }, "--op-s3"] }], [bK]: d4, rules: [{ [bL]: bn, [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [aa, "e"] }], [bK]: d4, rules: [{ [bL]: bo, [bK]: d4, rules: [ab, { [bL]: bp, endpoint: { [bQ]: "https://{Bucket}.ec2.{url#authority}", [bR]: ae, [bW]: af }, [bK]: t3 }] }, { endpoint: { [bQ]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [bR]: ae, [bW]: af }, [bK]: t3 }] }, { [bL]: [{ [bM]: h4, [bN]: [aa, "o"] }], [bK]: d4, rules: [{ [bL]: bo, [bK]: d4, rules: [ab, { [bL]: bp, endpoint: { [bQ]: "https://{Bucket}.op-{outpostId}.{url#authority}", [bR]: ae, [bW]: af }, [bK]: t3 }] }, { endpoint: { [bQ]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [bR]: ae, [bW]: af }, [bK]: t3 }] }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [bK]: f4 }] }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [bK]: f4 }] }, { [bL]: bq, [bK]: d4, rules: [{ [bL]: [V, { [bM]: q4, [bN]: [{ [bM]: c4, [bN]: [{ [bM]: r4, [bN]: bl }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [bK]: f4 }, { [bL]: [ag, { [bM]: u2, [bN]: [Z, a4] }], [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bs, [bK]: d4, rules: [{ [bL]: [S, X], error: "S3 Accelerate cannot be used in this region", [bK]: f4 }, { [bL]: [U, T, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [U, T, ai, ac, al, am], [bK]: d4, rules: [{ endpoint: an, [bK]: t3 }] }, { [bL]: [U, T, ai, ac, al, ap], endpoint: an, [bK]: t3 }, { [bL]: [aq, T, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, T, ai, ac, al, am], [bK]: d4, rules: [{ endpoint: ar, [bK]: t3 }] }, { [bL]: [aq, T, ai, ac, al, ap], endpoint: ar, [bK]: t3 }, { [bL]: [U, as, S, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [U, as, S, ac, al, am], [bK]: d4, rules: [{ endpoint: at, [bK]: t3 }] }, { [bL]: [U, as, S, ac, al, ap], endpoint: at, [bK]: t3 }, { [bL]: [U, as, ai, ac, aj], endpoint: { [bQ]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [U, as, ai, ac, al, am], [bK]: d4, rules: [{ endpoint: au, [bK]: t3 }] }, { [bL]: [U, as, ai, ac, al, ap], endpoint: au, [bK]: t3 }, { [bL]: [aq, as, ai, V, ad, av, aj], endpoint: { [bQ]: w2, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, as, ai, V, ad, ax, aj], endpoint: { [bQ]: x2, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, as, ai, V, ad, av, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: ay, [bK]: t3 }, { endpoint: ay, [bK]: t3 }] }, { [bL]: [aq, as, ai, V, ad, ax, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: az, [bK]: t3 }, aA] }, { [bL]: [aq, as, ai, V, ad, av, al, ap], endpoint: ay, [bK]: t3 }, { [bL]: [aq, as, ai, V, ad, ax, al, ap], endpoint: az, [bK]: t3 }, { [bL]: [aq, as, S, ac, aj], endpoint: { [bQ]: y2, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, as, S, ac, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: aB, [bK]: t3 }, { endpoint: aB, [bK]: t3 }] }, { [bL]: [aq, as, S, ac, al, ap], endpoint: aB, [bK]: t3 }, { [bL]: [aq, as, ai, ac, aj], endpoint: { [bQ]: z2, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, as, ai, ac, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: { [bQ]: z2, [bR]: ao, [bW]: af }, [bK]: t3 }, { endpoint: aC, [bK]: t3 }] }, { [bL]: [aq, as, ai, ac, al, ap], endpoint: aC, [bK]: t3 }] }, aD] }] }, { [bL]: [V, ad, { [bM]: h4, [bN]: [{ [bM]: i4, [bN]: [aw, "scheme"] }, "http"] }, { [bM]: u2, [bN]: [Z, b4] }, ag, as, aq, ai], [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bs, [bK]: d4, rules: [aA] }, aD] }] }, { [bL]: [ag, { [bM]: A2, [bN]: bm, [bP]: B2 }], [bK]: d4, rules: [{ [bL]: [{ [bM]: i4, [bN]: [aE, "resourceId[0]"], [bP]: C2 }, { [bM]: q4, [bN]: [{ [bM]: h4, [bN]: [aF, D2] }] }], [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [aG, E2] }], [bK]: d4, rules: [{ [bL]: bu, [bK]: d4, rules: [{ [bL]: bv, [bK]: d4, rules: [aI, aJ, { [bL]: bz, [bK]: d4, rules: [aK, { [bL]: bA, [bK]: d4, rules: [aL, { [bL]: bC, [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bD, [bK]: d4, rules: [{ [bL]: bE, [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [aN, D2] }], error: "Invalid ARN: Missing account id", [bK]: f4 }, { [bL]: bF, [bK]: d4, rules: [{ [bL]: bG, [bK]: d4, rules: [{ [bL]: bp, endpoint: { [bQ]: H2, [bR]: aO, [bW]: af }, [bK]: t3 }, { [bL]: bH, endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aO, [bW]: af }, [bK]: t3 }, { endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aO, [bW]: af }, [bK]: t3 }] }, aP] }, aQ] }, aR] }, aS] }] }] }, aT] }, { error: "Invalid ARN: bucket ARN is missing a region", [bK]: f4 }] }, aU] }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [bK]: f4 }] }, { [bL]: bu, [bK]: d4, rules: [{ [bL]: bv, [bK]: d4, rules: [{ [bL]: bz, [bK]: d4, rules: [{ [bL]: bu, [bK]: d4, rules: [{ [bL]: bz, [bK]: d4, rules: [aK, { [bL]: bA, [bK]: d4, rules: [aL, { [bL]: bC, [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [aM, "{partitionResult#name}"] }], [bK]: d4, rules: [{ [bL]: bE, [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [aG, v2] }], [bK]: d4, rules: [{ [bL]: bF, [bK]: d4, rules: [{ [bL]: bG, [bK]: d4, rules: [{ [bL]: by, error: "Access Points do not support S3 Accelerate", [bK]: f4 }, { [bL]: [T, U], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t3 }, { [bL]: [T, aq], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t3 }, { [bL]: [as, U], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t3 }, { [bL]: [as, aq, V, ad], endpoint: { [bQ]: H2, [bR]: aV, [bW]: af }, [bK]: t3 }, { [bL]: [as, aq], endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aV, [bW]: af }, [bK]: t3 }] }, aP] }, aQ] }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [bK]: f4 }] }, aR] }, aS] }] }] }, aT] }] }] }, { [bL]: [{ [bM]: p4, [bN]: [aH, b4] }], [bK]: d4, rules: [{ [bL]: bx, error: "S3 MRAP does not support dual-stack", [bK]: f4 }, { [bL]: bH, error: "S3 MRAP does not support FIPS", [bK]: f4 }, { [bL]: by, error: "S3 MRAP does not support S3 Accelerate", [bK]: f4 }, { [bL]: [{ [bM]: e4, [bN]: [{ [bO]: "DisableMultiRegionAccessPoints" }, b4] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [bK]: f4 }, { [bL]: [{ [bM]: g4, [bN]: bk, [bP]: I2 }], [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [{ [bM]: i4, [bN]: [{ [bO]: I2 }, j4] }, { [bM]: i4, [bN]: [aE, "partition"] }] }], [bK]: d4, rules: [{ endpoint: { [bQ]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [bR]: { [bS]: [{ [bT]: b4, name: "sigv4a", [bU]: v2, signingRegionSet: ["*"] }] }, [bW]: af }, [bK]: t3 }] }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [bK]: f4 }] }] }, { error: "Invalid Access Point Name", [bK]: f4 }] }, aU] }, { [bL]: [{ [bM]: h4, [bN]: [aG, s4] }], [bK]: d4, rules: [{ [bL]: bx, error: "S3 Outposts does not support Dual-stack", [bK]: f4 }, { [bL]: bH, error: "S3 Outposts does not support FIPS", [bK]: f4 }, { [bL]: by, error: "S3 Outposts does not support S3 Accelerate", [bK]: f4 }, { [bL]: [{ [bM]: c4, [bN]: [{ [bM]: i4, [bN]: [aE, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [bK]: f4 }, { [bL]: [{ [bM]: i4, [bN]: bw, [bP]: o4 }], [bK]: d4, rules: [{ [bL]: bn, [bK]: d4, rules: [aL, { [bL]: bC, [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bD, [bK]: d4, rules: [{ [bL]: bE, [bK]: d4, rules: [{ [bL]: bF, [bK]: d4, rules: [{ [bL]: [{ [bM]: i4, [bN]: bB, [bP]: J2 }], [bK]: d4, rules: [{ [bL]: [{ [bM]: i4, [bN]: [aE, "resourceId[3]"], [bP]: G2 }], [bK]: d4, rules: [{ [bL]: [{ [bM]: h4, [bN]: [{ [bO]: J2 }, F2] }], [bK]: d4, rules: [{ [bL]: bp, endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [bR]: aW, [bW]: af }, [bK]: t3 }, { endpoint: { [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [bR]: aW, [bW]: af }, [bK]: t3 }] }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [bK]: f4 }] }, { error: "Invalid ARN: expected an access point name", [bK]: f4 }] }, { error: "Invalid ARN: Expected a 4-component resource", [bK]: f4 }] }, aQ] }, aR] }, aS] }] }] }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [bK]: f4 }] }, { error: "Invalid ARN: The Outpost Id was not set", [bK]: f4 }] }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [bK]: f4 }] }, { error: "Invalid ARN: No ARN type specified", [bK]: f4 }] }, { [bL]: [{ [bM]: k4, [bN]: [Z, 0, 4, a4], [bP]: K }, { [bM]: h4, [bN]: [{ [bO]: K }, "arn:"] }, { [bM]: q4, [bN]: [{ [bM]: c4, [bN]: [aX] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [bK]: f4 }, { [bL]: [{ [bM]: e4, [bN]: [ah, b4] }, aX], error: "Path-style addressing cannot be used with ARN buckets", [bK]: f4 }, { [bL]: [{ [bM]: "uriEncode", [bN]: bm, [bP]: "uri_encoded_bucket" }], [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: [ai], [bK]: d4, rules: [{ [bL]: [U, ac, T, aj], endpoint: { [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [U, ac, T, al, am], [bK]: d4, rules: [{ endpoint: aY, [bK]: t3 }] }, { [bL]: [U, ac, T, al, ap], endpoint: aY, [bK]: t3 }, { [bL]: [aq, ac, T, aj], endpoint: { [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, ac, T, al, am], [bK]: d4, rules: [{ endpoint: aZ, [bK]: t3 }] }, { [bL]: [aq, ac, T, al, ap], endpoint: aZ, [bK]: t3 }, { [bL]: [U, ac, as, aj], endpoint: { [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [U, ac, as, al, am], [bK]: d4, rules: [{ endpoint: ba, [bK]: t3 }] }, { [bL]: [U, ac, as, al, ap], endpoint: ba, [bK]: t3 }, { [bL]: [aq, V, ad, as, aj], endpoint: { [bQ]: L, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, V, ad, as, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: bb, [bK]: t3 }, { endpoint: bb, [bK]: t3 }] }, { [bL]: [aq, V, ad, as, al, ap], endpoint: bb, [bK]: t3 }, { [bL]: [aq, ac, as, aj], endpoint: { [bQ]: M, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [aq, ac, as, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: { [bQ]: M, [bR]: ao, [bW]: af }, [bK]: t3 }, { endpoint: bc, [bK]: t3 }] }, { [bL]: [aq, ac, as, al, ap], endpoint: bc, [bK]: t3 }] }, { error: "Path-style addressing cannot be used with S3 Accelerate", [bK]: f4 }] }] }] }, { [bL]: [{ [bM]: c4, [bN]: [bd] }, { [bM]: e4, [bN]: [bd, b4] }], [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bI, [bK]: d4, rules: [aI, aJ, { [bL]: bp, endpoint: { [bQ]: N, [bR]: be, [bW]: af }, [bK]: t3 }, { [bL]: bH, endpoint: { [bQ]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [bR]: be, [bW]: af }, [bK]: t3 }, { endpoint: { [bQ]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [bR]: be, [bW]: af }, [bK]: t3 }] }, aD] }] }, { [bL]: [{ [bM]: q4, [bN]: bq }], [bK]: d4, rules: [{ [bL]: br, [bK]: d4, rules: [{ [bL]: bI, [bK]: d4, rules: [{ [bL]: [T, U, ac, aj], endpoint: { [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [T, U, ac, al, am], [bK]: d4, rules: [{ endpoint: bf, [bK]: t3 }] }, { [bL]: [T, U, ac, al, ap], endpoint: bf, [bK]: t3 }, { [bL]: [T, aq, ac, aj], endpoint: { [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [T, aq, ac, al, am], [bK]: d4, rules: [{ endpoint: bg, [bK]: t3 }] }, { [bL]: [T, aq, ac, al, ap], endpoint: bg, [bK]: t3 }, { [bL]: [as, U, ac, aj], endpoint: { [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [as, U, ac, al, am], [bK]: d4, rules: [{ endpoint: bh, [bK]: t3 }] }, { [bL]: [as, U, ac, al, ap], endpoint: bh, [bK]: t3 }, { [bL]: [as, aq, V, ad, aj], endpoint: { [bQ]: N, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [as, aq, V, ad, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: bi, [bK]: t3 }, { endpoint: bi, [bK]: t3 }] }, { [bL]: [as, aq, V, ad, al, ap], endpoint: bi, [bK]: t3 }, { [bL]: [as, aq, ac, aj], endpoint: { [bQ]: O, [bR]: ak, [bW]: af }, [bK]: t3 }, { [bL]: [as, aq, ac, al, am], [bK]: d4, rules: [{ [bL]: bt, endpoint: { [bQ]: O, [bR]: ao, [bW]: af }, [bK]: t3 }, { endpoint: bj, [bK]: t3 }] }, { [bL]: [as, aq, ac, al, ap], endpoint: bj, [bK]: t3 }] }, aD] }] }] }, { error: "A region must be set when sending requests to S3.", [bK]: f4 }] };
    ruleSet4 = _data4;
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver4;
var init_endpointResolver3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es27();
    init_ruleset3();
    defaultEndpointResolver4 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet4, {
        endpointParams,
        logger: context.logger
      });
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js
var getRuntimeConfig6;
var init_runtimeConfig_shared3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es62();
    init_dist_es16();
    init_dist_es34();
    init_dist_es10();
    init_dist_es15();
    init_dist_es11();
    init_endpointResolver3();
    getRuntimeConfig6 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
      return {
        apiVersion: "2006-03-01",
        base64Decoder: (_a = config2 == null ? void 0 : config2.base64Decoder) != null ? _a : fromBase64,
        base64Encoder: (_b = config2 == null ? void 0 : config2.base64Encoder) != null ? _b : toBase64,
        disableHostPrefix: (_c = config2 == null ? void 0 : config2.disableHostPrefix) != null ? _c : false,
        endpointProvider: (_d = config2 == null ? void 0 : config2.endpointProvider) != null ? _d : defaultEndpointResolver4,
        extensions: (_e = config2 == null ? void 0 : config2.extensions) != null ? _e : [],
        getAwsChunkedEncodingStream: (_f = config2 == null ? void 0 : config2.getAwsChunkedEncodingStream) != null ? _f : getAwsChunkedEncodingStream,
        logger: (_g = config2 == null ? void 0 : config2.logger) != null ? _g : new NoOpLogger(),
        sdkStreamMixin: (_h = config2 == null ? void 0 : config2.sdkStreamMixin) != null ? _h : sdkStreamMixin,
        serviceId: (_i = config2 == null ? void 0 : config2.serviceId) != null ? _i : "S3",
        signerConstructor: (_j = config2 == null ? void 0 : config2.signerConstructor) != null ? _j : SignatureV4MultiRegion,
        signingEscapePath: (_k = config2 == null ? void 0 : config2.signingEscapePath) != null ? _k : false,
        urlParser: (_l = config2 == null ? void 0 : config2.urlParser) != null ? _l : parseUrl,
        useArnRegion: (_m = config2 == null ? void 0 : config2.useArnRegion) != null ? _m : false,
        utf8Decoder: (_n = config2 == null ? void 0 : config2.utf8Decoder) != null ? _n : fromUtf8,
        utf8Encoder: (_o = config2 == null ? void 0 : config2.utf8Encoder) != null ? _o : toUtf8
      };
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.js
var getRuntimeConfig7;
var init_runtimeConfig3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package();
    init_dist_es57();
    init_dist_es56();
    init_dist_es58();
    init_dist_es46();
    init_dist_es30();
    init_dist_es60();
    init_dist_es47();
    init_dist_es61();
    init_dist_es39();
    init_dist_es43();
    init_dist_es14();
    init_dist_es48();
    init_dist_es38();
    init_runtimeConfig_shared3();
    init_dist_es16();
    init_dist_es49();
    init_dist_es16();
    getRuntimeConfig7 = (config2) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config2);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig6(config2);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config2), {
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config2 == null ? void 0 : config2.bodyLengthChecker) != null ? _a : calculateBodyLength,
        credentialDefaultProvider: (_b = config2 == null ? void 0 : config2.credentialDefaultProvider) != null ? _b : decorateDefaultCredentialProvider2(defaultProvider),
        defaultUserAgentProvider: (_c = config2 == null ? void 0 : config2.defaultUserAgentProvider) != null ? _c : defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        eventStreamSerdeProvider: (_d = config2 == null ? void 0 : config2.eventStreamSerdeProvider) != null ? _d : eventStreamSerdeProvider,
        maxAttempts: (_e = config2 == null ? void 0 : config2.maxAttempts) != null ? _e : loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        md5: (_f = config2 == null ? void 0 : config2.md5) != null ? _f : Hash.bind(null, "md5"),
        region: (_g = config2 == null ? void 0 : config2.region) != null ? _g : loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config2 == null ? void 0 : config2.requestHandler) != null ? _h : new NodeHttpHandler(defaultConfigProvider),
        retryMode: (_i = config2 == null ? void 0 : config2.retryMode) != null ? _i : loadConfig(__spreadProps(__spreadValues({}, NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: () => __async(void 0, null, function* () {
            return (yield defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE;
          })
        })),
        sha1: (_j = config2 == null ? void 0 : config2.sha1) != null ? _j : Hash.bind(null, "sha1"),
        sha256: (_k = config2 == null ? void 0 : config2.sha256) != null ? _k : Hash.bind(null, "sha256"),
        streamCollector: (_l = config2 == null ? void 0 : config2.streamCollector) != null ? _l : streamCollector,
        streamHasher: (_m = config2 == null ? void 0 : config2.streamHasher) != null ? _m : readableStreamHasher,
        useArnRegion: (_n = config2 == null ? void 0 : config2.useArnRegion) != null ? _n : loadConfig(NODE_USE_ARN_REGION_CONFIG_OPTIONS),
        useDualstackEndpoint: (_o = config2 == null ? void 0 : config2.useDualstackEndpoint) != null ? _o : loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_p = config2 == null ? void 0 : config2.useFipsEndpoint) != null ? _p : loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      });
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/runtimeExtensions.js
var asPartial3, resolveRuntimeExtensions3;
var init_runtimeExtensions3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es50();
    init_dist_es2();
    init_dist_es16();
    asPartial3 = (t4) => t4;
    resolveRuntimeExtensions3 = (runtimeConfig, extensions) => {
      const extensionConfiguration = __spreadValues(__spreadValues(__spreadValues({}, asPartial3(getAwsRegionExtensionConfiguration(runtimeConfig))), asPartial3(getDefaultExtensionConfiguration(runtimeConfig))), asPartial3(getHttpHandlerExtensionConfiguration(runtimeConfig)));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, runtimeConfig), resolveAwsRegionExtensionConfiguration(extensionConfiguration)), resolveDefaultRuntimeConfig(extensionConfiguration)), resolveHttpHandlerRuntimeConfig(extensionConfiguration));
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/S3Client.js
var S3Client;
var init_S3Client = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/S3Client.js"() {
    "use strict";
    init_dist_es3();
    init_dist_es4();
    init_dist_es5();
    init_dist_es6();
    init_dist_es18();
    init_dist_es25();
    init_dist_es28();
    init_dist_es30();
    init_dist_es31();
    init_dist_es32();
    init_dist_es36();
    init_dist_es39();
    init_dist_es16();
    init_EndpointParameters();
    init_runtimeConfig3();
    init_runtimeExtensions3();
    S3Client = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig7(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveAwsAuthConfig(_config_5);
        const _config_7 = resolveS3Config(_config_6);
        const _config_8 = resolveUserAgentConfig(_config_7);
        const _config_9 = resolveEventStreamSerdeConfig(_config_8);
        const _config_10 = resolveRuntimeExtensions3(_config_9, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_10);
        this.config = _config_10;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getAwsAuthPlugin(this.config));
        this.middlewareStack.use(getValidateBucketNamePlugin(this.config));
        this.middlewareStack.use(getAddExpectContinuePlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});

// node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js
function escapeAttribute(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
var init_escape_attribute = __esm({
  "node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js
function escapeElement(value) {
  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}
var init_escape_element = __esm({
  "node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js
var XmlText;
var init_XmlText = __esm({
  "node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js"() {
    "use strict";
    init_escape_element();
    XmlText = class {
      constructor(value) {
        this.value = value;
      }
      toString() {
        return escapeElement("" + this.value);
      }
    };
  }
});

// node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js
var XmlNode;
var init_XmlNode = __esm({
  "node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js"() {
    "use strict";
    init_escape_attribute();
    init_XmlText();
    XmlNode = class _XmlNode {
      static of(name, childText, withName) {
        const node = new _XmlNode(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
        this.attributes = {};
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (typeof attribute !== "undefined" && attribute !== null) {
            xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c5) => c5.toString()).join("")}</${this.name}>`;
      }
    };
  }
});

// node_modules/@aws-sdk/xml-builder/dist-es/index.js
var init_dist_es63 = __esm({
  "node_modules/@aws-sdk/xml-builder/dist-es/index.js"() {
    "use strict";
    init_XmlNode();
    init_XmlText();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js
var S3ServiceException;
var init_S3ServiceException = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js"() {
    "use strict";
    init_dist_es16();
    S3ServiceException = class _S3ServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _S3ServiceException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js
var RequestCharged, RequestPayer, NoSuchUpload, BucketAccelerateStatus, Type, Permission, OwnerOverride, ServerSideEncryption, ObjectCannedACL, ChecksumAlgorithm, MetadataDirective, ObjectLockLegalHoldStatus, ObjectLockMode, StorageClass, TaggingDirective, ObjectNotInActiveTierError, BucketAlreadyExists, BucketAlreadyOwnedByYou, BucketCannedACL, BucketLocationConstraint, ObjectOwnership, AnalyticsFilter, AnalyticsS3ExportFileFormat, StorageClassAnalysisSchemaVersion, IntelligentTieringStatus, IntelligentTieringAccessTier, InventoryFormat, InventoryIncludedObjectVersions, InventoryOptionalField, InventoryFrequency, LifecycleRuleFilter, TransitionStorageClass, ExpirationStatus, BucketLogsPermission, MetricsFilter, Event, FilterRuleName, DeleteMarkerReplicationStatus, MetricsStatus, ReplicationTimeStatus, ExistingObjectReplicationStatus, ReplicationRuleFilter, ReplicaModificationsStatus, SseKmsEncryptedObjectsStatus, ReplicationRuleStatus, Payer, MFADeleteStatus, BucketVersioningStatus, Protocol, ReplicationStatus, ChecksumMode, InvalidObjectState, NoSuchKey, ObjectAttributes, ObjectLockEnabled, ObjectLockRetentionMode, NotFound, ArchiveStatus, EncodingType, ObjectStorageClass, OptionalObjectAttributes, NoSuchBucket, ObjectVersionStorageClass, MFADelete, CompleteMultipartUploadOutputFilterSensitiveLog, CompleteMultipartUploadRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog, CopyObjectRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog, CreateMultipartUploadRequestFilterSensitiveLog, ServerSideEncryptionByDefaultFilterSensitiveLog, ServerSideEncryptionRuleFilterSensitiveLog, ServerSideEncryptionConfigurationFilterSensitiveLog, GetBucketEncryptionOutputFilterSensitiveLog, SSEKMSFilterSensitiveLog, InventoryEncryptionFilterSensitiveLog, InventoryS3BucketDestinationFilterSensitiveLog, InventoryDestinationFilterSensitiveLog, InventoryConfigurationFilterSensitiveLog, GetBucketInventoryConfigurationOutputFilterSensitiveLog, GetObjectOutputFilterSensitiveLog, GetObjectRequestFilterSensitiveLog, GetObjectAttributesRequestFilterSensitiveLog, GetObjectTorrentOutputFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog, HeadObjectRequestFilterSensitiveLog, ListBucketInventoryConfigurationsOutputFilterSensitiveLog, ListPartsRequestFilterSensitiveLog, PutBucketEncryptionRequestFilterSensitiveLog, PutBucketInventoryConfigurationRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog, PutObjectRequestFilterSensitiveLog;
var init_models_03 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es16();
    init_S3ServiceException();
    RequestCharged = {
      requester: "requester"
    };
    RequestPayer = {
      requester: "requester"
    };
    NoSuchUpload = class _NoSuchUpload extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "NoSuchUpload",
          $fault: "client"
        }, opts));
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchUpload.prototype);
      }
    };
    BucketAccelerateStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    Type = {
      AmazonCustomerByEmail: "AmazonCustomerByEmail",
      CanonicalUser: "CanonicalUser",
      Group: "Group"
    };
    Permission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      READ_ACP: "READ_ACP",
      WRITE: "WRITE",
      WRITE_ACP: "WRITE_ACP"
    };
    OwnerOverride = {
      Destination: "Destination"
    };
    ServerSideEncryption = {
      AES256: "AES256",
      aws_kms: "aws:kms",
      aws_kms_dsse: "aws:kms:dsse"
    };
    ObjectCannedACL = {
      authenticated_read: "authenticated-read",
      aws_exec_read: "aws-exec-read",
      bucket_owner_full_control: "bucket-owner-full-control",
      bucket_owner_read: "bucket-owner-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    ChecksumAlgorithm = {
      CRC32: "CRC32",
      CRC32C: "CRC32C",
      SHA1: "SHA1",
      SHA256: "SHA256"
    };
    MetadataDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    ObjectLockLegalHoldStatus = {
      OFF: "OFF",
      ON: "ON"
    };
    ObjectLockMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    StorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    TaggingDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    ObjectNotInActiveTierError = class _ObjectNotInActiveTierError extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ObjectNotInActiveTierError",
          $fault: "client"
        }, opts));
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectNotInActiveTierError.prototype);
      }
    };
    BucketAlreadyExists = class _BucketAlreadyExists extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "BucketAlreadyExists",
          $fault: "client"
        }, opts));
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
      }
    };
    BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client"
        }, opts));
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
      }
    };
    BucketCannedACL = {
      authenticated_read: "authenticated-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    BucketLocationConstraint = {
      EU: "EU",
      af_south_1: "af-south-1",
      ap_east_1: "ap-east-1",
      ap_northeast_1: "ap-northeast-1",
      ap_northeast_2: "ap-northeast-2",
      ap_northeast_3: "ap-northeast-3",
      ap_south_1: "ap-south-1",
      ap_south_2: "ap-south-2",
      ap_southeast_1: "ap-southeast-1",
      ap_southeast_2: "ap-southeast-2",
      ap_southeast_3: "ap-southeast-3",
      ca_central_1: "ca-central-1",
      cn_north_1: "cn-north-1",
      cn_northwest_1: "cn-northwest-1",
      eu_central_1: "eu-central-1",
      eu_north_1: "eu-north-1",
      eu_south_1: "eu-south-1",
      eu_south_2: "eu-south-2",
      eu_west_1: "eu-west-1",
      eu_west_2: "eu-west-2",
      eu_west_3: "eu-west-3",
      me_south_1: "me-south-1",
      sa_east_1: "sa-east-1",
      us_east_2: "us-east-2",
      us_gov_east_1: "us-gov-east-1",
      us_gov_west_1: "us-gov-west-1",
      us_west_1: "us-west-1",
      us_west_2: "us-west-2"
    };
    ObjectOwnership = {
      BucketOwnerEnforced: "BucketOwnerEnforced",
      BucketOwnerPreferred: "BucketOwnerPreferred",
      ObjectWriter: "ObjectWriter"
    };
    (function(AnalyticsFilter2) {
      AnalyticsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AnalyticsFilter || (AnalyticsFilter = {}));
    AnalyticsS3ExportFileFormat = {
      CSV: "CSV"
    };
    StorageClassAnalysisSchemaVersion = {
      V_1: "V_1"
    };
    IntelligentTieringStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    IntelligentTieringAccessTier = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    InventoryFormat = {
      CSV: "CSV",
      ORC: "ORC",
      Parquet: "Parquet"
    };
    InventoryIncludedObjectVersions = {
      All: "All",
      Current: "Current"
    };
    InventoryOptionalField = {
      BucketKeyStatus: "BucketKeyStatus",
      ChecksumAlgorithm: "ChecksumAlgorithm",
      ETag: "ETag",
      EncryptionStatus: "EncryptionStatus",
      IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
      IsMultipartUploaded: "IsMultipartUploaded",
      LastModifiedDate: "LastModifiedDate",
      ObjectAccessControlList: "ObjectAccessControlList",
      ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
      ObjectLockMode: "ObjectLockMode",
      ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
      ObjectOwner: "ObjectOwner",
      ReplicationStatus: "ReplicationStatus",
      Size: "Size",
      StorageClass: "StorageClass"
    };
    InventoryFrequency = {
      Daily: "Daily",
      Weekly: "Weekly"
    };
    (function(LifecycleRuleFilter2) {
      LifecycleRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== void 0)
          return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== void 0)
          return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
    TransitionStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      STANDARD_IA: "STANDARD_IA"
    };
    ExpirationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    BucketLogsPermission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      WRITE: "WRITE"
    };
    (function(MetricsFilter2) {
      MetricsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(MetricsFilter || (MetricsFilter = {}));
    Event = {
      s3_IntelligentTiering: "s3:IntelligentTiering",
      s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
      s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
      s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
      s3_LifecycleTransition: "s3:LifecycleTransition",
      s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
      s3_ObjectCreated_: "s3:ObjectCreated:*",
      s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
      s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
      s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
      s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
      s3_ObjectRemoved_: "s3:ObjectRemoved:*",
      s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
      s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
      s3_ObjectRestore_: "s3:ObjectRestore:*",
      s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
      s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
      s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
      s3_ObjectTagging_: "s3:ObjectTagging:*",
      s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
      s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
      s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
      s3_Replication_: "s3:Replication:*",
      s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
      s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
      s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
      s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
    };
    FilterRuleName = {
      prefix: "prefix",
      suffix: "suffix"
    };
    DeleteMarkerReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    MetricsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    ReplicationTimeStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    ExistingObjectReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    (function(ReplicationRuleFilter2) {
      ReplicationRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
    ReplicaModificationsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    SseKmsEncryptedObjectsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    ReplicationRuleStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    Payer = {
      BucketOwner: "BucketOwner",
      Requester: "Requester"
    };
    MFADeleteStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    BucketVersioningStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    Protocol = {
      http: "http",
      https: "https"
    };
    ReplicationStatus = {
      COMPLETE: "COMPLETE",
      FAILED: "FAILED",
      PENDING: "PENDING",
      REPLICA: "REPLICA"
    };
    ChecksumMode = {
      ENABLED: "ENABLED"
    };
    InvalidObjectState = class _InvalidObjectState extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidObjectState",
          $fault: "client"
        }, opts));
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    NoSuchKey = class _NoSuchKey extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "NoSuchKey",
          $fault: "client"
        }, opts));
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchKey.prototype);
      }
    };
    ObjectAttributes = {
      CHECKSUM: "Checksum",
      ETAG: "ETag",
      OBJECT_PARTS: "ObjectParts",
      OBJECT_SIZE: "ObjectSize",
      STORAGE_CLASS: "StorageClass"
    };
    ObjectLockEnabled = {
      Enabled: "Enabled"
    };
    ObjectLockRetentionMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    NotFound = class _NotFound extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "NotFound",
          $fault: "client"
        }, opts));
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFound.prototype);
      }
    };
    ArchiveStatus = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    EncodingType = {
      url: "url"
    };
    ObjectStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    OptionalObjectAttributes = {
      RESTORE_STATUS: "RestoreStatus"
    };
    NoSuchBucket = class _NoSuchBucket extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "NoSuchBucket",
          $fault: "client"
        }, opts));
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchBucket.prototype);
      }
    };
    ObjectVersionStorageClass = {
      STANDARD: "STANDARD"
    };
    MFADelete = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
    CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    CopyObjectOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
    CopyObjectRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING }), obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING });
    CreateMultipartUploadOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
    CreateMultipartUploadRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
    ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.KMSMasterKeyID && { KMSMasterKeyID: SENSITIVE_STRING });
    ServerSideEncryptionRuleFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.ApplyServerSideEncryptionByDefault && {
      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
    });
    ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) });
    GetBucketEncryptionOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    });
    SSEKMSFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.KeyId && { KeyId: SENSITIVE_STRING });
    InventoryEncryptionFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) });
    InventoryS3BucketDestinationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) });
    InventoryDestinationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.S3BucketDestination && {
      S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
    });
    InventoryConfigurationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) });
    GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    });
    GetObjectOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
    GetObjectRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    GetObjectAttributesRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    GetObjectTorrentOutputFilterSensitiveLog = (obj) => __spreadValues({}, obj);
    HeadObjectOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
    HeadObjectRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.InventoryConfigurationList && {
      InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item))
    });
    ListPartsRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    PutBucketEncryptionRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    });
    PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    });
    PutObjectOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
    PutObjectRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING }), obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: SENSITIVE_STRING });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js
var ObjectAlreadyInActiveTierError, Tier, ExpressionType, CompressionType, FileHeaderInfo, JSONType, QuoteFields, RestoreRequestType, SelectObjectContentEventStream, EncryptionFilterSensitiveLog, S3LocationFilterSensitiveLog, OutputLocationFilterSensitiveLog, RestoreRequestFilterSensitiveLog, RestoreObjectRequestFilterSensitiveLog, SelectObjectContentEventStreamFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog, SelectObjectContentRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog, UploadPartRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog, UploadPartCopyRequestFilterSensitiveLog, WriteGetObjectResponseRequestFilterSensitiveLog;
var init_models_1 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js"() {
    "use strict";
    init_dist_es16();
    init_S3ServiceException();
    ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError extends S3ServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client"
        }, opts));
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError.prototype);
      }
    };
    Tier = {
      Bulk: "Bulk",
      Expedited: "Expedited",
      Standard: "Standard"
    };
    ExpressionType = {
      SQL: "SQL"
    };
    CompressionType = {
      BZIP2: "BZIP2",
      GZIP: "GZIP",
      NONE: "NONE"
    };
    FileHeaderInfo = {
      IGNORE: "IGNORE",
      NONE: "NONE",
      USE: "USE"
    };
    JSONType = {
      DOCUMENT: "DOCUMENT",
      LINES: "LINES"
    };
    QuoteFields = {
      ALWAYS: "ALWAYS",
      ASNEEDED: "ASNEEDED"
    };
    RestoreRequestType = {
      SELECT: "SELECT"
    };
    (function(SelectObjectContentEventStream2) {
      SelectObjectContentEventStream2.visit = (value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
    EncryptionFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.KMSKeyId && { KMSKeyId: SENSITIVE_STRING });
    S3LocationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) });
    OutputLocationFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) });
    RestoreRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) });
    RestoreObjectRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) });
    SelectObjectContentEventStreamFilterSensitiveLog = (obj) => {
      if (obj.Records !== void 0)
        return { Records: obj.Records };
      if (obj.Stats !== void 0)
        return { Stats: obj.Stats };
      if (obj.Progress !== void 0)
        return { Progress: obj.Progress };
      if (obj.Cont !== void 0)
        return { Cont: obj.Cont };
      if (obj.End !== void 0)
        return { End: obj.End };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    SelectObjectContentOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Payload && { Payload: "STREAMING_CONTENT" });
    SelectObjectContentRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    UploadPartOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
    UploadPartRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING });
    UploadPartCopyOutputFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
    UploadPartCopyRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.SSECustomerKey && { SSECustomerKey: SENSITIVE_STRING }), obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: SENSITIVE_STRING });
    WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.SSEKMSKeyId && { SSEKMSKeyId: SENSITIVE_STRING });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js
var import_fast_xml_parser2, se_AbortMultipartUploadCommand, se_CompleteMultipartUploadCommand, se_CopyObjectCommand, se_CreateBucketCommand, se_CreateMultipartUploadCommand, se_DeleteBucketCommand, se_DeleteBucketAnalyticsConfigurationCommand, se_DeleteBucketCorsCommand, se_DeleteBucketEncryptionCommand, se_DeleteBucketIntelligentTieringConfigurationCommand, se_DeleteBucketInventoryConfigurationCommand, se_DeleteBucketLifecycleCommand, se_DeleteBucketMetricsConfigurationCommand, se_DeleteBucketOwnershipControlsCommand, se_DeleteBucketPolicyCommand, se_DeleteBucketReplicationCommand, se_DeleteBucketTaggingCommand, se_DeleteBucketWebsiteCommand, se_DeleteObjectCommand, se_DeleteObjectsCommand, se_DeleteObjectTaggingCommand, se_DeletePublicAccessBlockCommand, se_GetBucketAccelerateConfigurationCommand, se_GetBucketAclCommand, se_GetBucketAnalyticsConfigurationCommand, se_GetBucketCorsCommand, se_GetBucketEncryptionCommand, se_GetBucketIntelligentTieringConfigurationCommand, se_GetBucketInventoryConfigurationCommand, se_GetBucketLifecycleConfigurationCommand, se_GetBucketLocationCommand, se_GetBucketLoggingCommand, se_GetBucketMetricsConfigurationCommand, se_GetBucketNotificationConfigurationCommand, se_GetBucketOwnershipControlsCommand, se_GetBucketPolicyCommand, se_GetBucketPolicyStatusCommand, se_GetBucketReplicationCommand, se_GetBucketRequestPaymentCommand, se_GetBucketTaggingCommand, se_GetBucketVersioningCommand, se_GetBucketWebsiteCommand, se_GetObjectCommand, se_GetObjectAclCommand, se_GetObjectAttributesCommand, se_GetObjectLegalHoldCommand, se_GetObjectLockConfigurationCommand, se_GetObjectRetentionCommand, se_GetObjectTaggingCommand, se_GetObjectTorrentCommand, se_GetPublicAccessBlockCommand, se_HeadBucketCommand, se_HeadObjectCommand, se_ListBucketAnalyticsConfigurationsCommand, se_ListBucketIntelligentTieringConfigurationsCommand, se_ListBucketInventoryConfigurationsCommand, se_ListBucketMetricsConfigurationsCommand, se_ListBucketsCommand, se_ListMultipartUploadsCommand, se_ListObjectsCommand, se_ListObjectsV2Command, se_ListObjectVersionsCommand, se_ListPartsCommand, se_PutBucketAccelerateConfigurationCommand, se_PutBucketAclCommand, se_PutBucketAnalyticsConfigurationCommand, se_PutBucketCorsCommand, se_PutBucketEncryptionCommand, se_PutBucketIntelligentTieringConfigurationCommand, se_PutBucketInventoryConfigurationCommand, se_PutBucketLifecycleConfigurationCommand, se_PutBucketLoggingCommand, se_PutBucketMetricsConfigurationCommand, se_PutBucketNotificationConfigurationCommand, se_PutBucketOwnershipControlsCommand, se_PutBucketPolicyCommand, se_PutBucketReplicationCommand, se_PutBucketRequestPaymentCommand, se_PutBucketTaggingCommand, se_PutBucketVersioningCommand, se_PutBucketWebsiteCommand, se_PutObjectCommand, se_PutObjectAclCommand, se_PutObjectLegalHoldCommand, se_PutObjectLockConfigurationCommand, se_PutObjectRetentionCommand, se_PutObjectTaggingCommand, se_PutPublicAccessBlockCommand, se_RestoreObjectCommand, se_SelectObjectContentCommand, se_UploadPartCommand, se_UploadPartCopyCommand, se_WriteGetObjectResponseCommand, de_AbortMultipartUploadCommand, de_AbortMultipartUploadCommandError, de_CompleteMultipartUploadCommand, de_CompleteMultipartUploadCommandError, de_CopyObjectCommand, de_CopyObjectCommandError, de_CreateBucketCommand, de_CreateBucketCommandError, de_CreateMultipartUploadCommand, de_CreateMultipartUploadCommandError, de_DeleteBucketCommand, de_DeleteBucketCommandError, de_DeleteBucketAnalyticsConfigurationCommand, de_DeleteBucketAnalyticsConfigurationCommandError, de_DeleteBucketCorsCommand, de_DeleteBucketCorsCommandError, de_DeleteBucketEncryptionCommand, de_DeleteBucketEncryptionCommandError, de_DeleteBucketIntelligentTieringConfigurationCommand, de_DeleteBucketIntelligentTieringConfigurationCommandError, de_DeleteBucketInventoryConfigurationCommand, de_DeleteBucketInventoryConfigurationCommandError, de_DeleteBucketLifecycleCommand, de_DeleteBucketLifecycleCommandError, de_DeleteBucketMetricsConfigurationCommand, de_DeleteBucketMetricsConfigurationCommandError, de_DeleteBucketOwnershipControlsCommand, de_DeleteBucketOwnershipControlsCommandError, de_DeleteBucketPolicyCommand, de_DeleteBucketPolicyCommandError, de_DeleteBucketReplicationCommand, de_DeleteBucketReplicationCommandError, de_DeleteBucketTaggingCommand, de_DeleteBucketTaggingCommandError, de_DeleteBucketWebsiteCommand, de_DeleteBucketWebsiteCommandError, de_DeleteObjectCommand, de_DeleteObjectCommandError, de_DeleteObjectsCommand, de_DeleteObjectsCommandError, de_DeleteObjectTaggingCommand, de_DeleteObjectTaggingCommandError, de_DeletePublicAccessBlockCommand, de_DeletePublicAccessBlockCommandError, de_GetBucketAccelerateConfigurationCommand, de_GetBucketAccelerateConfigurationCommandError, de_GetBucketAclCommand, de_GetBucketAclCommandError, de_GetBucketAnalyticsConfigurationCommand, de_GetBucketAnalyticsConfigurationCommandError, de_GetBucketCorsCommand, de_GetBucketCorsCommandError, de_GetBucketEncryptionCommand, de_GetBucketEncryptionCommandError, de_GetBucketIntelligentTieringConfigurationCommand, de_GetBucketIntelligentTieringConfigurationCommandError, de_GetBucketInventoryConfigurationCommand, de_GetBucketInventoryConfigurationCommandError, de_GetBucketLifecycleConfigurationCommand, de_GetBucketLifecycleConfigurationCommandError, de_GetBucketLocationCommand, de_GetBucketLocationCommandError, de_GetBucketLoggingCommand, de_GetBucketLoggingCommandError, de_GetBucketMetricsConfigurationCommand, de_GetBucketMetricsConfigurationCommandError, de_GetBucketNotificationConfigurationCommand, de_GetBucketNotificationConfigurationCommandError, de_GetBucketOwnershipControlsCommand, de_GetBucketOwnershipControlsCommandError, de_GetBucketPolicyCommand, de_GetBucketPolicyCommandError, de_GetBucketPolicyStatusCommand, de_GetBucketPolicyStatusCommandError, de_GetBucketReplicationCommand, de_GetBucketReplicationCommandError, de_GetBucketRequestPaymentCommand, de_GetBucketRequestPaymentCommandError, de_GetBucketTaggingCommand, de_GetBucketTaggingCommandError, de_GetBucketVersioningCommand, de_GetBucketVersioningCommandError, de_GetBucketWebsiteCommand, de_GetBucketWebsiteCommandError, de_GetObjectCommand, de_GetObjectCommandError, de_GetObjectAclCommand, de_GetObjectAclCommandError, de_GetObjectAttributesCommand, de_GetObjectAttributesCommandError, de_GetObjectLegalHoldCommand, de_GetObjectLegalHoldCommandError, de_GetObjectLockConfigurationCommand, de_GetObjectLockConfigurationCommandError, de_GetObjectRetentionCommand, de_GetObjectRetentionCommandError, de_GetObjectTaggingCommand, de_GetObjectTaggingCommandError, de_GetObjectTorrentCommand, de_GetObjectTorrentCommandError, de_GetPublicAccessBlockCommand, de_GetPublicAccessBlockCommandError, de_HeadBucketCommand, de_HeadBucketCommandError, de_HeadObjectCommand, de_HeadObjectCommandError, de_ListBucketAnalyticsConfigurationsCommand, de_ListBucketAnalyticsConfigurationsCommandError, de_ListBucketIntelligentTieringConfigurationsCommand, de_ListBucketIntelligentTieringConfigurationsCommandError, de_ListBucketInventoryConfigurationsCommand, de_ListBucketInventoryConfigurationsCommandError, de_ListBucketMetricsConfigurationsCommand, de_ListBucketMetricsConfigurationsCommandError, de_ListBucketsCommand, de_ListBucketsCommandError, de_ListMultipartUploadsCommand, de_ListMultipartUploadsCommandError, de_ListObjectsCommand, de_ListObjectsCommandError, de_ListObjectsV2Command, de_ListObjectsV2CommandError, de_ListObjectVersionsCommand, de_ListObjectVersionsCommandError, de_ListPartsCommand, de_ListPartsCommandError, de_PutBucketAccelerateConfigurationCommand, de_PutBucketAccelerateConfigurationCommandError, de_PutBucketAclCommand, de_PutBucketAclCommandError, de_PutBucketAnalyticsConfigurationCommand, de_PutBucketAnalyticsConfigurationCommandError, de_PutBucketCorsCommand, de_PutBucketCorsCommandError, de_PutBucketEncryptionCommand, de_PutBucketEncryptionCommandError, de_PutBucketIntelligentTieringConfigurationCommand, de_PutBucketIntelligentTieringConfigurationCommandError, de_PutBucketInventoryConfigurationCommand, de_PutBucketInventoryConfigurationCommandError, de_PutBucketLifecycleConfigurationCommand, de_PutBucketLifecycleConfigurationCommandError, de_PutBucketLoggingCommand, de_PutBucketLoggingCommandError, de_PutBucketMetricsConfigurationCommand, de_PutBucketMetricsConfigurationCommandError, de_PutBucketNotificationConfigurationCommand, de_PutBucketNotificationConfigurationCommandError, de_PutBucketOwnershipControlsCommand, de_PutBucketOwnershipControlsCommandError, de_PutBucketPolicyCommand, de_PutBucketPolicyCommandError, de_PutBucketReplicationCommand, de_PutBucketReplicationCommandError, de_PutBucketRequestPaymentCommand, de_PutBucketRequestPaymentCommandError, de_PutBucketTaggingCommand, de_PutBucketTaggingCommandError, de_PutBucketVersioningCommand, de_PutBucketVersioningCommandError, de_PutBucketWebsiteCommand, de_PutBucketWebsiteCommandError, de_PutObjectCommand, de_PutObjectCommandError, de_PutObjectAclCommand, de_PutObjectAclCommandError, de_PutObjectLegalHoldCommand, de_PutObjectLegalHoldCommandError, de_PutObjectLockConfigurationCommand, de_PutObjectLockConfigurationCommandError, de_PutObjectRetentionCommand, de_PutObjectRetentionCommandError, de_PutObjectTaggingCommand, de_PutObjectTaggingCommandError, de_PutPublicAccessBlockCommand, de_PutPublicAccessBlockCommandError, de_RestoreObjectCommand, de_RestoreObjectCommandError, de_SelectObjectContentCommand, de_SelectObjectContentCommandError, de_UploadPartCommand, de_UploadPartCommandError, de_UploadPartCopyCommand, de_UploadPartCopyCommandError, de_WriteGetObjectResponseCommand, de_WriteGetObjectResponseCommandError, throwDefaultError5, de_BucketAlreadyExistsRes, de_BucketAlreadyOwnedByYouRes, de_InvalidObjectStateRes, de_NoSuchBucketRes, de_NoSuchKeyRes, de_NoSuchUploadRes, de_NotFoundRes, de_ObjectAlreadyInActiveTierErrorRes, de_ObjectNotInActiveTierErrorRes, de_SelectObjectContentEventStream, de_ContinuationEvent_event, de_EndEvent_event, de_ProgressEvent_event, de_RecordsEvent_event, de_StatsEvent_event, se_AbortIncompleteMultipartUpload, se_AccelerateConfiguration, se_AccessControlPolicy, se_AccessControlTranslation, se_AllowedHeaders, se_AllowedMethods, se_AllowedOrigins, se_AnalyticsAndOperator, se_AnalyticsConfiguration, se_AnalyticsExportDestination, se_AnalyticsFilter, se_AnalyticsS3BucketDestination, se_BucketLifecycleConfiguration, se_BucketLoggingStatus, se_CompletedMultipartUpload, se_CompletedPart, se_CompletedPartList, se_Condition, se_CORSConfiguration, se_CORSRule, se_CORSRules, se_CreateBucketConfiguration, se_CSVInput, se_CSVOutput, se_DefaultRetention, se_Delete, se_DeleteMarkerReplication, se_Destination, se_Encryption, se_EncryptionConfiguration, se_ErrorDocument, se_EventBridgeConfiguration, se_EventList, se_ExistingObjectReplication, se_ExposeHeaders, se_FilterRule, se_FilterRuleList, se_GlacierJobParameters, se_Grant, se_Grantee, se_Grants, se_IndexDocument, se_InputSerialization, se_IntelligentTieringAndOperator, se_IntelligentTieringConfiguration, se_IntelligentTieringFilter, se_InventoryConfiguration, se_InventoryDestination, se_InventoryEncryption, se_InventoryFilter, se_InventoryOptionalFields, se_InventoryS3BucketDestination, se_InventorySchedule, se_JSONInput, se_JSONOutput, se_LambdaFunctionConfiguration, se_LambdaFunctionConfigurationList, se_LifecycleExpiration, se_LifecycleRule, se_LifecycleRuleAndOperator, se_LifecycleRuleFilter, se_LifecycleRules, se_LoggingEnabled, se_MetadataEntry, se_Metrics, se_MetricsAndOperator, se_MetricsConfiguration, se_MetricsFilter, se_NoncurrentVersionExpiration, se_NoncurrentVersionTransition, se_NoncurrentVersionTransitionList, se_NotificationConfiguration, se_NotificationConfigurationFilter, se_ObjectIdentifier, se_ObjectIdentifierList, se_ObjectLockConfiguration, se_ObjectLockLegalHold, se_ObjectLockRetention, se_ObjectLockRule, se_OutputLocation, se_OutputSerialization, se_Owner, se_OwnershipControls, se_OwnershipControlsRule, se_OwnershipControlsRules, se_ParquetInput, se_PublicAccessBlockConfiguration, se_QueueConfiguration, se_QueueConfigurationList, se_Redirect, se_RedirectAllRequestsTo, se_ReplicaModifications, se_ReplicationConfiguration, se_ReplicationRule, se_ReplicationRuleAndOperator, se_ReplicationRuleFilter, se_ReplicationRules, se_ReplicationTime, se_ReplicationTimeValue, se_RequestPaymentConfiguration, se_RequestProgress, se_RestoreRequest, se_RoutingRule, se_RoutingRules, se_S3KeyFilter, se_S3Location, se_ScanRange, se_SelectParameters, se_ServerSideEncryptionByDefault, se_ServerSideEncryptionConfiguration, se_ServerSideEncryptionRule, se_ServerSideEncryptionRules, se_SourceSelectionCriteria, se_SSEKMS, se_SseKmsEncryptedObjects, se_SSES3, se_StorageClassAnalysis, se_StorageClassAnalysisDataExport, se_Tag2, se_Tagging, se_TagSet, se_TargetGrant, se_TargetGrants, se_Tiering, se_TieringList, se_TopicConfiguration, se_TopicConfigurationList, se_Transition, se_TransitionList, se_UserMetadata, se_VersioningConfiguration, se_WebsiteConfiguration, de_AbortIncompleteMultipartUpload, de_AccessControlTranslation, de_AllowedHeaders, de_AllowedMethods, de_AllowedOrigins, de_AnalyticsAndOperator, de_AnalyticsConfiguration, de_AnalyticsConfigurationList, de_AnalyticsExportDestination, de_AnalyticsFilter, de_AnalyticsS3BucketDestination, de_Bucket, de_Buckets, de_Checksum, de_ChecksumAlgorithmList, de_CommonPrefix, de_CommonPrefixList, de_Condition, de_ContinuationEvent, de_CopyObjectResult, de_CopyPartResult, de_CORSRule, de_CORSRules, de_DefaultRetention, de_DeletedObject, de_DeletedObjects, de_DeleteMarkerEntry, de_DeleteMarkerReplication, de_DeleteMarkers, de_Destination, de_EncryptionConfiguration, de_EndEvent, de__Error, de_ErrorDocument, de_Errors, de_EventBridgeConfiguration, de_EventList, de_ExistingObjectReplication, de_ExposeHeaders, de_FilterRule, de_FilterRuleList, de_GetObjectAttributesParts, de_Grant, de_Grantee, de_Grants, de_IndexDocument, de_Initiator, de_IntelligentTieringAndOperator, de_IntelligentTieringConfiguration, de_IntelligentTieringConfigurationList, de_IntelligentTieringFilter, de_InventoryConfiguration, de_InventoryConfigurationList, de_InventoryDestination, de_InventoryEncryption, de_InventoryFilter, de_InventoryOptionalFields, de_InventoryS3BucketDestination, de_InventorySchedule, de_LambdaFunctionConfiguration, de_LambdaFunctionConfigurationList, de_LifecycleExpiration, de_LifecycleRule, de_LifecycleRuleAndOperator, de_LifecycleRuleFilter, de_LifecycleRules, de_LoggingEnabled, de_Metrics, de_MetricsAndOperator, de_MetricsConfiguration, de_MetricsConfigurationList, de_MetricsFilter, de_MultipartUpload, de_MultipartUploadList, de_NoncurrentVersionExpiration, de_NoncurrentVersionTransition, de_NoncurrentVersionTransitionList, de_NotificationConfigurationFilter, de__Object, de_ObjectList, de_ObjectLockConfiguration, de_ObjectLockLegalHold, de_ObjectLockRetention, de_ObjectLockRule, de_ObjectPart, de_ObjectVersion, de_ObjectVersionList, de_Owner, de_OwnershipControls, de_OwnershipControlsRule, de_OwnershipControlsRules, de_Part, de_Parts, de_PartsList, de_PolicyStatus, de_Progress, de_PublicAccessBlockConfiguration, de_QueueConfiguration, de_QueueConfigurationList, de_Redirect, de_RedirectAllRequestsTo, de_ReplicaModifications, de_ReplicationConfiguration, de_ReplicationRule, de_ReplicationRuleAndOperator, de_ReplicationRuleFilter, de_ReplicationRules, de_ReplicationTime, de_ReplicationTimeValue, de_RestoreStatus, de_RoutingRule, de_RoutingRules, de_S3KeyFilter, de_ServerSideEncryptionByDefault, de_ServerSideEncryptionConfiguration, de_ServerSideEncryptionRule, de_ServerSideEncryptionRules, de_SourceSelectionCriteria, de_SSEKMS, de_SseKmsEncryptedObjects, de_SSES3, de_Stats, de_StorageClassAnalysis, de_StorageClassAnalysisDataExport, de_Tag, de_TagSet, de_TargetGrant, de_TargetGrants, de_Tiering, de_TieringList, de_TopicConfiguration, de_TopicConfigurationList, de_Transition, de_TransitionList, deserializeMetadata5, collectBodyString5, isSerializableHeaderValue2, parseBody4, parseErrorBody4, loadRestXmlErrorCode;
var init_Aws_restXml = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js"() {
    "use strict";
    init_dist_es63();
    init_dist_es2();
    init_dist_es16();
    import_fast_xml_parser2 = __toESM(require_fxp());
    init_models_03();
    init_models_1();
    init_S3ServiceException();
    se_AbortMultipartUploadCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "AbortMultipartUpload"],
        uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_CompleteMultipartUploadCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "CompleteMultipartUpload"],
        uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.MultipartUpload !== void 0) {
        body = se_CompletedMultipartUpload(input.MultipartUpload, context);
      }
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.withName("CompleteMultipartUpload");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_CopyObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, __spreadValues({
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue2(input.CopySourceIfModifiedSince),
          () => dateToUtcString(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue2(input.CopySourceIfUnmodifiedSince),
          () => dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
        ],
        expires: [() => isSerializableHeaderValue2(input.Expires), () => dateToUtcString(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-metadata-directive": input.MetadataDirective,
        "x-amz-tagging-directive": input.TaggingDirective,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue2(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue2(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      }, input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})));
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "CopyObject"]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_CreateBucketCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-bucket-object-lock-enabled": [
          () => isSerializableHeaderValue2(input.ObjectLockEnabledForBucket),
          () => input.ObjectLockEnabledForBucket.toString()
        ],
        "x-amz-object-ownership": input.ObjectOwnership
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      if (input.CreateBucketConfiguration !== void 0) {
        body = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
      }
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_CreateMultipartUploadCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, __spreadValues({
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        expires: [() => isSerializableHeaderValue2(input.Expires), () => dateToUtcString(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue2(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue2(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm
      }, input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})));
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        uploads: [, ""],
        "x-id": [, "CreateMultipartUpload"]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_DeleteBucketAnalyticsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketCorsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketEncryptionCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketIntelligentTieringConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {};
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketInventoryConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketLifecycleCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketMetricsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketOwnershipControlsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketPolicyCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketReplicationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteBucketWebsiteCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue2(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "DeleteObject"],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteObjectsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue2(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        delete: [, ""],
        "x-id": [, "DeleteObjects"]
      });
      let body;
      if (input.Delete !== void 0) {
        body = se_Delete(input.Delete, context);
      }
      let contents;
      if (input.Delete !== void 0) {
        contents = se_Delete(input.Delete, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeleteObjectTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_DeletePublicAccessBlockCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketAccelerateConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        accelerate: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketAclCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        acl: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketAnalyticsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        "x-id": [, "GetBucketAnalyticsConfiguration"],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketCorsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketEncryptionCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketIntelligentTieringConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {};
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "GetBucketIntelligentTieringConfiguration"],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketInventoryConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        "x-id": [, "GetBucketInventoryConfiguration"],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketLifecycleConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketLocationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        location: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketLoggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        logging: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketMetricsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        "x-id": [, "GetBucketMetricsConfiguration"],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketNotificationConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        notification: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketOwnershipControlsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketPolicyCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketPolicyStatusCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policyStatus: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketReplicationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketRequestPaymentCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        requestPayment: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketVersioningCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versioning: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetBucketWebsiteCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue2(input.IfModifiedSince),
          () => dateToUtcString(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue2(input.IfUnmodifiedSince),
          () => dateToUtcString(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "GetObject"],
        "response-cache-control": [, input.ResponseCacheControl],
        "response-content-disposition": [, input.ResponseContentDisposition],
        "response-content-encoding": [, input.ResponseContentEncoding],
        "response-content-language": [, input.ResponseContentLanguage],
        "response-content-type": [, input.ResponseContentType],
        "response-expires": [
          () => input.ResponseExpires !== void 0,
          () => dateToUtcString(input.ResponseExpires).toString()
        ],
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectAclCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectAttributesCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-max-parts": [() => isSerializableHeaderValue2(input.MaxParts), () => input.MaxParts.toString()],
        "x-amz-part-number-marker": input.PartNumberMarker,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-object-attributes": [
          () => isSerializableHeaderValue2(input.ObjectAttributes),
          () => (input.ObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        attributes: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectLegalHoldCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectLockConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "object-lock": [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectRetentionCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetObjectTorrentCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        torrent: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_GetPublicAccessBlockCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_HeadBucketCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_HeadObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue2(input.IfModifiedSince),
          () => dateToUtcString(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue2(input.IfUnmodifiedSince),
          () => dateToUtcString(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListBucketAnalyticsConfigurationsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        "x-id": [, "ListBucketAnalyticsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListBucketIntelligentTieringConfigurationsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {};
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "ListBucketIntelligentTieringConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListBucketInventoryConfigurationsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        "x-id": [, "ListBucketInventoryConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListBucketMetricsConfigurationsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        "x-id": [, "ListBucketMetricsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListBucketsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      let body;
      body = "";
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        body
      });
    });
    se_ListMultipartUploadsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        uploads: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-uploads": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],
        prefix: [, input.Prefix],
        "upload-id-marker": [, input.UploadIdMarker]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListObjectsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue2(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        marker: [, input.Marker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListObjectsV2Command = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue2(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "list-type": [, "2"],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "continuation-token": [, input.ContinuationToken],
        "fetch-owner": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],
        "start-after": [, input.StartAfter]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListObjectVersionsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-optional-object-attributes": [
          () => isSerializableHeaderValue2(input.OptionalObjectAttributes),
          () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versions: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "version-id-marker": [, input.VersionIdMarker]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_ListPartsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "ListParts"],
        "max-parts": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],
        "part-number-marker": [, input.PartNumberMarker],
        uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketAccelerateConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        accelerate: [, ""]
      });
      let body;
      if (input.AccelerateConfiguration !== void 0) {
        body = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
      }
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketAclCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        acl: [, ""]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = se_AccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketAnalyticsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      if (input.AnalyticsConfiguration !== void 0) {
        body = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
      }
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketCorsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      if (input.CORSConfiguration !== void 0) {
        body = se_CORSConfiguration(input.CORSConfiguration, context);
      }
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketEncryptionCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      }
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketIntelligentTieringConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      if (input.IntelligentTieringConfiguration !== void 0) {
        body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      }
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketInventoryConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      if (input.InventoryConfiguration !== void 0) {
        body = se_InventoryConfiguration(input.InventoryConfiguration, context);
      }
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketLifecycleConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      if (input.LifecycleConfiguration !== void 0) {
        body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      }
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.withName("LifecycleConfiguration");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketLoggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        logging: [, ""]
      });
      let body;
      if (input.BucketLoggingStatus !== void 0) {
        body = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
      }
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketMetricsConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        id: [, expectNonNull(input.Id, `Id`)]
      });
      let body;
      if (input.MetricsConfiguration !== void 0) {
        body = se_MetricsConfiguration(input.MetricsConfiguration, context);
      }
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketNotificationConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-skip-destination-validation": [
          () => isSerializableHeaderValue2(input.SkipDestinationValidation),
          () => input.SkipDestinationValidation.toString()
        ]
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        notification: [, ""]
      });
      let body;
      if (input.NotificationConfiguration !== void 0) {
        body = se_NotificationConfiguration(input.NotificationConfiguration, context);
      }
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketOwnershipControlsCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      if (input.OwnershipControls !== void 0) {
        body = se_OwnershipControls(input.OwnershipControls, context);
      }
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketPolicyCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "text/plain",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-confirm-remove-self-bucket-access": [
          () => isSerializableHeaderValue2(input.ConfirmRemoveSelfBucketAccess),
          () => input.ConfirmRemoveSelfBucketAccess.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      if (input.Policy !== void 0) {
        body = input.Policy;
      }
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketReplicationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-bucket-object-lock-token": input.Token,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      if (input.ReplicationConfiguration !== void 0) {
        body = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
      }
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketRequestPaymentCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        requestPayment: [, ""]
      });
      let body;
      if (input.RequestPaymentConfiguration !== void 0) {
        body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      }
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = se_Tagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketVersioningCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-mfa": input.MFA,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versioning: [, ""]
      });
      let body;
      if (input.VersioningConfiguration !== void 0) {
        body = se_VersioningConfiguration(input.VersioningConfiguration, context);
      }
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutBucketWebsiteCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      if (input.WebsiteConfiguration !== void 0) {
        body = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
      }
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, __spreadValues({
        "content-type": input.ContentType || "application/octet-stream",
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue2(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        expires: [() => isSerializableHeaderValue2(input.Expires), () => dateToUtcString(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue2(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue2(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      }, input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})));
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "PutObject"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectAclCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = se_AccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectLegalHoldCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.LegalHold !== void 0) {
        body = se_ObjectLockLegalHold(input.LegalHold, context);
      }
      let contents;
      if (input.LegalHold !== void 0) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.withName("LegalHold");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectLockConfigurationCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bucket-object-lock-token": input.Token,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "object-lock": [, ""]
      });
      let body;
      if (input.ObjectLockConfiguration !== void 0) {
        body = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
      }
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectRetentionCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue2(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Retention !== void 0) {
        body = se_ObjectLockRetention(input.Retention, context);
      }
      let contents;
      if (input.Retention !== void 0) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.withName("Retention");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutObjectTaggingCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = se_Tagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_PutPublicAccessBlockCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      }
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_RestoreObjectCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        restore: [, ""],
        "x-id": [, "RestoreObject"],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.RestoreRequest !== void 0) {
        body = se_RestoreRequest(input.RestoreRequest, context);
      }
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_SelectObjectContentCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/xml",
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        select: [, ""],
        "select-type": [, "2"],
        "x-id": [, "SelectObjectContent"]
      });
      let body;
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      const bodyNode = new XmlNode("SelectObjectContentRequest");
      bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      if (input.Expression !== void 0) {
        const node = XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType !== void 0) {
        const node = XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.InputSerialization !== void 0) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization !== void 0) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.RequestProgress !== void 0) {
        const node = se_RequestProgress(input.RequestProgress, context).withName("RequestProgress");
        bodyNode.addChildNode(node);
      }
      if (input.ScanRange !== void 0) {
        const node = se_ScanRange(input.ScanRange, context).withName("ScanRange");
        bodyNode.addChildNode(node);
      }
      body += bodyNode.toString();
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_UploadPartCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "content-type": "application/octet-stream",
        "content-length": [() => isSerializableHeaderValue2(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "UploadPart"],
        partNumber: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_UploadPartCopyCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, {
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue2(input.CopySourceIfModifiedSince),
          () => dateToUtcString(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue2(input.CopySourceIfUnmodifiedSince),
          () => dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()
        ],
        "x-amz-copy-source-range": input.CopySourceRange,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      });
      let resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath2 = resolvedPath(resolvedPath2, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "UploadPartCopy"],
        partNumber: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
      });
      let body;
      return new HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    se_WriteGetObjectResponseCommand = (input, context) => __async(void 0, null, function* () {
      const { hostname, protocol = "https", port, path: basePath } = yield context.endpoint();
      const headers = map({}, isSerializableHeaderValue2, __spreadValues({
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        "x-amz-request-route": input.RequestRoute,
        "x-amz-request-token": input.RequestToken,
        "x-amz-fwd-status": [() => isSerializableHeaderValue2(input.StatusCode), () => input.StatusCode.toString()],
        "x-amz-fwd-error-code": input.ErrorCode,
        "x-amz-fwd-error-message": input.ErrorMessage,
        "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
        "x-amz-fwd-header-cache-control": input.CacheControl,
        "x-amz-fwd-header-content-disposition": input.ContentDisposition,
        "x-amz-fwd-header-content-encoding": input.ContentEncoding,
        "x-amz-fwd-header-content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue2(input.ContentLength), () => input.ContentLength.toString()],
        "x-amz-fwd-header-content-range": input.ContentRange,
        "x-amz-fwd-header-content-type": input.ContentType,
        "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-fwd-header-x-amz-delete-marker": [
          () => isSerializableHeaderValue2(input.DeleteMarker),
          () => input.DeleteMarker.toString()
        ],
        "x-amz-fwd-header-etag": input.ETag,
        "x-amz-fwd-header-expires": [
          () => isSerializableHeaderValue2(input.Expires),
          () => dateToUtcString(input.Expires).toString()
        ],
        "x-amz-fwd-header-x-amz-expiration": input.Expiration,
        "x-amz-fwd-header-last-modified": [
          () => isSerializableHeaderValue2(input.LastModified),
          () => dateToUtcString(input.LastModified).toString()
        ],
        "x-amz-fwd-header-x-amz-missing-meta": [
          () => isSerializableHeaderValue2(input.MissingMeta),
          () => input.MissingMeta.toString()
        ],
        "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue2(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-fwd-header-x-amz-mp-parts-count": [
          () => isSerializableHeaderValue2(input.PartsCount),
          () => input.PartsCount.toString()
        ],
        "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
        "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
        "x-amz-fwd-header-x-amz-restore": input.Restore,
        "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
        "x-amz-fwd-header-x-amz-tagging-count": [
          () => isSerializableHeaderValue2(input.TagCount),
          () => input.TagCount.toString()
        ],
        "x-amz-fwd-header-x-amz-version-id": input.VersionId,
        "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue2(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ]
      }, input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})));
      const resolvedPath2 = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/WriteGetObjectResponse`;
      const query = map({
        "x-id": [, "WriteGetObjectResponse"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = yield context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!isValidHostname(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath2,
        query,
        body
      });
    });
    de_AbortMultipartUploadCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_AbortMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_AbortMultipartUploadCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw yield de_NoSuchUploadRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_CompleteMultipartUploadCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CompleteMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = expectString(data["Bucket"]);
      }
      if (data["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(data["ChecksumCRC32"]);
      }
      if (data["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(data["ChecksumCRC32C"]);
      }
      if (data["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(data["ChecksumSHA1"]);
      }
      if (data["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(data["ChecksumSHA256"]);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = expectString(data["ETag"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = expectString(data["Key"]);
      }
      if (data["Location"] !== void 0) {
        contents.Location = expectString(data["Location"]);
      }
      return contents;
    });
    de_CompleteMultipartUploadCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_CopyObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CopyObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.CopyObjectResult = de_CopyObjectResult(data, context);
      return contents;
    });
    de_CopyObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw yield de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_CreateBucketCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        Location: [, output.headers["location"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_CreateBucketCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw yield de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw yield de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_CreateMultipartUploadCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = expectString(data["Bucket"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = expectString(data["Key"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = expectString(data["UploadId"]);
      }
      return contents;
    });
    de_CreateMultipartUploadCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketAnalyticsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketAnalyticsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketCorsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketCorsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketEncryptionCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketEncryptionCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketIntelligentTieringConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketIntelligentTieringConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketInventoryConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketInventoryConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketLifecycleCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketLifecycleCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketLifecycleCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketMetricsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketMetricsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketOwnershipControlsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketOwnershipControlsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketPolicyCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketPolicyCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketReplicationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketReplicationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteBucketWebsiteCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteBucketWebsiteCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => parseBoolean(output.headers["x-amz-delete-marker"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteObjectsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteObjectsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.Deleted === "") {
        contents.Deleted = [];
      } else if (data["Deleted"] !== void 0) {
        contents.Deleted = de_DeletedObjects(getArrayIfSingleItem(data["Deleted"]), context);
      }
      if (data.Error === "") {
        contents.Errors = [];
      } else if (data["Error"] !== void 0) {
        contents.Errors = de_Errors(getArrayIfSingleItem(data["Error"]), context);
      }
      return contents;
    });
    de_DeleteObjectsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeleteObjectTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeleteObjectTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_DeletePublicAccessBlockCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeletePublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_DeletePublicAccessBlockCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketAccelerateConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Status"] !== void 0) {
        contents.Status = expectString(data["Status"]);
      }
      return contents;
    });
    de_GetBucketAccelerateConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketAclCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = de_Grants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    });
    de_GetBucketAclCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketAnalyticsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
      return contents;
    });
    de_GetBucketAnalyticsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketCorsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents.CORSRules = [];
      } else if (data["CORSRule"] !== void 0) {
        contents.CORSRules = de_CORSRules(getArrayIfSingleItem(data["CORSRule"]), context);
      }
      return contents;
    });
    de_GetBucketCorsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketEncryptionCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
      return contents;
    });
    de_GetBucketEncryptionCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketIntelligentTieringConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
      return contents;
    });
    de_GetBucketIntelligentTieringConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketInventoryConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
      return contents;
    });
    de_GetBucketInventoryConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketLifecycleConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.Rule === "") {
        contents.Rules = [];
      } else if (data["Rule"] !== void 0) {
        contents.Rules = de_LifecycleRules(getArrayIfSingleItem(data["Rule"]), context);
      }
      return contents;
    });
    de_GetBucketLifecycleConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketLocationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLocationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["LocationConstraint"] !== void 0) {
        contents.LocationConstraint = expectString(data["LocationConstraint"]);
      }
      return contents;
    });
    de_GetBucketLocationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketLoggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketLoggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["LoggingEnabled"] !== void 0) {
        contents.LoggingEnabled = de_LoggingEnabled(data["LoggingEnabled"], context);
      }
      return contents;
    });
    de_GetBucketLoggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketMetricsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
      return contents;
    });
    de_GetBucketMetricsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketNotificationConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["EventBridgeConfiguration"] !== void 0) {
        contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data["EventBridgeConfiguration"], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents.LambdaFunctionConfigurations = [];
      } else if (data["CloudFunctionConfiguration"] !== void 0) {
        contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList(getArrayIfSingleItem(data["CloudFunctionConfiguration"]), context);
      }
      if (data.QueueConfiguration === "") {
        contents.QueueConfigurations = [];
      } else if (data["QueueConfiguration"] !== void 0) {
        contents.QueueConfigurations = de_QueueConfigurationList(getArrayIfSingleItem(data["QueueConfiguration"]), context);
      }
      if (data.TopicConfiguration === "") {
        contents.TopicConfigurations = [];
      } else if (data["TopicConfiguration"] !== void 0) {
        contents.TopicConfigurations = de_TopicConfigurationList(getArrayIfSingleItem(data["TopicConfiguration"]), context);
      }
      return contents;
    });
    de_GetBucketNotificationConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketOwnershipControlsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.OwnershipControls = de_OwnershipControls(data, context);
      return contents;
    });
    de_GetBucketOwnershipControlsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketPolicyCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = yield collectBodyString5(output.body, context);
      contents.Policy = expectString(data);
      return contents;
    });
    de_GetBucketPolicyCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketPolicyStatusCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketPolicyStatusCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.PolicyStatus = de_PolicyStatus(data, context);
      return contents;
    });
    de_GetBucketPolicyStatusCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketReplicationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
      return contents;
    });
    de_GetBucketReplicationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketRequestPaymentCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketRequestPaymentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Payer"] !== void 0) {
        contents.Payer = expectString(data["Payer"]);
      }
      return contents;
    });
    de_GetBucketRequestPaymentCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = de_TagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
      }
      return contents;
    });
    de_GetBucketTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketVersioningCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketVersioningCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["MfaDelete"] !== void 0) {
        contents.MFADelete = expectString(data["MfaDelete"]);
      }
      if (data["Status"] !== void 0) {
        contents.Status = expectString(data["Status"]);
      }
      return contents;
    });
    de_GetBucketVersioningCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetBucketWebsiteCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["ErrorDocument"] !== void 0) {
        contents.ErrorDocument = de_ErrorDocument(data["ErrorDocument"], context);
      }
      if (data["IndexDocument"] !== void 0) {
        contents.IndexDocument = de_IndexDocument(data["IndexDocument"], context);
      }
      if (data["RedirectAllRequestsTo"] !== void 0) {
        contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
      }
      if (data.RoutingRules === "") {
        contents.RoutingRules = [];
      } else if (data["RoutingRules"] !== void 0 && data["RoutingRules"]["RoutingRule"] !== void 0) {
        contents.RoutingRules = de_RoutingRules(getArrayIfSingleItem(data["RoutingRules"]["RoutingRule"]), context);
      }
      return contents;
    });
    de_GetBucketWebsiteCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => parseBoolean(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => strictParseLong(output.headers["content-length"])
        ],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => strictParseInt32(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentRange: [, output.headers["content-range"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => strictParseInt32(output.headers["x-amz-mp-parts-count"])
        ],
        TagCount: [
          () => void 0 !== output.headers["x-amz-tagging-count"],
          () => strictParseInt32(output.headers["x-amz-tagging-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    });
    de_GetObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw yield de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw yield de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_GetObjectAclCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = de_Grants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    });
    de_GetObjectAclCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw yield de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_GetObjectAttributesCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectAttributesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => parseBoolean(output.headers["x-amz-delete-marker"])
        ],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Checksum"] !== void 0) {
        contents.Checksum = de_Checksum(data["Checksum"], context);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = expectString(data["ETag"]);
      }
      if (data["ObjectParts"] !== void 0) {
        contents.ObjectParts = de_GetObjectAttributesParts(data["ObjectParts"], context);
      }
      if (data["ObjectSize"] !== void 0) {
        contents.ObjectSize = strictParseLong(data["ObjectSize"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(data["StorageClass"]);
      }
      return contents;
    });
    de_GetObjectAttributesCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw yield de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_GetObjectLegalHoldCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectLegalHoldCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.LegalHold = de_ObjectLockLegalHold(data, context);
      return contents;
    });
    de_GetObjectLegalHoldCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetObjectLockConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectLockConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
      return contents;
    });
    de_GetObjectLockConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetObjectRetentionCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectRetentionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.Retention = de_ObjectLockRetention(data, context);
      return contents;
    });
    de_GetObjectRetentionCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetObjectTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = de_TagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]), context);
      }
      return contents;
    });
    de_GetObjectTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetObjectTorrentCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetObjectTorrentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    });
    de_GetObjectTorrentCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_GetPublicAccessBlockCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
      return contents;
    });
    de_GetPublicAccessBlockCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_HeadBucketCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_HeadBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_HeadBucketCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw yield de_NotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_HeadObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_HeadObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => parseBoolean(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        ArchiveStatus: [, output.headers["x-amz-archive-status"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => strictParseLong(output.headers["content-length"])
        ],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ETag: [, output.headers["etag"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => strictParseInt32(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => strictParseInt32(output.headers["x-amz-mp-parts-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_HeadObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw yield de_NotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_ListBucketAnalyticsConfigurationsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketAnalyticsConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents.AnalyticsConfigurationList = [];
      } else if (data["AnalyticsConfiguration"] !== void 0) {
        contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList(getArrayIfSingleItem(data["AnalyticsConfiguration"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = expectString(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
      }
      return contents;
    });
    de_ListBucketAnalyticsConfigurationsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListBucketIntelligentTieringConfigurationsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = expectString(data["ContinuationToken"]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents.IntelligentTieringConfigurationList = [];
      } else if (data["IntelligentTieringConfiguration"] !== void 0) {
        contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList(getArrayIfSingleItem(data["IntelligentTieringConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
      }
      return contents;
    });
    de_ListBucketIntelligentTieringConfigurationsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListBucketInventoryConfigurationsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketInventoryConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = expectString(data["ContinuationToken"]);
      }
      if (data.InventoryConfiguration === "") {
        contents.InventoryConfigurationList = [];
      } else if (data["InventoryConfiguration"] !== void 0) {
        contents.InventoryConfigurationList = de_InventoryConfigurationList(getArrayIfSingleItem(data["InventoryConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
      }
      return contents;
    });
    de_ListBucketInventoryConfigurationsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListBucketMetricsConfigurationsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketMetricsConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = expectString(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data.MetricsConfiguration === "") {
        contents.MetricsConfigurationList = [];
      } else if (data["MetricsConfiguration"] !== void 0) {
        contents.MetricsConfigurationList = de_MetricsConfigurationList(getArrayIfSingleItem(data["MetricsConfiguration"]), context);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
      }
      return contents;
    });
    de_ListBucketMetricsConfigurationsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListBucketsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBucketsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.Buckets === "") {
        contents.Buckets = [];
      } else if (data["Buckets"] !== void 0 && data["Buckets"]["Bucket"] !== void 0) {
        contents.Buckets = de_Buckets(getArrayIfSingleItem(data["Buckets"]["Bucket"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      return contents;
    });
    de_ListBucketsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListMultipartUploadsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMultipartUploadsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = expectString(data["Bucket"]);
      }
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = expectString(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = expectString(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = expectString(data["KeyMarker"]);
      }
      if (data["MaxUploads"] !== void 0) {
        contents.MaxUploads = strictParseInt32(data["MaxUploads"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
      }
      if (data["NextUploadIdMarker"] !== void 0) {
        contents.NextUploadIdMarker = expectString(data["NextUploadIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = expectString(data["Prefix"]);
      }
      if (data["UploadIdMarker"] !== void 0) {
        contents.UploadIdMarker = expectString(data["UploadIdMarker"]);
      }
      if (data.Upload === "") {
        contents.Uploads = [];
      } else if (data["Upload"] !== void 0) {
        contents.Uploads = de_MultipartUploadList(getArrayIfSingleItem(data["Upload"]), context);
      }
      return contents;
    });
    de_ListMultipartUploadsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListObjectsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = de_ObjectList(getArrayIfSingleItem(data["Contents"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = expectString(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = expectString(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["Marker"] !== void 0) {
        contents.Marker = expectString(data["Marker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = expectString(data["Name"]);
      }
      if (data["NextMarker"] !== void 0) {
        contents.NextMarker = expectString(data["NextMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = expectString(data["Prefix"]);
      }
      return contents;
    });
    de_ListObjectsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw yield de_NoSuchBucketRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_ListObjectsV2Command = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectsV2CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = de_ObjectList(getArrayIfSingleItem(data["Contents"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = expectString(data["ContinuationToken"]);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = expectString(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = expectString(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["KeyCount"] !== void 0) {
        contents.KeyCount = strictParseInt32(data["KeyCount"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = expectString(data["Name"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = expectString(data["Prefix"]);
      }
      if (data["StartAfter"] !== void 0) {
        contents.StartAfter = expectString(data["StartAfter"]);
      }
      return contents;
    });
    de_ListObjectsV2CommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw yield de_NoSuchBucketRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_ListObjectVersionsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListObjectVersionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]), context);
      }
      if (data.DeleteMarker === "") {
        contents.DeleteMarkers = [];
      } else if (data["DeleteMarker"] !== void 0) {
        contents.DeleteMarkers = de_DeleteMarkers(getArrayIfSingleItem(data["DeleteMarker"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = expectString(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = expectString(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = expectString(data["KeyMarker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = expectString(data["Name"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
      }
      if (data["NextVersionIdMarker"] !== void 0) {
        contents.NextVersionIdMarker = expectString(data["NextVersionIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = expectString(data["Prefix"]);
      }
      if (data["VersionIdMarker"] !== void 0) {
        contents.VersionIdMarker = expectString(data["VersionIdMarker"]);
      }
      if (data.Version === "") {
        contents.Versions = [];
      } else if (data["Version"] !== void 0) {
        contents.Versions = de_ObjectVersionList(getArrayIfSingleItem(data["Version"]), context);
      }
      return contents;
    });
    de_ListObjectVersionsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_ListPartsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListPartsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectNonNull(expectObject(yield parseBody4(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = expectString(data["Bucket"]);
      }
      if (data["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = expectString(data["ChecksumAlgorithm"]);
      }
      if (data["Initiator"] !== void 0) {
        contents.Initiator = de_Initiator(data["Initiator"], context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(data["IsTruncated"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = expectString(data["Key"]);
      }
      if (data["MaxParts"] !== void 0) {
        contents.MaxParts = strictParseInt32(data["MaxParts"]);
      }
      if (data["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = expectString(data["NextPartNumberMarker"]);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = de_Owner(data["Owner"], context);
      }
      if (data["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = expectString(data["PartNumberMarker"]);
      }
      if (data.Part === "") {
        contents.Parts = [];
      } else if (data["Part"] !== void 0) {
        contents.Parts = de_Parts(getArrayIfSingleItem(data["Part"]), context);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(data["StorageClass"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = expectString(data["UploadId"]);
      }
      return contents;
    });
    de_ListPartsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketAccelerateConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketAccelerateConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketAclCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketAclCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketAnalyticsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketAnalyticsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketCorsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketCorsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketEncryptionCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketEncryptionCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketIntelligentTieringConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketIntelligentTieringConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketInventoryConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketInventoryConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketLifecycleConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketLifecycleConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketLoggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketLoggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketLoggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketMetricsConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketMetricsConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketNotificationConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketNotificationConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketOwnershipControlsCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketOwnershipControlsCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketPolicyCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketPolicyCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketReplicationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketReplicationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketRequestPaymentCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketRequestPaymentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketRequestPaymentCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketVersioningCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketVersioningCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketVersioningCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutBucketWebsiteCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutBucketWebsiteCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutObjectAclCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectAclCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw yield de_NoSuchKeyRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_PutObjectLegalHoldCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectLegalHoldCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectLegalHoldCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutObjectLockConfigurationCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectLockConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectLockConfigurationCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutObjectRetentionCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectRetentionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectRetentionCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutObjectTaggingCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutObjectTaggingCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_PutPublicAccessBlockCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutPublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_PutPublicAccessBlockCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_RestoreObjectCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RestoreObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_RestoreObjectCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw yield de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    });
    de_SelectObjectContentCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_SelectObjectContentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      const data = output.body;
      contents.Payload = de_SelectObjectContentEventStream(data, context);
      return contents;
    });
    de_SelectObjectContentCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_UploadPartCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UploadPartCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_UploadPartCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_UploadPartCopyCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UploadPartCopyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output),
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = expectObject(yield parseBody4(output.body, context));
      contents.CopyPartResult = de_CopyPartResult(data, context);
      return contents;
    });
    de_UploadPartCopyCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    de_WriteGetObjectResponseCommand = (output, context) => __async(void 0, null, function* () {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_WriteGetObjectResponseCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata5(output)
      });
      yield collectBody(output.body, context);
      return contents;
    });
    de_WriteGetObjectResponseCommandError = (output, context) => __async(void 0, null, function* () {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: yield parseErrorBody4(output.body, context)
      });
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError5({
        output,
        parsedBody,
        errorCode
      });
    });
    throwDefaultError5 = withBaseException(S3ServiceException);
    de_BucketAlreadyExistsRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyExists(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_BucketAlreadyOwnedByYouRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyOwnedByYou(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_InvalidObjectStateRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      if (data["AccessTier"] !== void 0) {
        contents.AccessTier = expectString(data["AccessTier"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(data["StorageClass"]);
      }
      const exception = new InvalidObjectState(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_NoSuchBucketRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchBucket(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_NoSuchKeyRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchKey(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_NoSuchUploadRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NoSuchUpload(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_NotFoundRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new NotFound(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_ObjectAlreadyInActiveTierErrorRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new ObjectAlreadyInActiveTierError(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_ObjectNotInActiveTierErrorRes = (parsedOutput, context) => __async(void 0, null, function* () {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new ObjectNotInActiveTierError(__spreadValues({
        $metadata: deserializeMetadata5(parsedOutput)
      }, contents));
      return decorateServiceException(exception, parsedOutput.body);
    });
    de_SelectObjectContentEventStream = (output, context) => {
      return context.eventStreamMarshaller.deserialize(output, (event) => __async(void 0, null, function* () {
        if (event["Records"] != null) {
          return {
            Records: yield de_RecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: yield de_StatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: yield de_ProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: yield de_ContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: yield de_EndEvent_event(event["End"], context)
          };
        }
        return { $unknown: output };
      }));
    };
    de_ContinuationEvent_event = (output, context) => __async(void 0, null, function* () {
      const contents = {};
      const data = yield parseBody4(output.body, context);
      Object.assign(contents, de_ContinuationEvent(data, context));
      return contents;
    });
    de_EndEvent_event = (output, context) => __async(void 0, null, function* () {
      const contents = {};
      const data = yield parseBody4(output.body, context);
      Object.assign(contents, de_EndEvent(data, context));
      return contents;
    });
    de_ProgressEvent_event = (output, context) => __async(void 0, null, function* () {
      const contents = {};
      const data = yield parseBody4(output.body, context);
      contents.Details = de_Progress(data, context);
      return contents;
    });
    de_RecordsEvent_event = (output, context) => __async(void 0, null, function* () {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    });
    de_StatsEvent_event = (output, context) => __async(void 0, null, function* () {
      const contents = {};
      const data = yield parseBody4(output.body, context);
      contents.Details = de_Stats(data, context);
      return contents;
    });
    se_AbortIncompleteMultipartUpload = (input, context) => {
      const bodyNode = new XmlNode("AbortIncompleteMultipartUpload");
      if (input.DaysAfterInitiation != null) {
        const node = XmlNode.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AccelerateConfiguration = (input, context) => {
      const bodyNode = new XmlNode("AccelerateConfiguration");
      if (input.Status != null) {
        const node = XmlNode.of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AccessControlPolicy = (input, context) => {
      const bodyNode = new XmlNode("AccessControlPolicy");
      if (input.Grants != null) {
        const nodes = se_Grants(input.Grants, context);
        const containerNode = new XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Owner != null) {
        const node = se_Owner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AccessControlTranslation = (input, context) => {
      const bodyNode = new XmlNode("AccessControlTranslation");
      if (input.Owner != null) {
        const node = XmlNode.of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AllowedHeaders = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("AllowedHeader", entry);
        return node.withName("member");
      });
    };
    se_AllowedMethods = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("AllowedMethod", entry);
        return node.withName("member");
      });
    };
    se_AllowedOrigins = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("AllowedOrigin", entry);
        return node.withName("member");
      });
    };
    se_AnalyticsAndOperator = (input, context) => {
      const bodyNode = new XmlNode("AnalyticsAndOperator");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_AnalyticsConfiguration = (input, context) => {
      const bodyNode = new XmlNode("AnalyticsConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_AnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClassAnalysis != null) {
        const node = se_StorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AnalyticsExportDestination = (input, context) => {
      const bodyNode = new XmlNode("AnalyticsExportDestination");
      if (input.S3BucketDestination != null) {
        const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_AnalyticsFilter = (input, context) => {
      const bodyNode = new XmlNode("AnalyticsFilter");
      AnalyticsFilter.visit(input, {
        Prefix: (value) => {
          const node = XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag2(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_AnalyticsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    se_AnalyticsS3BucketDestination = (input, context) => {
      const bodyNode = new XmlNode("AnalyticsS3BucketDestination");
      if (input.Format != null) {
        const node = XmlNode.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.BucketAccountId != null) {
        const node = XmlNode.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_BucketLifecycleConfiguration = (input, context) => {
      const bodyNode = new XmlNode("BucketLifecycleConfiguration");
      if (input.Rules != null) {
        const nodes = se_LifecycleRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_BucketLoggingStatus = (input, context) => {
      const bodyNode = new XmlNode("BucketLoggingStatus");
      if (input.LoggingEnabled != null) {
        const node = se_LoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CompletedMultipartUpload = (input, context) => {
      const bodyNode = new XmlNode("CompletedMultipartUpload");
      if (input.Parts != null) {
        const nodes = se_CompletedPartList(input.Parts, context);
        nodes.map((node) => {
          node = node.withName("Part");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_CompletedPart = (input, context) => {
      const bodyNode = new XmlNode("CompletedPart");
      if (input.ETag != null) {
        const node = XmlNode.of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32 != null) {
        const node = XmlNode.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32C != null) {
        const node = XmlNode.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA1 != null) {
        const node = XmlNode.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA256 != null) {
        const node = XmlNode.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
      }
      if (input.PartNumber != null) {
        const node = XmlNode.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CompletedPartList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_CompletedPart(entry, context);
        return node.withName("member");
      });
    };
    se_Condition = (input, context) => {
      const bodyNode = new XmlNode("Condition");
      if (input.HttpErrorCodeReturnedEquals != null) {
        const node = XmlNode.of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals).withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
      }
      if (input.KeyPrefixEquals != null) {
        const node = XmlNode.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CORSConfiguration = (input, context) => {
      const bodyNode = new XmlNode("CORSConfiguration");
      if (input.CORSRules != null) {
        const nodes = se_CORSRules(input.CORSRules, context);
        nodes.map((node) => {
          node = node.withName("CORSRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_CORSRule = (input, context) => {
      const bodyNode = new XmlNode("CORSRule");
      if (input.ID != null) {
        const node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.AllowedHeaders != null) {
        const nodes = se_AllowedHeaders(input.AllowedHeaders, context);
        nodes.map((node) => {
          node = node.withName("AllowedHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedMethods != null) {
        const nodes = se_AllowedMethods(input.AllowedMethods, context);
        nodes.map((node) => {
          node = node.withName("AllowedMethod");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedOrigins != null) {
        const nodes = se_AllowedOrigins(input.AllowedOrigins, context);
        nodes.map((node) => {
          node = node.withName("AllowedOrigin");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ExposeHeaders != null) {
        const nodes = se_ExposeHeaders(input.ExposeHeaders, context);
        nodes.map((node) => {
          node = node.withName("ExposeHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.MaxAgeSeconds != null) {
        const node = XmlNode.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CORSRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_CORSRule(entry, context);
        return node.withName("member");
      });
    };
    se_CreateBucketConfiguration = (input, context) => {
      const bodyNode = new XmlNode("CreateBucketConfiguration");
      if (input.LocationConstraint != null) {
        const node = XmlNode.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CSVInput = (input, context) => {
      const bodyNode = new XmlNode("CSVInput");
      if (input.FileHeaderInfo != null) {
        const node = XmlNode.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
      }
      if (input.Comments != null) {
        const node = XmlNode.of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.AllowQuotedRecordDelimiter != null) {
        const node = XmlNode.of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter)).withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_CSVOutput = (input, context) => {
      const bodyNode = new XmlNode("CSVOutput");
      if (input.QuoteFields != null) {
        const node = XmlNode.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_DefaultRetention = (input, context) => {
      const bodyNode = new XmlNode("DefaultRetention");
      if (input.Mode != null) {
        const node = XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.Years != null) {
        const node = XmlNode.of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Delete = (input, context) => {
      const bodyNode = new XmlNode("Delete");
      if (input.Objects != null) {
        const nodes = se_ObjectIdentifierList(input.Objects, context);
        nodes.map((node) => {
          node = node.withName("Object");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Quiet != null) {
        const node = XmlNode.of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_DeleteMarkerReplication = (input, context) => {
      const bodyNode = new XmlNode("DeleteMarkerReplication");
      if (input.Status != null) {
        const node = XmlNode.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Destination = (input, context) => {
      const bodyNode = new XmlNode("Destination");
      if (input.Bucket != null) {
        const node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Account != null) {
        const node = XmlNode.of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlTranslation != null) {
        const node = se_AccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
      }
      if (input.EncryptionConfiguration != null) {
        const node = se_EncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicationTime != null) {
        const node = se_ReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
      }
      if (input.Metrics != null) {
        const node = se_Metrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Encryption = (input, context) => {
      const bodyNode = new XmlNode("Encryption");
      if (input.EncryptionType != null) {
        const node = XmlNode.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
      }
      if (input.KMSKeyId != null) {
        const node = XmlNode.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
      }
      if (input.KMSContext != null) {
        const node = XmlNode.of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_EncryptionConfiguration = (input, context) => {
      const bodyNode = new XmlNode("EncryptionConfiguration");
      if (input.ReplicaKmsKeyID != null) {
        const node = XmlNode.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ErrorDocument = (input, context) => {
      const bodyNode = new XmlNode("ErrorDocument");
      if (input.Key != null) {
        const node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_EventBridgeConfiguration = (input, context) => {
      const bodyNode = new XmlNode("EventBridgeConfiguration");
      return bodyNode;
    };
    se_EventList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("Event", entry);
        return node.withName("member");
      });
    };
    se_ExistingObjectReplication = (input, context) => {
      const bodyNode = new XmlNode("ExistingObjectReplication");
      if (input.Status != null) {
        const node = XmlNode.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ExposeHeaders = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("ExposeHeader", entry);
        return node.withName("member");
      });
    };
    se_FilterRule = (input, context) => {
      const bodyNode = new XmlNode("FilterRule");
      if (input.Name != null) {
        const node = XmlNode.of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = XmlNode.of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_FilterRuleList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_FilterRule(entry, context);
        return node.withName("member");
      });
    };
    se_GlacierJobParameters = (input, context) => {
      const bodyNode = new XmlNode("GlacierJobParameters");
      if (input.Tier != null) {
        const node = XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Grant = (input, context) => {
      const bodyNode = new XmlNode("Grant");
      if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = XmlNode.of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Grantee = (input, context) => {
      const bodyNode = new XmlNode("Grantee");
      if (input.DisplayName != null) {
        const node = XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.EmailAddress != null) {
        const node = XmlNode.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.URI != null) {
        const node = XmlNode.of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        bodyNode.addAttribute("xsi:type", input.Type);
      }
      return bodyNode;
    };
    se_Grants = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_Grant(entry, context);
        return node.withName("Grant");
      });
    };
    se_IndexDocument = (input, context) => {
      const bodyNode = new XmlNode("IndexDocument");
      if (input.Suffix != null) {
        const node = XmlNode.of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InputSerialization = (input, context) => {
      const bodyNode = new XmlNode("InputSerialization");
      if (input.CSV != null) {
        const node = se_CSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.CompressionType != null) {
        const node = XmlNode.of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = se_JSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      if (input.Parquet != null) {
        const node = se_ParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_IntelligentTieringAndOperator = (input, context) => {
      const bodyNode = new XmlNode("IntelligentTieringAndOperator");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_IntelligentTieringConfiguration = (input, context) => {
      const bodyNode = new XmlNode("IntelligentTieringConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_IntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = XmlNode.of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Tierings != null) {
        const nodes = se_TieringList(input.Tierings, context);
        nodes.map((node) => {
          node = node.withName("Tiering");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_IntelligentTieringFilter = (input, context) => {
      const bodyNode = new XmlNode("IntelligentTieringFilter");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tag != null) {
        const node = se_Tag2(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
      }
      if (input.And != null) {
        const node = se_IntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventoryConfiguration = (input, context) => {
      const bodyNode = new XmlNode("InventoryConfiguration");
      if (input.Destination != null) {
        const node = se_InventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.IsEnabled != null) {
        const node = XmlNode.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_InventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Id != null) {
        const node = XmlNode.of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.IncludedObjectVersions != null) {
        const node = XmlNode.of("InventoryIncludedObjectVersions", input.IncludedObjectVersions).withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
      }
      if (input.OptionalFields != null) {
        const nodes = se_InventoryOptionalFields(input.OptionalFields, context);
        const containerNode = new XmlNode("OptionalFields");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Schedule != null) {
        const node = se_InventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventoryDestination = (input, context) => {
      const bodyNode = new XmlNode("InventoryDestination");
      if (input.S3BucketDestination != null) {
        const node = se_InventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventoryEncryption = (input, context) => {
      const bodyNode = new XmlNode("InventoryEncryption");
      if (input.SSES3 != null) {
        const node = se_SSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
      }
      if (input.SSEKMS != null) {
        const node = se_SSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventoryFilter = (input, context) => {
      const bodyNode = new XmlNode("InventoryFilter");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventoryOptionalFields = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = XmlNode.of("InventoryOptionalField", entry);
        return node.withName("Field");
      });
    };
    se_InventoryS3BucketDestination = (input, context) => {
      const bodyNode = new XmlNode("InventoryS3BucketDestination");
      if (input.AccountId != null) {
        const node = XmlNode.of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Format != null) {
        const node = XmlNode.of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = se_InventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_InventorySchedule = (input, context) => {
      const bodyNode = new XmlNode("InventorySchedule");
      if (input.Frequency != null) {
        const node = XmlNode.of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_JSONInput = (input, context) => {
      const bodyNode = new XmlNode("JSONInput");
      if (input.Type != null) {
        const node = XmlNode.of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_JSONOutput = (input, context) => {
      const bodyNode = new XmlNode("JSONOutput");
      if (input.RecordDelimiter != null) {
        const node = XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_LambdaFunctionConfiguration = (input, context) => {
      const bodyNode = new XmlNode("LambdaFunctionConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.LambdaFunctionArn != null) {
        const node = XmlNode.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_LambdaFunctionConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_LambdaFunctionConfiguration(entry, context);
        return node.withName("member");
      });
    };
    se_LifecycleExpiration = (input, context) => {
      const bodyNode = new XmlNode("LifecycleExpiration");
      if (input.Date != null) {
        const node = XmlNode.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.ExpiredObjectDeleteMarker != null) {
        const node = XmlNode.of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker)).withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_LifecycleRule = (input, context) => {
      const bodyNode = new XmlNode("LifecycleRule");
      if (input.Expiration != null) {
        const node = se_LifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_LifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = XmlNode.of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Transitions != null) {
        const nodes = se_TransitionList(input.Transitions, context);
        nodes.map((node) => {
          node = node.withName("Transition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionTransitions != null) {
        const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map((node) => {
          node = node.withName("NoncurrentVersionTransition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionExpiration != null) {
        const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
      }
      if (input.AbortIncompleteMultipartUpload != null) {
        const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_LifecycleRuleAndOperator = (input, context) => {
      const bodyNode = new XmlNode("LifecycleRuleAndOperator");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ObjectSizeGreaterThan != null) {
        const node = XmlNode.of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan)).withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
      }
      if (input.ObjectSizeLessThan != null) {
        const node = XmlNode.of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan)).withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_LifecycleRuleFilter = (input, context) => {
      const bodyNode = new XmlNode("LifecycleRuleFilter");
      LifecycleRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag2(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: (value) => {
          const node = XmlNode.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
          bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: (value) => {
          const node = XmlNode.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_LifecycleRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    se_LifecycleRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_LifecycleRule(entry, context);
        return node.withName("member");
      });
    };
    se_LoggingEnabled = (input, context) => {
      const bodyNode = new XmlNode("LoggingEnabled");
      if (input.TargetBucket != null) {
        const node = XmlNode.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
      }
      if (input.TargetGrants != null) {
        const nodes = se_TargetGrants(input.TargetGrants, context);
        const containerNode = new XmlNode("TargetGrants");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.TargetPrefix != null) {
        const node = XmlNode.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_MetadataEntry = (input, context) => {
      const bodyNode = new XmlNode("MetadataEntry");
      if (input.Name != null) {
        const node = XmlNode.of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = XmlNode.of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Metrics = (input, context) => {
      const bodyNode = new XmlNode("Metrics");
      if (input.Status != null) {
        const node = XmlNode.of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.EventThreshold != null) {
        const node = se_ReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_MetricsAndOperator = (input, context) => {
      const bodyNode = new XmlNode("MetricsAndOperator");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AccessPointArn != null) {
        const node = XmlNode.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_MetricsConfiguration = (input, context) => {
      const bodyNode = new XmlNode("MetricsConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_MetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_MetricsFilter = (input, context) => {
      const bodyNode = new XmlNode("MetricsFilter");
      MetricsFilter.visit(input, {
        Prefix: (value) => {
          const node = XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag2(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        AccessPointArn: (value) => {
          const node = XmlNode.of("AccessPointArn", value).withName("AccessPointArn");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_MetricsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    se_NoncurrentVersionExpiration = (input, context) => {
      const bodyNode = new XmlNode("NoncurrentVersionExpiration");
      if (input.NoncurrentDays != null) {
        const node = XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_NoncurrentVersionTransition = (input, context) => {
      const bodyNode = new XmlNode("NoncurrentVersionTransition");
      if (input.NoncurrentDays != null) {
        const node = XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_NoncurrentVersionTransitionList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_NoncurrentVersionTransition(entry, context);
        return node.withName("member");
      });
    };
    se_NotificationConfiguration = (input, context) => {
      const bodyNode = new XmlNode("NotificationConfiguration");
      if (input.TopicConfigurations != null) {
        const nodes = se_TopicConfigurationList(input.TopicConfigurations, context);
        nodes.map((node) => {
          node = node.withName("TopicConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.QueueConfigurations != null) {
        const nodes = se_QueueConfigurationList(input.QueueConfigurations, context);
        nodes.map((node) => {
          node = node.withName("QueueConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.LambdaFunctionConfigurations != null) {
        const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map((node) => {
          node = node.withName("CloudFunctionConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.EventBridgeConfiguration != null) {
        const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration, context).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_NotificationConfigurationFilter = (input, context) => {
      const bodyNode = new XmlNode("NotificationConfigurationFilter");
      if (input.Key != null) {
        const node = se_S3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ObjectIdentifier = (input, context) => {
      const bodyNode = new XmlNode("ObjectIdentifier");
      if (input.Key != null) {
        const node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.VersionId != null) {
        const node = XmlNode.of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ObjectIdentifierList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_ObjectIdentifier(entry, context);
        return node.withName("member");
      });
    };
    se_ObjectLockConfiguration = (input, context) => {
      const bodyNode = new XmlNode("ObjectLockConfiguration");
      if (input.ObjectLockEnabled != null) {
        const node = XmlNode.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Rule != null) {
        const node = se_ObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ObjectLockLegalHold = (input, context) => {
      const bodyNode = new XmlNode("ObjectLockLegalHold");
      if (input.Status != null) {
        const node = XmlNode.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ObjectLockRetention = (input, context) => {
      const bodyNode = new XmlNode("ObjectLockRetention");
      if (input.Mode != null) {
        const node = XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.RetainUntilDate != null) {
        const node = XmlNode.of("Date", (input.RetainUntilDate.toISOString().split(".")[0] + "Z").toString()).withName("RetainUntilDate");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ObjectLockRule = (input, context) => {
      const bodyNode = new XmlNode("ObjectLockRule");
      if (input.DefaultRetention != null) {
        const node = se_DefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_OutputLocation = (input, context) => {
      const bodyNode = new XmlNode("OutputLocation");
      if (input.S3 != null) {
        const node = se_S3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_OutputSerialization = (input, context) => {
      const bodyNode = new XmlNode("OutputSerialization");
      if (input.CSV != null) {
        const node = se_CSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = se_JSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Owner = (input, context) => {
      const bodyNode = new XmlNode("Owner");
      if (input.DisplayName != null) {
        const node = XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_OwnershipControls = (input, context) => {
      const bodyNode = new XmlNode("OwnershipControls");
      if (input.Rules != null) {
        const nodes = se_OwnershipControlsRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_OwnershipControlsRule = (input, context) => {
      const bodyNode = new XmlNode("OwnershipControlsRule");
      if (input.ObjectOwnership != null) {
        const node = XmlNode.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_OwnershipControlsRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_OwnershipControlsRule(entry, context);
        return node.withName("member");
      });
    };
    se_ParquetInput = (input, context) => {
      const bodyNode = new XmlNode("ParquetInput");
      return bodyNode;
    };
    se_PublicAccessBlockConfiguration = (input, context) => {
      const bodyNode = new XmlNode("PublicAccessBlockConfiguration");
      if (input.BlockPublicAcls != null) {
        const node = XmlNode.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.IgnorePublicAcls != null) {
        const node = XmlNode.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.BlockPublicPolicy != null) {
        const node = XmlNode.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
      }
      if (input.RestrictPublicBuckets != null) {
        const node = XmlNode.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_QueueConfiguration = (input, context) => {
      const bodyNode = new XmlNode("QueueConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.QueueArn != null) {
        const node = XmlNode.of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_QueueConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_QueueConfiguration(entry, context);
        return node.withName("member");
      });
    };
    se_Redirect = (input, context) => {
      const bodyNode = new XmlNode("Redirect");
      if (input.HostName != null) {
        const node = XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.HttpRedirectCode != null) {
        const node = XmlNode.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyPrefixWith != null) {
        const node = XmlNode.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyWith != null) {
        const node = XmlNode.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RedirectAllRequestsTo = (input, context) => {
      const bodyNode = new XmlNode("RedirectAllRequestsTo");
      if (input.HostName != null) {
        const node = XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ReplicaModifications = (input, context) => {
      const bodyNode = new XmlNode("ReplicaModifications");
      if (input.Status != null) {
        const node = XmlNode.of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ReplicationConfiguration = (input, context) => {
      const bodyNode = new XmlNode("ReplicationConfiguration");
      if (input.Role != null) {
        const node = XmlNode.of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
      }
      if (input.Rules != null) {
        const nodes = se_ReplicationRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_ReplicationRule = (input, context) => {
      const bodyNode = new XmlNode("ReplicationRule");
      if (input.ID != null) {
        const node = XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Priority != null) {
        const node = XmlNode.of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = se_ReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = XmlNode.of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.SourceSelectionCriteria != null) {
        const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
      }
      if (input.ExistingObjectReplication != null) {
        const node = se_ExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = se_Destination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.DeleteMarkerReplication != null) {
        const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ReplicationRuleAndOperator = (input, context) => {
      const bodyNode = new XmlNode("ReplicationRuleAndOperator");
      if (input.Prefix != null) {
        const node = XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = se_TagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_ReplicationRuleFilter = (input, context) => {
      const bodyNode = new XmlNode("ReplicationRuleFilter");
      ReplicationRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = se_Tag2(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = se_ReplicationRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof XmlNode || value instanceof XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    se_ReplicationRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_ReplicationRule(entry, context);
        return node.withName("member");
      });
    };
    se_ReplicationTime = (input, context) => {
      const bodyNode = new XmlNode("ReplicationTime");
      if (input.Status != null) {
        const node = XmlNode.of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Time != null) {
        const node = se_ReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ReplicationTimeValue = (input, context) => {
      const bodyNode = new XmlNode("ReplicationTimeValue");
      if (input.Minutes != null) {
        const node = XmlNode.of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RequestPaymentConfiguration = (input, context) => {
      const bodyNode = new XmlNode("RequestPaymentConfiguration");
      if (input.Payer != null) {
        const node = XmlNode.of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RequestProgress = (input, context) => {
      const bodyNode = new XmlNode("RequestProgress");
      if (input.Enabled != null) {
        const node = XmlNode.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RestoreRequest = (input, context) => {
      const bodyNode = new XmlNode("RestoreRequest");
      if (input.Days != null) {
        const node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.GlacierJobParameters != null) {
        const node = se_GlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        const node = XmlNode.of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      if (input.Tier != null) {
        const node = XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      if (input.Description != null) {
        const node = XmlNode.of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
      }
      if (input.SelectParameters != null) {
        const node = se_SelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
      }
      if (input.OutputLocation != null) {
        const node = se_OutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RoutingRule = (input, context) => {
      const bodyNode = new XmlNode("RoutingRule");
      if (input.Condition != null) {
        const node = se_Condition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
      }
      if (input.Redirect != null) {
        const node = se_Redirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_RoutingRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_RoutingRule(entry, context);
        return node.withName("RoutingRule");
      });
    };
    se_S3KeyFilter = (input, context) => {
      const bodyNode = new XmlNode("S3KeyFilter");
      if (input.FilterRules != null) {
        const nodes = se_FilterRuleList(input.FilterRules, context);
        nodes.map((node) => {
          node = node.withName("FilterRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_S3Location = (input, context) => {
      const bodyNode = new XmlNode("S3Location");
      if (input.BucketName != null) {
        const node = XmlNode.of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = XmlNode.of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = se_Encryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      if (input.CannedACL != null) {
        const node = XmlNode.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlList != null) {
        const nodes = se_Grants(input.AccessControlList, context);
        const containerNode = new XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Tagging != null) {
        const node = se_Tagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
      }
      if (input.UserMetadata != null) {
        const nodes = se_UserMetadata(input.UserMetadata, context);
        const containerNode = new XmlNode("UserMetadata");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.StorageClass != null) {
        const node = XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ScanRange = (input, context) => {
      const bodyNode = new XmlNode("ScanRange");
      if (input.Start != null) {
        const node = XmlNode.of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
      }
      if (input.End != null) {
        const node = XmlNode.of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_SelectParameters = (input, context) => {
      const bodyNode = new XmlNode("SelectParameters");
      if (input.InputSerialization != null) {
        const node = se_InputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType != null) {
        const node = XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.Expression != null) {
        const node = XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization != null) {
        const node = se_OutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ServerSideEncryptionByDefault = (input, context) => {
      const bodyNode = new XmlNode("ServerSideEncryptionByDefault");
      if (input.SSEAlgorithm != null) {
        const node = XmlNode.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
      }
      if (input.KMSMasterKeyID != null) {
        const node = XmlNode.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ServerSideEncryptionConfiguration = (input, context) => {
      const bodyNode = new XmlNode("ServerSideEncryptionConfiguration");
      if (input.Rules != null) {
        const nodes = se_ServerSideEncryptionRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    se_ServerSideEncryptionRule = (input, context) => {
      const bodyNode = new XmlNode("ServerSideEncryptionRule");
      if (input.ApplyServerSideEncryptionByDefault != null) {
        const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
      }
      if (input.BucketKeyEnabled != null) {
        const node = XmlNode.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_ServerSideEncryptionRules = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_ServerSideEncryptionRule(entry, context);
        return node.withName("member");
      });
    };
    se_SourceSelectionCriteria = (input, context) => {
      const bodyNode = new XmlNode("SourceSelectionCriteria");
      if (input.SseKmsEncryptedObjects != null) {
        const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicaModifications != null) {
        const node = se_ReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_SSEKMS = (input, context) => {
      const bodyNode = new XmlNode("SSE-KMS");
      if (input.KeyId != null) {
        const node = XmlNode.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_SseKmsEncryptedObjects = (input, context) => {
      const bodyNode = new XmlNode("SseKmsEncryptedObjects");
      if (input.Status != null) {
        const node = XmlNode.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_SSES3 = (input, context) => {
      const bodyNode = new XmlNode("SSE-S3");
      return bodyNode;
    };
    se_StorageClassAnalysis = (input, context) => {
      const bodyNode = new XmlNode("StorageClassAnalysis");
      if (input.DataExport != null) {
        const node = se_StorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_StorageClassAnalysisDataExport = (input, context) => {
      const bodyNode = new XmlNode("StorageClassAnalysisDataExport");
      if (input.OutputSchemaVersion != null) {
        const node = XmlNode.of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion).withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = se_AnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Tag2 = (input, context) => {
      const bodyNode = new XmlNode("Tag");
      if (input.Key != null) {
        const node = XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = XmlNode.of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_Tagging = (input, context) => {
      const bodyNode = new XmlNode("Tagging");
      if (input.TagSet != null) {
        const nodes = se_TagSet(input.TagSet, context);
        const containerNode = new XmlNode("TagSet");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    se_TagSet = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_Tag2(entry, context);
        return node.withName("Tag");
      });
    };
    se_TargetGrant = (input, context) => {
      const bodyNode = new XmlNode("TargetGrant");
      if (input.Grantee != null) {
        const node = se_Grantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = XmlNode.of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_TargetGrants = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_TargetGrant(entry, context);
        return node.withName("Grant");
      });
    };
    se_Tiering = (input, context) => {
      const bodyNode = new XmlNode("Tiering");
      if (input.Days != null) {
        const node = XmlNode.of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.AccessTier != null) {
        const node = XmlNode.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_TieringList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_Tiering(entry, context);
        return node.withName("member");
      });
    };
    se_TopicConfiguration = (input, context) => {
      const bodyNode = new XmlNode("TopicConfiguration");
      if (input.Id != null) {
        const node = XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.TopicArn != null) {
        const node = XmlNode.of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = se_EventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = se_NotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_TopicConfigurationList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_TopicConfiguration(entry, context);
        return node.withName("member");
      });
    };
    se_Transition = (input, context) => {
      const bodyNode = new XmlNode("Transition");
      if (input.Date != null) {
        const node = XmlNode.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_TransitionList = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_Transition(entry, context);
        return node.withName("member");
      });
    };
    se_UserMetadata = (input, context) => {
      return input.filter((e5) => e5 != null).map((entry) => {
        const node = se_MetadataEntry(entry, context);
        return node.withName("MetadataEntry");
      });
    };
    se_VersioningConfiguration = (input, context) => {
      const bodyNode = new XmlNode("VersioningConfiguration");
      if (input.MFADelete != null) {
        const node = XmlNode.of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = XmlNode.of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    se_WebsiteConfiguration = (input, context) => {
      const bodyNode = new XmlNode("WebsiteConfiguration");
      if (input.ErrorDocument != null) {
        const node = se_ErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
      }
      if (input.IndexDocument != null) {
        const node = se_IndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
      }
      if (input.RedirectAllRequestsTo != null) {
        const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
      }
      if (input.RoutingRules != null) {
        const nodes = se_RoutingRules(input.RoutingRules, context);
        const containerNode = new XmlNode("RoutingRules");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    de_AbortIncompleteMultipartUpload = (output, context) => {
      const contents = {};
      if (output["DaysAfterInitiation"] !== void 0) {
        contents.DaysAfterInitiation = strictParseInt32(output["DaysAfterInitiation"]);
      }
      return contents;
    };
    de_AccessControlTranslation = (output, context) => {
      const contents = {};
      if (output["Owner"] !== void 0) {
        contents.Owner = expectString(output["Owner"]);
      }
      return contents;
    };
    de_AllowedHeaders = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AllowedMethods = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AllowedOrigins = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_AnalyticsAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]), context);
      }
      return contents;
    };
    de_AnalyticsConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_AnalyticsFilter(expectUnion(output["Filter"]), context);
      }
      if (output["StorageClassAnalysis"] !== void 0) {
        contents.StorageClassAnalysis = de_StorageClassAnalysis(output["StorageClassAnalysis"], context);
      }
      return contents;
    };
    de_AnalyticsConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_AnalyticsConfiguration(entry, context);
      });
    };
    de_AnalyticsExportDestination = (output, context) => {
      const contents = {};
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    de_AnalyticsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: expectString(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_AnalyticsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_AnalyticsS3BucketDestination = (output, context) => {
      const contents = {};
      if (output["Format"] !== void 0) {
        contents.Format = expectString(output["Format"]);
      }
      if (output["BucketAccountId"] !== void 0) {
        contents.BucketAccountId = expectString(output["BucketAccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = expectString(output["Bucket"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      return contents;
    };
    de_Bucket = (output, context) => {
      const contents = {};
      if (output["Name"] !== void 0) {
        contents.Name = expectString(output["Name"]);
      }
      if (output["CreationDate"] !== void 0) {
        contents.CreationDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["CreationDate"]));
      }
      return contents;
    };
    de_Buckets = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Bucket(entry, context);
      });
    };
    de_Checksum = (output, context) => {
      const contents = {};
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
      }
      return contents;
    };
    de_ChecksumAlgorithmList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_CommonPrefix = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      return contents;
    };
    de_CommonPrefixList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_CommonPrefix(entry, context);
      });
    };
    de_Condition = (output, context) => {
      const contents = {};
      if (output["HttpErrorCodeReturnedEquals"] !== void 0) {
        contents.HttpErrorCodeReturnedEquals = expectString(output["HttpErrorCodeReturnedEquals"]);
      }
      if (output["KeyPrefixEquals"] !== void 0) {
        contents.KeyPrefixEquals = expectString(output["KeyPrefixEquals"]);
      }
      return contents;
    };
    de_ContinuationEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    de_CopyObjectResult = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = expectString(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
      }
      return contents;
    };
    de_CopyPartResult = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = expectString(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
      }
      return contents;
    };
    de_CORSRule = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      if (output.AllowedHeader === "") {
        contents.AllowedHeaders = [];
      } else if (output["AllowedHeader"] !== void 0) {
        contents.AllowedHeaders = de_AllowedHeaders(getArrayIfSingleItem(output["AllowedHeader"]), context);
      }
      if (output.AllowedMethod === "") {
        contents.AllowedMethods = [];
      } else if (output["AllowedMethod"] !== void 0) {
        contents.AllowedMethods = de_AllowedMethods(getArrayIfSingleItem(output["AllowedMethod"]), context);
      }
      if (output.AllowedOrigin === "") {
        contents.AllowedOrigins = [];
      } else if (output["AllowedOrigin"] !== void 0) {
        contents.AllowedOrigins = de_AllowedOrigins(getArrayIfSingleItem(output["AllowedOrigin"]), context);
      }
      if (output.ExposeHeader === "") {
        contents.ExposeHeaders = [];
      } else if (output["ExposeHeader"] !== void 0) {
        contents.ExposeHeaders = de_ExposeHeaders(getArrayIfSingleItem(output["ExposeHeader"]), context);
      }
      if (output["MaxAgeSeconds"] !== void 0) {
        contents.MaxAgeSeconds = strictParseInt32(output["MaxAgeSeconds"]);
      }
      return contents;
    };
    de_CORSRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_CORSRule(entry, context);
      });
    };
    de_DefaultRetention = (output, context) => {
      const contents = {};
      if (output["Mode"] !== void 0) {
        contents.Mode = expectString(output["Mode"]);
      }
      if (output["Days"] !== void 0) {
        contents.Days = strictParseInt32(output["Days"]);
      }
      if (output["Years"] !== void 0) {
        contents.Years = strictParseInt32(output["Years"]);
      }
      return contents;
    };
    de_DeletedObject = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = expectString(output["VersionId"]);
      }
      if (output["DeleteMarker"] !== void 0) {
        contents.DeleteMarker = parseBoolean(output["DeleteMarker"]);
      }
      if (output["DeleteMarkerVersionId"] !== void 0) {
        contents.DeleteMarkerVersionId = expectString(output["DeleteMarkerVersionId"]);
      }
      return contents;
    };
    de_DeletedObjects = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_DeletedObject(entry, context);
      });
    };
    de_DeleteMarkerEntry = (output, context) => {
      const contents = {};
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = expectString(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = parseBoolean(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      return contents;
    };
    de_DeleteMarkerReplication = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      return contents;
    };
    de_DeleteMarkers = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_DeleteMarkerEntry(entry, context);
      });
    };
    de_Destination = (output, context) => {
      const contents = {};
      if (output["Bucket"] !== void 0) {
        contents.Bucket = expectString(output["Bucket"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = expectString(output["Account"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      if (output["AccessControlTranslation"] !== void 0) {
        contents.AccessControlTranslation = de_AccessControlTranslation(output["AccessControlTranslation"], context);
      }
      if (output["EncryptionConfiguration"] !== void 0) {
        contents.EncryptionConfiguration = de_EncryptionConfiguration(output["EncryptionConfiguration"], context);
      }
      if (output["ReplicationTime"] !== void 0) {
        contents.ReplicationTime = de_ReplicationTime(output["ReplicationTime"], context);
      }
      if (output["Metrics"] !== void 0) {
        contents.Metrics = de_Metrics(output["Metrics"], context);
      }
      return contents;
    };
    de_EncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output["ReplicaKmsKeyID"] !== void 0) {
        contents.ReplicaKmsKeyID = expectString(output["ReplicaKmsKeyID"]);
      }
      return contents;
    };
    de_EndEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    de__Error = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = expectString(output["VersionId"]);
      }
      if (output["Code"] !== void 0) {
        contents.Code = expectString(output["Code"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = expectString(output["Message"]);
      }
      return contents;
    };
    de_ErrorDocument = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      return contents;
    };
    de_Errors = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de__Error(entry, context);
      });
    };
    de_EventBridgeConfiguration = (output, context) => {
      const contents = {};
      return contents;
    };
    de_EventList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_ExistingObjectReplication = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      return contents;
    };
    de_ExposeHeaders = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_FilterRule = (output, context) => {
      const contents = {};
      if (output["Name"] !== void 0) {
        contents.Name = expectString(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = expectString(output["Value"]);
      }
      return contents;
    };
    de_FilterRuleList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_FilterRule(entry, context);
      });
    };
    de_GetObjectAttributesParts = (output, context) => {
      const contents = {};
      if (output["PartsCount"] !== void 0) {
        contents.TotalPartsCount = strictParseInt32(output["PartsCount"]);
      }
      if (output["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = expectString(output["PartNumberMarker"]);
      }
      if (output["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = expectString(output["NextPartNumberMarker"]);
      }
      if (output["MaxParts"] !== void 0) {
        contents.MaxParts = strictParseInt32(output["MaxParts"]);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = parseBoolean(output["IsTruncated"]);
      }
      if (output.Part === "") {
        contents.Parts = [];
      } else if (output["Part"] !== void 0) {
        contents.Parts = de_PartsList(getArrayIfSingleItem(output["Part"]), context);
      }
      return contents;
    };
    de_Grant = (output, context) => {
      const contents = {};
      if (output["Grantee"] !== void 0) {
        contents.Grantee = de_Grantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = expectString(output["Permission"]);
      }
      return contents;
    };
    de_Grantee = (output, context) => {
      const contents = {};
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = expectString(output["DisplayName"]);
      }
      if (output["EmailAddress"] !== void 0) {
        contents.EmailAddress = expectString(output["EmailAddress"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      if (output["URI"] !== void 0) {
        contents.URI = expectString(output["URI"]);
      }
      if (output["xsi:type"] !== void 0) {
        contents.Type = expectString(output["xsi:type"]);
      }
      return contents;
    };
    de_Grants = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Grant(entry, context);
      });
    };
    de_IndexDocument = (output, context) => {
      const contents = {};
      if (output["Suffix"] !== void 0) {
        contents.Suffix = expectString(output["Suffix"]);
      }
      return contents;
    };
    de_Initiator = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = expectString(output["DisplayName"]);
      }
      return contents;
    };
    de_IntelligentTieringAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]), context);
      }
      return contents;
    };
    de_IntelligentTieringConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_IntelligentTieringFilter(output["Filter"], context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      if (output.Tiering === "") {
        contents.Tierings = [];
      } else if (output["Tiering"] !== void 0) {
        contents.Tierings = de_TieringList(getArrayIfSingleItem(output["Tiering"]), context);
      }
      return contents;
    };
    de_IntelligentTieringConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_IntelligentTieringConfiguration(entry, context);
      });
    };
    de_IntelligentTieringFilter = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output["Tag"] !== void 0) {
        contents.Tag = de_Tag(output["Tag"], context);
      }
      if (output["And"] !== void 0) {
        contents.And = de_IntelligentTieringAndOperator(output["And"], context);
      }
      return contents;
    };
    de_InventoryConfiguration = (output, context) => {
      const contents = {};
      if (output["Destination"] !== void 0) {
        contents.Destination = de_InventoryDestination(output["Destination"], context);
      }
      if (output["IsEnabled"] !== void 0) {
        contents.IsEnabled = parseBoolean(output["IsEnabled"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_InventoryFilter(output["Filter"], context);
      }
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output["IncludedObjectVersions"] !== void 0) {
        contents.IncludedObjectVersions = expectString(output["IncludedObjectVersions"]);
      }
      if (output.OptionalFields === "") {
        contents.OptionalFields = [];
      } else if (output["OptionalFields"] !== void 0 && output["OptionalFields"]["Field"] !== void 0) {
        contents.OptionalFields = de_InventoryOptionalFields(getArrayIfSingleItem(output["OptionalFields"]["Field"]), context);
      }
      if (output["Schedule"] !== void 0) {
        contents.Schedule = de_InventorySchedule(output["Schedule"], context);
      }
      return contents;
    };
    de_InventoryConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_InventoryConfiguration(entry, context);
      });
    };
    de_InventoryDestination = (output, context) => {
      const contents = {};
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = de_InventoryS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    de_InventoryEncryption = (output, context) => {
      const contents = {};
      if (output["SSE-S3"] !== void 0) {
        contents.SSES3 = de_SSES3(output["SSE-S3"], context);
      }
      if (output["SSE-KMS"] !== void 0) {
        contents.SSEKMS = de_SSEKMS(output["SSE-KMS"], context);
      }
      return contents;
    };
    de_InventoryFilter = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      return contents;
    };
    de_InventoryOptionalFields = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return expectString(entry);
      });
    };
    de_InventoryS3BucketDestination = (output, context) => {
      const contents = {};
      if (output["AccountId"] !== void 0) {
        contents.AccountId = expectString(output["AccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = expectString(output["Bucket"]);
      }
      if (output["Format"] !== void 0) {
        contents.Format = expectString(output["Format"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output["Encryption"] !== void 0) {
        contents.Encryption = de_InventoryEncryption(output["Encryption"], context);
      }
      return contents;
    };
    de_InventorySchedule = (output, context) => {
      const contents = {};
      if (output["Frequency"] !== void 0) {
        contents.Frequency = expectString(output["Frequency"]);
      }
      return contents;
    };
    de_LambdaFunctionConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output["CloudFunction"] !== void 0) {
        contents.LambdaFunctionArn = expectString(output["CloudFunction"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    de_LambdaFunctionConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_LambdaFunctionConfiguration(entry, context);
      });
    };
    de_LifecycleExpiration = (output, context) => {
      const contents = {};
      if (output["Date"] !== void 0) {
        contents.Date = expectNonNull(parseRfc3339DateTimeWithOffset(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = strictParseInt32(output["Days"]);
      }
      if (output["ExpiredObjectDeleteMarker"] !== void 0) {
        contents.ExpiredObjectDeleteMarker = parseBoolean(output["ExpiredObjectDeleteMarker"]);
      }
      return contents;
    };
    de_LifecycleRule = (output, context) => {
      const contents = {};
      if (output["Expiration"] !== void 0) {
        contents.Expiration = de_LifecycleExpiration(output["Expiration"], context);
      }
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_LifecycleRuleFilter(expectUnion(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      if (output.Transition === "") {
        contents.Transitions = [];
      } else if (output["Transition"] !== void 0) {
        contents.Transitions = de_TransitionList(getArrayIfSingleItem(output["Transition"]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents.NoncurrentVersionTransitions = [];
      } else if (output["NoncurrentVersionTransition"] !== void 0) {
        contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList(getArrayIfSingleItem(output["NoncurrentVersionTransition"]), context);
      }
      if (output["NoncurrentVersionExpiration"] !== void 0) {
        contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
      }
      if (output["AbortIncompleteMultipartUpload"] !== void 0) {
        contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
      }
      return contents;
    };
    de_LifecycleRuleAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]), context);
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        contents.ObjectSizeGreaterThan = strictParseLong(output["ObjectSizeGreaterThan"]);
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        contents.ObjectSizeLessThan = strictParseLong(output["ObjectSizeLessThan"]);
      }
      return contents;
    };
    de_LifecycleRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: expectString(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        return {
          ObjectSizeGreaterThan: strictParseLong(output["ObjectSizeGreaterThan"])
        };
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        return {
          ObjectSizeLessThan: strictParseLong(output["ObjectSizeLessThan"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_LifecycleRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_LifecycleRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_LifecycleRule(entry, context);
      });
    };
    de_LoggingEnabled = (output, context) => {
      const contents = {};
      if (output["TargetBucket"] !== void 0) {
        contents.TargetBucket = expectString(output["TargetBucket"]);
      }
      if (output.TargetGrants === "") {
        contents.TargetGrants = [];
      } else if (output["TargetGrants"] !== void 0 && output["TargetGrants"]["Grant"] !== void 0) {
        contents.TargetGrants = de_TargetGrants(getArrayIfSingleItem(output["TargetGrants"]["Grant"]), context);
      }
      if (output["TargetPrefix"] !== void 0) {
        contents.TargetPrefix = expectString(output["TargetPrefix"]);
      }
      return contents;
    };
    de_Metrics = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      if (output["EventThreshold"] !== void 0) {
        contents.EventThreshold = de_ReplicationTimeValue(output["EventThreshold"], context);
      }
      return contents;
    };
    de_MetricsAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]), context);
      }
      if (output["AccessPointArn"] !== void 0) {
        contents.AccessPointArn = expectString(output["AccessPointArn"]);
      }
      return contents;
    };
    de_MetricsConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_MetricsFilter(expectUnion(output["Filter"]), context);
      }
      return contents;
    };
    de_MetricsConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_MetricsConfiguration(entry, context);
      });
    };
    de_MetricsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: expectString(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["AccessPointArn"] !== void 0) {
        return {
          AccessPointArn: expectString(output["AccessPointArn"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_MetricsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_MultipartUpload = (output, context) => {
      const contents = {};
      if (output["UploadId"] !== void 0) {
        contents.UploadId = expectString(output["UploadId"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["Initiated"] !== void 0) {
        contents.Initiated = expectNonNull(parseRfc3339DateTimeWithOffset(output["Initiated"]));
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["Initiator"] !== void 0) {
        contents.Initiator = de_Initiator(output["Initiator"], context);
      }
      if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = expectString(output["ChecksumAlgorithm"]);
      }
      return contents;
    };
    de_MultipartUploadList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_MultipartUpload(entry, context);
      });
    };
    de_NoncurrentVersionExpiration = (output, context) => {
      const contents = {};
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    de_NoncurrentVersionTransition = (output, context) => {
      const contents = {};
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    de_NoncurrentVersionTransitionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_NoncurrentVersionTransition(entry, context);
      });
    };
    de_NotificationConfigurationFilter = (output, context) => {
      const contents = {};
      if (output["S3Key"] !== void 0) {
        contents.Key = de_S3KeyFilter(output["S3Key"], context);
      }
      return contents;
    };
    de__Object = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = expectString(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = strictParseLong(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["RestoreStatus"] !== void 0) {
        contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"], context);
      }
      return contents;
    };
    de_ObjectList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de__Object(entry, context);
      });
    };
    de_ObjectLockConfiguration = (output, context) => {
      const contents = {};
      if (output["ObjectLockEnabled"] !== void 0) {
        contents.ObjectLockEnabled = expectString(output["ObjectLockEnabled"]);
      }
      if (output["Rule"] !== void 0) {
        contents.Rule = de_ObjectLockRule(output["Rule"], context);
      }
      return contents;
    };
    de_ObjectLockLegalHold = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      return contents;
    };
    de_ObjectLockRetention = (output, context) => {
      const contents = {};
      if (output["Mode"] !== void 0) {
        contents.Mode = expectString(output["Mode"]);
      }
      if (output["RetainUntilDate"] !== void 0) {
        contents.RetainUntilDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["RetainUntilDate"]));
      }
      return contents;
    };
    de_ObjectLockRule = (output, context) => {
      const contents = {};
      if (output["DefaultRetention"] !== void 0) {
        contents.DefaultRetention = de_DefaultRetention(output["DefaultRetention"], context);
      }
      return contents;
    };
    de_ObjectPart = (output, context) => {
      const contents = {};
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = strictParseInt32(output["PartNumber"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = strictParseLong(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
      }
      return contents;
    };
    de_ObjectVersion = (output, context) => {
      const contents = {};
      if (output["ETag"] !== void 0) {
        contents.ETag = expectString(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = strictParseLong(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = expectString(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = parseBoolean(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = de_Owner(output["Owner"], context);
      }
      if (output["RestoreStatus"] !== void 0) {
        contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"], context);
      }
      return contents;
    };
    de_ObjectVersionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ObjectVersion(entry, context);
      });
    };
    de_Owner = (output, context) => {
      const contents = {};
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = expectString(output["DisplayName"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      return contents;
    };
    de_OwnershipControls = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_OwnershipControlsRules(getArrayIfSingleItem(output["Rule"]), context);
      }
      return contents;
    };
    de_OwnershipControlsRule = (output, context) => {
      const contents = {};
      if (output["ObjectOwnership"] !== void 0) {
        contents.ObjectOwnership = expectString(output["ObjectOwnership"]);
      }
      return contents;
    };
    de_OwnershipControlsRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_OwnershipControlsRule(entry, context);
      });
    };
    de_Part = (output, context) => {
      const contents = {};
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = strictParseInt32(output["PartNumber"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = expectString(output["ETag"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = strictParseLong(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
      }
      return contents;
    };
    de_Parts = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Part(entry, context);
      });
    };
    de_PartsList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ObjectPart(entry, context);
      });
    };
    de_PolicyStatus = (output, context) => {
      const contents = {};
      if (output["IsPublic"] !== void 0) {
        contents.IsPublic = parseBoolean(output["IsPublic"]);
      }
      return contents;
    };
    de_Progress = (output, context) => {
      const contents = {};
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = strictParseLong(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = strictParseLong(output["BytesReturned"]);
      }
      return contents;
    };
    de_PublicAccessBlockConfiguration = (output, context) => {
      const contents = {};
      if (output["BlockPublicAcls"] !== void 0) {
        contents.BlockPublicAcls = parseBoolean(output["BlockPublicAcls"]);
      }
      if (output["IgnorePublicAcls"] !== void 0) {
        contents.IgnorePublicAcls = parseBoolean(output["IgnorePublicAcls"]);
      }
      if (output["BlockPublicPolicy"] !== void 0) {
        contents.BlockPublicPolicy = parseBoolean(output["BlockPublicPolicy"]);
      }
      if (output["RestrictPublicBuckets"] !== void 0) {
        contents.RestrictPublicBuckets = parseBoolean(output["RestrictPublicBuckets"]);
      }
      return contents;
    };
    de_QueueConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output["Queue"] !== void 0) {
        contents.QueueArn = expectString(output["Queue"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    de_QueueConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_QueueConfiguration(entry, context);
      });
    };
    de_Redirect = (output, context) => {
      const contents = {};
      if (output["HostName"] !== void 0) {
        contents.HostName = expectString(output["HostName"]);
      }
      if (output["HttpRedirectCode"] !== void 0) {
        contents.HttpRedirectCode = expectString(output["HttpRedirectCode"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = expectString(output["Protocol"]);
      }
      if (output["ReplaceKeyPrefixWith"] !== void 0) {
        contents.ReplaceKeyPrefixWith = expectString(output["ReplaceKeyPrefixWith"]);
      }
      if (output["ReplaceKeyWith"] !== void 0) {
        contents.ReplaceKeyWith = expectString(output["ReplaceKeyWith"]);
      }
      return contents;
    };
    de_RedirectAllRequestsTo = (output, context) => {
      const contents = {};
      if (output["HostName"] !== void 0) {
        contents.HostName = expectString(output["HostName"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = expectString(output["Protocol"]);
      }
      return contents;
    };
    de_ReplicaModifications = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      return contents;
    };
    de_ReplicationConfiguration = (output, context) => {
      const contents = {};
      if (output["Role"] !== void 0) {
        contents.Role = expectString(output["Role"]);
      }
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_ReplicationRules(getArrayIfSingleItem(output["Rule"]), context);
      }
      return contents;
    };
    de_ReplicationRule = (output, context) => {
      const contents = {};
      if (output["ID"] !== void 0) {
        contents.ID = expectString(output["ID"]);
      }
      if (output["Priority"] !== void 0) {
        contents.Priority = strictParseInt32(output["Priority"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = de_ReplicationRuleFilter(expectUnion(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      if (output["SourceSelectionCriteria"] !== void 0) {
        contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output["SourceSelectionCriteria"], context);
      }
      if (output["ExistingObjectReplication"] !== void 0) {
        contents.ExistingObjectReplication = de_ExistingObjectReplication(output["ExistingObjectReplication"], context);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = de_Destination(output["Destination"], context);
      }
      if (output["DeleteMarkerReplication"] !== void 0) {
        contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output["DeleteMarkerReplication"], context);
      }
      return contents;
    };
    de_ReplicationRuleAndOperator = (output, context) => {
      const contents = {};
      if (output["Prefix"] !== void 0) {
        contents.Prefix = expectString(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]), context);
      }
      return contents;
    };
    de_ReplicationRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: expectString(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: de_Tag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: de_ReplicationRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    de_ReplicationRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ReplicationRule(entry, context);
      });
    };
    de_ReplicationTime = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      if (output["Time"] !== void 0) {
        contents.Time = de_ReplicationTimeValue(output["Time"], context);
      }
      return contents;
    };
    de_ReplicationTimeValue = (output, context) => {
      const contents = {};
      if (output["Minutes"] !== void 0) {
        contents.Minutes = strictParseInt32(output["Minutes"]);
      }
      return contents;
    };
    de_RestoreStatus = (output, context) => {
      const contents = {};
      if (output["IsRestoreInProgress"] !== void 0) {
        contents.IsRestoreInProgress = parseBoolean(output["IsRestoreInProgress"]);
      }
      if (output["RestoreExpiryDate"] !== void 0) {
        contents.RestoreExpiryDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["RestoreExpiryDate"]));
      }
      return contents;
    };
    de_RoutingRule = (output, context) => {
      const contents = {};
      if (output["Condition"] !== void 0) {
        contents.Condition = de_Condition(output["Condition"], context);
      }
      if (output["Redirect"] !== void 0) {
        contents.Redirect = de_Redirect(output["Redirect"], context);
      }
      return contents;
    };
    de_RoutingRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_RoutingRule(entry, context);
      });
    };
    de_S3KeyFilter = (output, context) => {
      const contents = {};
      if (output.FilterRule === "") {
        contents.FilterRules = [];
      } else if (output["FilterRule"] !== void 0) {
        contents.FilterRules = de_FilterRuleList(getArrayIfSingleItem(output["FilterRule"]), context);
      }
      return contents;
    };
    de_ServerSideEncryptionByDefault = (output, context) => {
      const contents = {};
      if (output["SSEAlgorithm"] !== void 0) {
        contents.SSEAlgorithm = expectString(output["SSEAlgorithm"]);
      }
      if (output["KMSMasterKeyID"] !== void 0) {
        contents.KMSMasterKeyID = expectString(output["KMSMasterKeyID"]);
      }
      return contents;
    };
    de_ServerSideEncryptionConfiguration = (output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = de_ServerSideEncryptionRules(getArrayIfSingleItem(output["Rule"]), context);
      }
      return contents;
    };
    de_ServerSideEncryptionRule = (output, context) => {
      const contents = {};
      if (output["ApplyServerSideEncryptionByDefault"] !== void 0) {
        contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
      }
      if (output["BucketKeyEnabled"] !== void 0) {
        contents.BucketKeyEnabled = parseBoolean(output["BucketKeyEnabled"]);
      }
      return contents;
    };
    de_ServerSideEncryptionRules = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_ServerSideEncryptionRule(entry, context);
      });
    };
    de_SourceSelectionCriteria = (output, context) => {
      const contents = {};
      if (output["SseKmsEncryptedObjects"] !== void 0) {
        contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
      }
      if (output["ReplicaModifications"] !== void 0) {
        contents.ReplicaModifications = de_ReplicaModifications(output["ReplicaModifications"], context);
      }
      return contents;
    };
    de_SSEKMS = (output, context) => {
      const contents = {};
      if (output["KeyId"] !== void 0) {
        contents.KeyId = expectString(output["KeyId"]);
      }
      return contents;
    };
    de_SseKmsEncryptedObjects = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = expectString(output["Status"]);
      }
      return contents;
    };
    de_SSES3 = (output, context) => {
      const contents = {};
      return contents;
    };
    de_Stats = (output, context) => {
      const contents = {};
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = strictParseLong(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = strictParseLong(output["BytesReturned"]);
      }
      return contents;
    };
    de_StorageClassAnalysis = (output, context) => {
      const contents = {};
      if (output["DataExport"] !== void 0) {
        contents.DataExport = de_StorageClassAnalysisDataExport(output["DataExport"], context);
      }
      return contents;
    };
    de_StorageClassAnalysisDataExport = (output, context) => {
      const contents = {};
      if (output["OutputSchemaVersion"] !== void 0) {
        contents.OutputSchemaVersion = expectString(output["OutputSchemaVersion"]);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = de_AnalyticsExportDestination(output["Destination"], context);
      }
      return contents;
    };
    de_Tag = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = expectString(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = expectString(output["Value"]);
      }
      return contents;
    };
    de_TagSet = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Tag(entry, context);
      });
    };
    de_TargetGrant = (output, context) => {
      const contents = {};
      if (output["Grantee"] !== void 0) {
        contents.Grantee = de_Grantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = expectString(output["Permission"]);
      }
      return contents;
    };
    de_TargetGrants = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_TargetGrant(entry, context);
      });
    };
    de_Tiering = (output, context) => {
      const contents = {};
      if (output["Days"] !== void 0) {
        contents.Days = strictParseInt32(output["Days"]);
      }
      if (output["AccessTier"] !== void 0) {
        contents.AccessTier = expectString(output["AccessTier"]);
      }
      return contents;
    };
    de_TieringList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Tiering(entry, context);
      });
    };
    de_TopicConfiguration = (output, context) => {
      const contents = {};
      if (output["Id"] !== void 0) {
        contents.Id = expectString(output["Id"]);
      }
      if (output["Topic"] !== void 0) {
        contents.TopicArn = expectString(output["Topic"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = de_NotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    de_TopicConfigurationList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_TopicConfiguration(entry, context);
      });
    };
    de_Transition = (output, context) => {
      const contents = {};
      if (output["Date"] !== void 0) {
        contents.Date = expectNonNull(parseRfc3339DateTimeWithOffset(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = strictParseInt32(output["Days"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = expectString(output["StorageClass"]);
      }
      return contents;
    };
    de_TransitionList = (output, context) => {
      return (output || []).filter((e5) => e5 != null).map((entry) => {
        return de_Transition(entry, context);
      });
    };
    deserializeMetadata5 = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) != null ? _a : output.headers["x-amzn-request-id"]) != null ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    collectBodyString5 = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    isSerializableHeaderValue2 = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    parseBody4 = (streamBody, context) => collectBodyString5(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser2.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    parseErrorBody4 = (errorBody, context) => __async(void 0, null, function* () {
      var _a;
      const value = yield parseBody4(errorBody, context);
      if (value.Error) {
        value.Error.message = (_a = value.Error.message) != null ? _a : value.Error.Message;
      }
      return value;
    });
    loadRestXmlErrorCode = (output, data) => {
      if ((data == null ? void 0 : data.Code) !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js
var AbortMultipartUploadCommand;
var init_AbortMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    AbortMultipartUploadCommand = class _AbortMultipartUploadCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _AbortMultipartUploadCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "AbortMultipartUploadCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_AbortMultipartUploadCommand(input, context);
      }
      deserialize(output, context) {
        return de_AbortMultipartUploadCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-ssec/dist-es/index.js
function ssecMiddleware(options) {
  return (next) => (args) => __async(this, null, function* () {
    let input = __spreadValues({}, args.input);
    const properties = [
      {
        target: "SSECustomerKey",
        hash: "SSECustomerKeyMD5"
      },
      {
        target: "CopySourceSSECustomerKey",
        hash: "CopySourceSSECustomerKeyMD5"
      }
    ];
    for (const prop of properties) {
      const value = input[prop.target];
      if (value) {
        const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
        const encoded = options.base64Encoder(valueView);
        const hash = new options.md5();
        hash.update(valueView);
        input = __spreadProps(__spreadValues({}, input), {
          [prop.target]: encoded,
          [prop.hash]: options.base64Encoder(yield hash.digest())
        });
      }
    }
    return next(__spreadProps(__spreadValues({}, args), {
      input
    }));
  });
}
var ssecMiddlewareOptions, getSsecPlugin;
var init_dist_es64 = __esm({
  "node_modules/@aws-sdk/middleware-ssec/dist-es/index.js"() {
    "use strict";
    ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    getSsecPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config2), ssecMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js
var CompleteMultipartUploadCommand;
var init_CompleteMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js"() {
    "use strict";
    init_dist_es18();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    CompleteMultipartUploadCommand = class _CompleteMultipartUploadCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "CompleteMultipartUploadCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: CompleteMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: CompleteMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CompleteMultipartUploadCommand(input, context);
      }
      deserialize(output, context) {
        return de_CompleteMultipartUploadCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js
var CopyObjectCommand;
var init_CopyObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js"() {
    "use strict";
    init_dist_es18();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    CopyObjectCommand = class _CopyObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _CopyObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "CopyObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: CopyObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: CopyObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CopyObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_CopyObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js
function locationConstraintMiddleware(options) {
  return (next) => (args) => __async(this, null, function* () {
    const { CreateBucketConfiguration } = args.input;
    const region = yield options.region();
    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
      args = __spreadProps(__spreadValues({}, args), {
        input: __spreadProps(__spreadValues({}, args.input), {
          CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
        })
      });
    }
    return next(args);
  });
}
var locationConstraintMiddlewareOptions, getLocationConstraintPlugin;
var init_dist_es65 = __esm({
  "node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js"() {
    "use strict";
    locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    getLocationConstraintPlugin = (config2) => ({
      applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config2), locationConstraintMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js
var CreateBucketCommand;
var init_CreateBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js"() {
    "use strict";
    init_dist_es65();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    CreateBucketCommand = class _CreateBucketCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          DisableAccessPoints: { type: "staticContextParams", value: true },
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _CreateBucketCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getLocationConstraintPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateBucketCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateBucketCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateBucketCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js
var CreateMultipartUploadCommand;
var init_CreateMultipartUploadCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js"() {
    "use strict";
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    CreateMultipartUploadCommand = class _CreateMultipartUploadCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _CreateMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateMultipartUploadCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: CreateMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: CreateMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateMultipartUploadCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateMultipartUploadCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js
var DeleteBucketAnalyticsConfigurationCommand;
var init_DeleteBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketAnalyticsConfigurationCommand = class _DeleteBucketAnalyticsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketAnalyticsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketAnalyticsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js
var DeleteBucketCommand;
var init_DeleteBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketCommand = class _DeleteBucketCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js
var DeleteBucketCorsCommand;
var init_DeleteBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketCorsCommand = class _DeleteBucketCorsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCorsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketCorsCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketCorsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js
var DeleteBucketEncryptionCommand;
var init_DeleteBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketEncryptionCommand = class _DeleteBucketEncryptionCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketEncryptionCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketEncryptionCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js
var DeleteBucketIntelligentTieringConfigurationCommand;
var init_DeleteBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketIntelligentTieringConfigurationCommand = class _DeleteBucketIntelligentTieringConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketIntelligentTieringConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketIntelligentTieringConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js
var DeleteBucketInventoryConfigurationCommand;
var init_DeleteBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketInventoryConfigurationCommand = class _DeleteBucketInventoryConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketInventoryConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketInventoryConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js
var DeleteBucketLifecycleCommand;
var init_DeleteBucketLifecycleCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketLifecycleCommand = class _DeleteBucketLifecycleCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketLifecycleCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketLifecycleCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketLifecycleCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js
var DeleteBucketMetricsConfigurationCommand;
var init_DeleteBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketMetricsConfigurationCommand = class _DeleteBucketMetricsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketMetricsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketMetricsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js
var DeleteBucketOwnershipControlsCommand;
var init_DeleteBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketOwnershipControlsCommand = class _DeleteBucketOwnershipControlsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketOwnershipControlsCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketOwnershipControlsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js
var DeleteBucketPolicyCommand;
var init_DeleteBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketPolicyCommand = class _DeleteBucketPolicyCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketPolicyCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketPolicyCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js
var DeleteBucketReplicationCommand;
var init_DeleteBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketReplicationCommand = class _DeleteBucketReplicationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketReplicationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketReplicationCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketReplicationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js
var DeleteBucketTaggingCommand;
var init_DeleteBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketTaggingCommand = class _DeleteBucketTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js
var DeleteBucketWebsiteCommand;
var init_DeleteBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteBucketWebsiteCommand = class _DeleteBucketWebsiteCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteBucketWebsiteCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteBucketWebsiteCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js
var DeleteObjectCommand;
var init_DeleteObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteObjectCommand = class _DeleteObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteObjectCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js
var ChecksumAlgorithm2, ChecksumLocation;
var init_constants9 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js"() {
    "use strict";
    (function(ChecksumAlgorithm3) {
      ChecksumAlgorithm3["MD5"] = "MD5";
      ChecksumAlgorithm3["CRC32"] = "CRC32";
      ChecksumAlgorithm3["CRC32C"] = "CRC32C";
      ChecksumAlgorithm3["SHA1"] = "SHA1";
      ChecksumAlgorithm3["SHA256"] = "SHA256";
    })(ChecksumAlgorithm2 || (ChecksumAlgorithm2 = {}));
    (function(ChecksumLocation2) {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
    })(ChecksumLocation || (ChecksumLocation = {}));
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js
var CLIENT_SUPPORTED_ALGORITHMS, PRIORITY_ORDER_ALGORITHMS;
var init_types8 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js"() {
    "use strict";
    init_constants9();
    CLIENT_SUPPORTED_ALGORITHMS = [
      ChecksumAlgorithm2.CRC32,
      ChecksumAlgorithm2.CRC32C,
      ChecksumAlgorithm2.SHA1,
      ChecksumAlgorithm2.SHA256
    ];
    PRIORITY_ORDER_ALGORITHMS = [
      ChecksumAlgorithm2.CRC32,
      ChecksumAlgorithm2.CRC32C,
      ChecksumAlgorithm2.SHA1,
      ChecksumAlgorithm2.SHA256
    ];
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js
var getChecksumAlgorithmForRequest;
var init_getChecksumAlgorithmForRequest = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js"() {
    "use strict";
    init_constants9();
    init_types8();
    getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember }) => {
      if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? ChecksumAlgorithm2.MD5 : void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
      }
      return checksumAlgorithm;
    };
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js
var getChecksumLocationName;
var init_getChecksumLocationName = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js"() {
    "use strict";
    init_constants9();
    getChecksumLocationName = (algorithm) => algorithm === ChecksumAlgorithm2.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js
var hasHeader2;
var init_hasHeader = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js"() {
    "use strict";
    hasHeader2 = (header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js
var isStreaming;
var init_isStreaming = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js"() {
    "use strict";
    init_dist_es8();
    isStreaming = (body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !isArrayBuffer(body);
  }
});

// node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator3,
  __asyncValues: () => __asyncValues2,
  __await: () => __await3,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d5, b5) {
  extendStatics2(d5, b5);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b5 === null ? Object.create(b5) : (__.prototype = b5.prototype, new __());
}
function __rest2(s5, e5) {
  var t4 = {};
  for (var p5 in s5)
    if (Object.prototype.hasOwnProperty.call(s5, p5) && e5.indexOf(p5) < 0)
      t4[p5] = s5[p5];
  if (s5 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i5 = 0, p5 = Object.getOwnPropertySymbols(s5); i5 < p5.length; i5++) {
      if (e5.indexOf(p5[i5]) < 0 && Object.prototype.propertyIsEnumerable.call(s5, p5[i5]))
        t4[p5[i5]] = s5[p5[i5]];
    }
  return t4;
}
function __decorate2(decorators, target, key, desc) {
  var c5 = arguments.length, r5 = c5 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r5 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i5 = decorators.length - 1; i5 >= 0; i5--)
      if (d5 = decorators[i5])
        r5 = (c5 < 3 ? d5(r5) : c5 > 3 ? d5(target, key, r5) : d5(target, key)) || r5;
  return c5 > 3 && r5 && Object.defineProperty(target, key, r5), r5;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e5) {
        reject(e5);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t4[0] & 1)
      throw t4[1];
    return t4[1];
  }, trys: [], ops: [] }, f5, y3, t4, g5;
  return g5 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n5) {
    return function(v3) {
      return step([n5, v3]);
    };
  }
  function step(op) {
    if (f5)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f5 = 1, y3 && (t4 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t4 = y3["return"]) && t4.call(y3), 0) : y3.next) && !(t4 = t4.call(y3, op[1])).done)
          return t4;
        if (y3 = 0, t4)
          op = [op[0] & 2, t4.value];
        switch (op[0]) {
          case 0:
          case 1:
            t4 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y3 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t4 = _.trys, t4 = t4.length > 0 && t4[t4.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t4 || op[1] > t4[0] && op[1] < t4[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t4[1]) {
              _.label = t4[1];
              t4 = op;
              break;
            }
            if (t4 && _.label < t4[2]) {
              _.label = t4[2];
              _.ops.push(op);
              break;
            }
            if (t4[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e5) {
        op = [6, e5];
        y3 = 0;
      } finally {
        f5 = t4 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o5, m5, k5, k22) {
  if (k22 === void 0)
    k22 = k5;
  o5[k22] = m5[k5];
}
function __exportStar2(m5, exports2) {
  for (var p5 in m5)
    if (p5 !== "default" && !exports2.hasOwnProperty(p5))
      exports2[p5] = m5[p5];
}
function __values2(o5) {
  var s5 = typeof Symbol === "function" && Symbol.iterator, m5 = s5 && o5[s5], i5 = 0;
  if (m5)
    return m5.call(o5);
  if (o5 && typeof o5.length === "number")
    return {
      next: function() {
        if (o5 && i5 >= o5.length)
          o5 = void 0;
        return { value: o5 && o5[i5++], done: !o5 };
      }
    };
  throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o5, n5) {
  var m5 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m5)
    return o5;
  var i5 = m5.call(o5), r5, ar2 = [], e5;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r5 = i5.next()).done)
      ar2.push(r5.value);
  } catch (error) {
    e5 = { error };
  } finally {
    try {
      if (r5 && !r5.done && (m5 = i5["return"]))
        m5.call(i5);
    } finally {
      if (e5)
        throw e5.error;
    }
  }
  return ar2;
}
function __spread2() {
  for (var ar2 = [], i5 = 0; i5 < arguments.length; i5++)
    ar2 = ar2.concat(__read2(arguments[i5]));
  return ar2;
}
function __spreadArrays2() {
  for (var s5 = 0, i5 = 0, il = arguments.length; i5 < il; i5++)
    s5 += arguments[i5].length;
  for (var r5 = Array(s5), k5 = 0, i5 = 0; i5 < il; i5++)
    for (var a5 = arguments[i5], j5 = 0, jl = a5.length; j5 < jl; j5++, k5++)
      r5[k5] = a5[j5];
  return r5;
}
function __await3(v3) {
  return this instanceof __await3 ? (this.v = v3, this) : new __await3(v3);
}
function __asyncGenerator3(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g5 = generator.apply(thisArg, _arguments || []), i5, q5 = [];
  return i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5;
  function verb(n5) {
    if (g5[n5])
      i5[n5] = function(v3) {
        return new Promise(function(a5, b5) {
          q5.push([n5, v3, a5, b5]) > 1 || resume(n5, v3);
        });
      };
  }
  function resume(n5, v3) {
    try {
      step(g5[n5](v3));
    } catch (e5) {
      settle(q5[0][3], e5);
    }
  }
  function step(r5) {
    r5.value instanceof __await3 ? Promise.resolve(r5.value.v).then(fulfill, reject) : settle(q5[0][2], r5);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f5, v3) {
    if (f5(v3), q5.shift(), q5.length)
      resume(q5[0][0], q5[0][1]);
  }
}
function __asyncDelegator2(o5) {
  var i5, p5;
  return i5 = {}, verb("next"), verb("throw", function(e5) {
    throw e5;
  }), verb("return"), i5[Symbol.iterator] = function() {
    return this;
  }, i5;
  function verb(n5, f5) {
    i5[n5] = o5[n5] ? function(v3) {
      return (p5 = !p5) ? { value: __await3(o5[n5](v3)), done: n5 === "return" } : f5 ? f5(v3) : v3;
    } : f5;
  }
}
function __asyncValues2(o5) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m5 = o5[Symbol.asyncIterator], i5;
  return m5 ? m5.call(o5) : (o5 = typeof __values2 === "function" ? __values2(o5) : o5[Symbol.iterator](), i5 = {}, verb("next"), verb("throw"), verb("return"), i5[Symbol.asyncIterator] = function() {
    return this;
  }, i5);
  function verb(n5) {
    i5[n5] = o5[n5] && function(v3) {
      return new Promise(function(resolve, reject) {
        v3 = o5[n5](v3), settle(resolve, reject, v3.done, v3.value);
      });
    };
  }
  function settle(resolve, reject, d5, v3) {
    Promise.resolve(v3).then(function(v5) {
      resolve({ value: v5, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k5 in mod)
      if (Object.hasOwnProperty.call(mod, k5))
        result[k5] = mod[k5];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js"() {
    "use strict";
    extendStatics2 = function(d5, b5) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b6) {
        d6.__proto__ = b6;
      } || function(d6, b6) {
        for (var p5 in b6)
          if (b6.hasOwnProperty(p5))
            d6[p5] = b6[p5];
      };
      return extendStatics2(d5, b5);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign3(t4) {
        for (var s5, i5 = 1, n5 = arguments.length; i5 < n5; i5++) {
          s5 = arguments[i5];
          for (var p5 in s5)
            if (Object.prototype.hasOwnProperty.call(s5, p5))
              t4[p5] = s5[p5];
        }
        return t4;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// node_modules/@aws-crypto/crc32c/build/aws_crc32c.js
var require_aws_crc32c = __commonJS({
  "node_modules/@aws-crypto/crc32c/build/aws_crc32c.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    var index_1 = require_build3();
    var AwsCrc32c2 = (
      /** @class */
      function() {
        function AwsCrc32c3() {
          this.crc32c = new index_1.Crc32c();
        }
        AwsCrc32c3.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32c.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc32c3.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
            });
          });
        };
        AwsCrc32c3.prototype.reset = function() {
          this.crc32c = new index_1.Crc32c();
        };
        return AwsCrc32c3;
      }()
    );
    exports2.AwsCrc32c = AwsCrc32c2;
  }
});

// node_modules/@aws-crypto/crc32c/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/crc32c/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = exports2.Crc32c = exports2.crc32c = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    function crc32c(data) {
      return new Crc32c().update(data).digest();
    }
    exports2.crc32c = crc32c;
    var Crc32c = (
      /** @class */
      function() {
        function Crc32c2() {
          this.checksum = 4294967295;
        }
        Crc32c2.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc32c2.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc32c2;
      }()
    );
    exports2.Crc32c = Crc32c;
    var a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
    var aws_crc32c_1 = require_aws_crc32c();
    Object.defineProperty(exports2, "AwsCrc32c", { enumerable: true, get: function() {
      return aws_crc32c_1.AwsCrc32c;
    } });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js
var import_crc323, import_crc32c, selectChecksumAlgorithmFunction;
var init_selectChecksumAlgorithmFunction = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js"() {
    "use strict";
    import_crc323 = __toESM(require_build2());
    import_crc32c = __toESM(require_build3());
    init_constants9();
    selectChecksumAlgorithmFunction = (checksumAlgorithm, config2) => ({
      [ChecksumAlgorithm2.MD5]: config2.md5,
      [ChecksumAlgorithm2.CRC32]: import_crc323.AwsCrc32,
      [ChecksumAlgorithm2.CRC32C]: import_crc32c.AwsCrc32c,
      [ChecksumAlgorithm2.SHA1]: config2.sha1,
      [ChecksumAlgorithm2.SHA256]: config2.sha256
    })[checksumAlgorithm];
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js
var stringHasher;
var init_stringHasher = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js"() {
    "use strict";
    init_dist_es11();
    stringHasher = (checksumAlgorithmFn, body) => {
      const hash = new checksumAlgorithmFn();
      hash.update(toUint8Array(body || ""));
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js
var flexibleChecksumsMiddleware;
var init_flexibleChecksumsMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"() {
    "use strict";
    init_dist_es2();
    init_getChecksumAlgorithmForRequest();
    init_getChecksumLocationName();
    init_hasHeader();
    init_isStreaming();
    init_selectChecksumAlgorithmFunction();
    init_stringHasher();
    flexibleChecksumsMiddleware = (config2, middlewareConfig) => (next) => (args) => __async(void 0, null, function* () {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const { request: request2 } = args;
      const { body: requestBody, headers } = request2;
      const { base64Encoder, streamHasher } = config2;
      const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
        requestChecksumRequired,
        requestAlgorithmMember
      });
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config2);
        if (isStreaming(requestBody)) {
          const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config2;
          updatedBody = getAwsChunkedEncodingStream2(requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = __spreadProps(__spreadValues({}, headers), {
            "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          });
          delete updatedHeaders["content-length"];
        } else if (!hasHeader2(checksumLocationName, headers)) {
          const rawChecksum = yield stringHasher(checksumAlgorithmFn, requestBody);
          updatedHeaders = __spreadProps(__spreadValues({}, headers), {
            [checksumLocationName]: base64Encoder(rawChecksum)
          });
        }
      }
      const result = yield next(__spreadProps(__spreadValues({}, args), {
        request: __spreadProps(__spreadValues({}, request2), {
          headers: updatedHeaders,
          body: updatedBody
        })
      }));
      return result;
    });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/streams/create-read-stream-on-buffer.js
function createReadStreamOnBuffer(buffer) {
  const stream = new import_stream7.Transform();
  stream.push(buffer);
  stream.push(null);
  return stream;
}
var import_stream7;
var init_create_read_stream_on_buffer = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/streams/create-read-stream-on-buffer.js"() {
    "use strict";
    import_stream7 = require("stream");
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js
var getChecksum;
var init_getChecksum = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js"() {
    "use strict";
    init_isStreaming();
    init_stringHasher();
    getChecksum = (_0, _1) => __async(void 0, [_0, _1], function* (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) {
      const digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);
      return base64Encoder(yield digest);
    });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js
var getChecksumAlgorithmListForResponse;
var init_getChecksumAlgorithmListForResponse = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js"() {
    "use strict";
    init_types8();
    getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    };
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js
var validateChecksumFromResponse;
var init_validateChecksumFromResponse = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"() {
    "use strict";
    init_getChecksum();
    init_getChecksumAlgorithmListForResponse();
    init_getChecksumLocationName();
    init_selectChecksumAlgorithmFunction();
    validateChecksumFromResponse = (_0, _1) => __async(void 0, [_0, _1], function* (response, { config: config2, responseAlgorithms }) {
      const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config2);
          const { streamHasher, base64Encoder } = config2;
          const checksum = yield getChecksum(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
        }
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js
var flexibleChecksumsResponseMiddlewareOptions, flexibleChecksumsResponseMiddleware;
var init_flexibleChecksumsResponseMiddleware = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js"() {
    "use strict";
    init_dist_es2();
    init_isStreaming();
    init_create_read_stream_on_buffer();
    init_validateChecksumFromResponse();
    flexibleChecksumsResponseMiddlewareOptions = {
      name: "flexibleChecksumsResponseMiddleware",
      toMiddleware: "deserializerMiddleware",
      relation: "after",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    flexibleChecksumsResponseMiddleware = (config2, middlewareConfig) => (next) => (args) => __async(void 0, null, function* () {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const input = args.input;
      const result = yield next(args);
      const response = result.response;
      let collectedStream = void 0;
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        const isStreamingBody = isStreaming(response.body);
        if (isStreamingBody) {
          collectedStream = yield config2.streamCollector(response.body);
          response.body = createReadStreamOnBuffer(collectedStream);
        }
        yield validateChecksumFromResponse(result.response, {
          config: config2,
          responseAlgorithms
        });
        if (isStreamingBody && collectedStream) {
          response.body = createReadStreamOnBuffer(collectedStream);
        }
      }
      return result;
    });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js
var flexibleChecksumsMiddlewareOptions, getFlexibleChecksumsPlugin;
var init_getFlexibleChecksumsPlugin = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js"() {
    "use strict";
    init_flexibleChecksumsMiddleware();
    init_flexibleChecksumsResponseMiddleware();
    flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    getFlexibleChecksumsPlugin = (config2, middlewareConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add(flexibleChecksumsMiddleware(config2, middlewareConfig), flexibleChecksumsMiddlewareOptions);
        clientStack.addRelativeTo(flexibleChecksumsResponseMiddleware(config2, middlewareConfig), flexibleChecksumsResponseMiddlewareOptions);
      }
    });
  }
});

// node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js
var init_dist_es66 = __esm({
  "node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js"() {
    "use strict";
    init_constants9();
    init_flexibleChecksumsMiddleware();
    init_getFlexibleChecksumsPlugin();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js
var DeleteObjectsCommand;
var init_DeleteObjectsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteObjectsCommand = class _DeleteObjectsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteObjectsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteObjectsCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteObjectsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js
var DeleteObjectTaggingCommand;
var init_DeleteObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeleteObjectTaggingCommand = class _DeleteObjectTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeleteObjectTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeleteObjectTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js
var DeletePublicAccessBlockCommand;
var init_DeletePublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    DeletePublicAccessBlockCommand = class _DeletePublicAccessBlockCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "DeletePublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_DeletePublicAccessBlockCommand(input, context);
      }
      deserialize(output, context) {
        return de_DeletePublicAccessBlockCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js
var GetBucketAccelerateConfigurationCommand;
var init_GetBucketAccelerateConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketAccelerateConfigurationCommand = class _GetBucketAccelerateConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketAccelerateConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketAccelerateConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js
var GetBucketAclCommand;
var init_GetBucketAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketAclCommand = class _GetBucketAclCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAclCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketAclCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketAclCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js
var GetBucketAnalyticsConfigurationCommand;
var init_GetBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketAnalyticsConfigurationCommand = class _GetBucketAnalyticsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketAnalyticsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketAnalyticsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js
var GetBucketCorsCommand;
var init_GetBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketCorsCommand = class _GetBucketCorsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketCorsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketCorsCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketCorsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js
var GetBucketEncryptionCommand;
var init_GetBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    GetBucketEncryptionCommand = class _GetBucketEncryptionCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: GetBucketEncryptionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketEncryptionCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketEncryptionCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js
var GetBucketIntelligentTieringConfigurationCommand;
var init_GetBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketIntelligentTieringConfigurationCommand = class _GetBucketIntelligentTieringConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketIntelligentTieringConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketIntelligentTieringConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js
var GetBucketInventoryConfigurationCommand;
var init_GetBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    GetBucketInventoryConfigurationCommand = class _GetBucketInventoryConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: GetBucketInventoryConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketInventoryConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketInventoryConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js
var GetBucketLifecycleConfigurationCommand;
var init_GetBucketLifecycleConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketLifecycleConfigurationCommand = class _GetBucketLifecycleConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketLifecycleConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketLifecycleConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js
var GetBucketLocationCommand;
var init_GetBucketLocationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketLocationCommand = class _GetBucketLocationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketLocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLocationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketLocationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketLocationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js
var GetBucketLoggingCommand;
var init_GetBucketLoggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketLoggingCommand = class _GetBucketLoggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketLoggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLoggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketLoggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketLoggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js
var GetBucketMetricsConfigurationCommand;
var init_GetBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketMetricsConfigurationCommand = class _GetBucketMetricsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketMetricsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketMetricsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js
var GetBucketNotificationConfigurationCommand;
var init_GetBucketNotificationConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketNotificationConfigurationCommand = class _GetBucketNotificationConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketNotificationConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketNotificationConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js
var GetBucketOwnershipControlsCommand;
var init_GetBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketOwnershipControlsCommand = class _GetBucketOwnershipControlsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketOwnershipControlsCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketOwnershipControlsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js
var GetBucketPolicyCommand;
var init_GetBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketPolicyCommand = class _GetBucketPolicyCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketPolicyCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketPolicyCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js
var GetBucketPolicyStatusCommand;
var init_GetBucketPolicyStatusCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketPolicyStatusCommand = class _GetBucketPolicyStatusCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyStatusCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketPolicyStatusCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketPolicyStatusCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js
var GetBucketReplicationCommand;
var init_GetBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketReplicationCommand = class _GetBucketReplicationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketReplicationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketReplicationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketReplicationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js
var GetBucketRequestPaymentCommand;
var init_GetBucketRequestPaymentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketRequestPaymentCommand = class _GetBucketRequestPaymentCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketRequestPaymentCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketRequestPaymentCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js
var GetBucketTaggingCommand;
var init_GetBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketTaggingCommand = class _GetBucketTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js
var GetBucketVersioningCommand;
var init_GetBucketVersioningCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketVersioningCommand = class _GetBucketVersioningCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketVersioningCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketVersioningCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketVersioningCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketVersioningCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js
var GetBucketWebsiteCommand;
var init_GetBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetBucketWebsiteCommand = class _GetBucketWebsiteCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetBucketWebsiteCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetBucketWebsiteCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js
var GetObjectAclCommand;
var init_GetObjectAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetObjectAclCommand = class _GetObjectAclCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAclCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectAclCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectAclCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js
var GetObjectAttributesCommand;
var init_GetObjectAttributesCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js"() {
    "use strict";
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    GetObjectAttributesCommand = class _GetObjectAttributesCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectAttributesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAttributesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: GetObjectAttributesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectAttributesCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectAttributesCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js
var GetObjectCommand;
var init_GetObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    GetObjectCommand = class _GetObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: GetObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: GetObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js
var GetObjectLegalHoldCommand;
var init_GetObjectLegalHoldCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetObjectLegalHoldCommand = class _GetObjectLegalHoldCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectLegalHoldCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectLegalHoldCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js
var GetObjectLockConfigurationCommand;
var init_GetObjectLockConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetObjectLockConfigurationCommand = class _GetObjectLockConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectLockConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectLockConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js
var GetObjectRetentionCommand;
var init_GetObjectRetentionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetObjectRetentionCommand = class _GetObjectRetentionCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectRetentionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectRetentionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectRetentionCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectRetentionCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js
var GetObjectTaggingCommand;
var init_GetObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetObjectTaggingCommand = class _GetObjectTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js
var GetObjectTorrentCommand;
var init_GetObjectTorrentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    GetObjectTorrentCommand = class _GetObjectTorrentCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetObjectTorrentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTorrentCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: GetObjectTorrentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetObjectTorrentCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetObjectTorrentCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js
var GetPublicAccessBlockCommand;
var init_GetPublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    GetPublicAccessBlockCommand = class _GetPublicAccessBlockCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "GetPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_GetPublicAccessBlockCommand(input, context);
      }
      deserialize(output, context) {
        return de_GetPublicAccessBlockCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js
var HeadBucketCommand;
var init_HeadBucketCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    HeadBucketCommand = class _HeadBucketCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _HeadBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadBucketCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_HeadBucketCommand(input, context);
      }
      deserialize(output, context) {
        return de_HeadBucketCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js
var HeadObjectCommand;
var init_HeadObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js"() {
    "use strict";
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    HeadObjectCommand = class _HeadObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _HeadObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: HeadObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: HeadObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_HeadObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_HeadObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js
var ListBucketAnalyticsConfigurationsCommand;
var init_ListBucketAnalyticsConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListBucketAnalyticsConfigurationsCommand = class _ListBucketAnalyticsConfigurationsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketAnalyticsConfigurationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListBucketAnalyticsConfigurationsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListBucketAnalyticsConfigurationsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js
var ListBucketIntelligentTieringConfigurationsCommand;
var init_ListBucketIntelligentTieringConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListBucketIntelligentTieringConfigurationsCommand = class _ListBucketIntelligentTieringConfigurationsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListBucketIntelligentTieringConfigurationsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListBucketIntelligentTieringConfigurationsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js
var ListBucketInventoryConfigurationsCommand;
var init_ListBucketInventoryConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    ListBucketInventoryConfigurationsCommand = class _ListBucketInventoryConfigurationsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketInventoryConfigurationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: ListBucketInventoryConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListBucketInventoryConfigurationsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListBucketInventoryConfigurationsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js
var ListBucketMetricsConfigurationsCommand;
var init_ListBucketMetricsConfigurationsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListBucketMetricsConfigurationsCommand = class _ListBucketMetricsConfigurationsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketMetricsConfigurationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListBucketMetricsConfigurationsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListBucketMetricsConfigurationsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js
var ListBucketsCommand;
var init_ListBucketsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListBucketsCommand = class _ListBucketsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListBucketsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListBucketsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListBucketsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js
var ListMultipartUploadsCommand;
var init_ListMultipartUploadsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListMultipartUploadsCommand = class _ListMultipartUploadsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListMultipartUploadsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListMultipartUploadsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListMultipartUploadsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListMultipartUploadsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js
var ListObjectsCommand;
var init_ListObjectsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListObjectsCommand = class _ListObjectsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListObjectsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListObjectsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListObjectsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js
var ListObjectsV2Command;
var init_ListObjectsV2Command = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListObjectsV2Command = class _ListObjectsV2Command extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListObjectsV2Command.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsV2Command";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListObjectsV2Command(input, context);
      }
      deserialize(output, context) {
        return de_ListObjectsV2Command(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js
var ListObjectVersionsCommand;
var init_ListObjectVersionsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    ListObjectVersionsCommand = class _ListObjectVersionsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListObjectVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectVersionsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListObjectVersionsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListObjectVersionsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js
var ListPartsCommand;
var init_ListPartsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js"() {
    "use strict";
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    ListPartsCommand = class _ListPartsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _ListPartsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "ListPartsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: ListPartsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_ListPartsCommand(input, context);
      }
      deserialize(output, context) {
        return de_ListPartsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js
var PutBucketAccelerateConfigurationCommand;
var init_PutBucketAccelerateConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketAccelerateConfigurationCommand = class _PutBucketAccelerateConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketAccelerateConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketAccelerateConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js
var PutBucketAclCommand;
var init_PutBucketAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketAclCommand = class _PutBucketAclCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAclCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketAclCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketAclCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js
var PutBucketAnalyticsConfigurationCommand;
var init_PutBucketAnalyticsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketAnalyticsConfigurationCommand = class _PutBucketAnalyticsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketAnalyticsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketAnalyticsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js
var PutBucketCorsCommand;
var init_PutBucketCorsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketCorsCommand = class _PutBucketCorsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketCorsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketCorsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketCorsCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketCorsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js
var PutBucketEncryptionCommand;
var init_PutBucketEncryptionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    PutBucketEncryptionCommand = class _PutBucketEncryptionCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketEncryptionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: PutBucketEncryptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketEncryptionCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketEncryptionCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js
var PutBucketIntelligentTieringConfigurationCommand;
var init_PutBucketIntelligentTieringConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketIntelligentTieringConfigurationCommand = class _PutBucketIntelligentTieringConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketIntelligentTieringConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketIntelligentTieringConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js
var PutBucketInventoryConfigurationCommand;
var init_PutBucketInventoryConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    PutBucketInventoryConfigurationCommand = class _PutBucketInventoryConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: PutBucketInventoryConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketInventoryConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketInventoryConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js
var PutBucketLifecycleConfigurationCommand;
var init_PutBucketLifecycleConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketLifecycleConfigurationCommand = class _PutBucketLifecycleConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketLifecycleConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketLifecycleConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js
var PutBucketLoggingCommand;
var init_PutBucketLoggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketLoggingCommand = class _PutBucketLoggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketLoggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLoggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketLoggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketLoggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js
var PutBucketMetricsConfigurationCommand;
var init_PutBucketMetricsConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketMetricsConfigurationCommand = class _PutBucketMetricsConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketMetricsConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketMetricsConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js
var PutBucketNotificationConfigurationCommand;
var init_PutBucketNotificationConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketNotificationConfigurationCommand = class _PutBucketNotificationConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketNotificationConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketNotificationConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js
var PutBucketOwnershipControlsCommand;
var init_PutBucketOwnershipControlsCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketOwnershipControlsCommand = class _PutBucketOwnershipControlsCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, { input: this.input, requestChecksumRequired: true }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketOwnershipControlsCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketOwnershipControlsCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js
var PutBucketPolicyCommand;
var init_PutBucketPolicyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketPolicyCommand = class _PutBucketPolicyCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketPolicyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketPolicyCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketPolicyCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js
var PutBucketReplicationCommand;
var init_PutBucketReplicationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketReplicationCommand = class _PutBucketReplicationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketReplicationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketReplicationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketReplicationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketReplicationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js
var PutBucketRequestPaymentCommand;
var init_PutBucketRequestPaymentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketRequestPaymentCommand = class _PutBucketRequestPaymentCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketRequestPaymentCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketRequestPaymentCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js
var PutBucketTaggingCommand;
var init_PutBucketTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketTaggingCommand = class _PutBucketTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js
var PutBucketVersioningCommand;
var init_PutBucketVersioningCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketVersioningCommand = class _PutBucketVersioningCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketVersioningCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketVersioningCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketVersioningCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketVersioningCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js
var PutBucketWebsiteCommand;
var init_PutBucketWebsiteCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutBucketWebsiteCommand = class _PutBucketWebsiteCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutBucketWebsiteCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutBucketWebsiteCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutBucketWebsiteCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js
var PutObjectAclCommand;
var init_PutObjectAclCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutObjectAclCommand = class _PutObjectAclCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectAclCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectAclCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectAclCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js
var PutObjectCommand;
var init_PutObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es18();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_03();
    init_Aws_restXml();
    PutObjectCommand = class _PutObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getCheckContentLengthHeaderPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: PutObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: PutObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js
var PutObjectLegalHoldCommand;
var init_PutObjectLegalHoldCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutObjectLegalHoldCommand = class _PutObjectLegalHoldCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectLegalHoldCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectLegalHoldCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js
var PutObjectLockConfigurationCommand;
var init_PutObjectLockConfigurationCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutObjectLockConfigurationCommand = class _PutObjectLockConfigurationCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectLockConfigurationCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectLockConfigurationCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js
var PutObjectRetentionCommand;
var init_PutObjectRetentionCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutObjectRetentionCommand = class _PutObjectRetentionCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectRetentionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectRetentionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectRetentionCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectRetentionCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js
var PutObjectTaggingCommand;
var init_PutObjectTaggingCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutObjectTaggingCommand = class _PutObjectTaggingCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutObjectTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectTaggingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutObjectTaggingCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutObjectTaggingCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js
var PutPublicAccessBlockCommand;
var init_PutPublicAccessBlockCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_Aws_restXml();
    PutPublicAccessBlockCommand = class _PutPublicAccessBlockCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "PutPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_PutPublicAccessBlockCommand(input, context);
      }
      deserialize(output, context) {
        return de_PutPublicAccessBlockCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js
var RestoreObjectCommand;
var init_RestoreObjectCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_1();
    init_Aws_restXml();
    RestoreObjectCommand = class _RestoreObjectCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _RestoreObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "RestoreObjectCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: RestoreObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_RestoreObjectCommand(input, context);
      }
      deserialize(output, context) {
        return de_RestoreObjectCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js
var SelectObjectContentCommand;
var init_SelectObjectContentCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js"() {
    "use strict";
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_1();
    init_Aws_restXml();
    SelectObjectContentCommand = class _SelectObjectContentCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _SelectObjectContentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "SelectObjectContentCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: SelectObjectContentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: SelectObjectContentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_SelectObjectContentCommand(input, context);
      }
      deserialize(output, context) {
        return de_SelectObjectContentCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js
var UploadPartCommand;
var init_UploadPartCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js"() {
    "use strict";
    init_dist_es66();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_1();
    init_Aws_restXml();
    UploadPartCommand = class _UploadPartCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _UploadPartCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getSsecPlugin(configuration));
        this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: UploadPartRequestFilterSensitiveLog,
          outputFilterSensitiveLog: UploadPartOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_UploadPartCommand(input, context);
      }
      deserialize(output, context) {
        return de_UploadPartCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js
var UploadPartCopyCommand;
var init_UploadPartCopyCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js"() {
    "use strict";
    init_dist_es18();
    init_dist_es64();
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_1();
    init_Aws_restXml();
    UploadPartCopyCommand = class _UploadPartCopyCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _UploadPartCopyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
        this.middlewareStack.use(getSsecPlugin(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCopyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: UploadPartCopyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: UploadPartCopyOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_UploadPartCopyCommand(input, context);
      }
      deserialize(output, context) {
        return de_UploadPartCopyCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js
var WriteGetObjectResponseCommand;
var init_WriteGetObjectResponseCommand = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js"() {
    "use strict";
    init_dist_es36();
    init_dist_es35();
    init_dist_es16();
    init_models_1();
    init_Aws_restXml();
    WriteGetObjectResponseCommand = class _WriteGetObjectResponseCommand extends Command {
      static getEndpointParameterInstructions() {
        return {
          UseObjectLambdaEndpoint: { type: "staticContextParams", value: true },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use(getEndpointPlugin(configuration, _WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "S3Client";
        const commandName = "WriteGetObjectResponseCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: WriteGetObjectResponseRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_WriteGetObjectResponseCommand(input, context);
      }
      deserialize(output, context) {
        return de_WriteGetObjectResponseCommand(output, context);
      }
    };
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/S3.js
var commands4, S3;
var init_S3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/S3.js"() {
    "use strict";
    init_dist_es16();
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateMultipartUploadCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectsCommand();
    init_DeleteObjectTaggingCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListObjectVersionsCommand();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
    init_S3Client();
    commands4 = {
      AbortMultipartUploadCommand,
      CompleteMultipartUploadCommand,
      CopyObjectCommand,
      CreateBucketCommand,
      CreateMultipartUploadCommand,
      DeleteBucketCommand,
      DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand,
      DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand,
      DeleteObjectCommand,
      DeleteObjectsCommand,
      DeleteObjectTaggingCommand,
      DeletePublicAccessBlockCommand,
      GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand,
      GetBucketEncryptionCommand,
      GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand,
      GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand,
      GetBucketLoggingCommand,
      GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand,
      GetBucketVersioningCommand,
      GetBucketWebsiteCommand,
      GetObjectCommand,
      GetObjectAclCommand,
      GetObjectAttributesCommand,
      GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand,
      GetObjectRetentionCommand,
      GetObjectTaggingCommand,
      GetObjectTorrentCommand,
      GetPublicAccessBlockCommand,
      HeadBucketCommand,
      HeadObjectCommand,
      ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand,
      ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand,
      ListMultipartUploadsCommand,
      ListObjectsCommand,
      ListObjectsV2Command,
      ListObjectVersionsCommand,
      ListPartsCommand,
      PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand,
      PutBucketEncryptionCommand,
      PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand,
      PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand,
      PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand,
      PutBucketVersioningCommand,
      PutBucketWebsiteCommand,
      PutObjectCommand,
      PutObjectAclCommand,
      PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand,
      PutObjectRetentionCommand,
      PutObjectTaggingCommand,
      PutPublicAccessBlockCommand,
      RestoreObjectCommand,
      SelectObjectContentCommand,
      UploadPartCommand,
      UploadPartCopyCommand,
      WriteGetObjectResponseCommand
    };
    S3 = class extends S3Client {
    };
    createAggregatedClient(commands4, S3);
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/commands/index.js
var init_commands3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/commands/index.js"() {
    "use strict";
    init_AbortMultipartUploadCommand();
    init_CompleteMultipartUploadCommand();
    init_CopyObjectCommand();
    init_CreateBucketCommand();
    init_CreateMultipartUploadCommand();
    init_DeleteBucketAnalyticsConfigurationCommand();
    init_DeleteBucketCommand();
    init_DeleteBucketCorsCommand();
    init_DeleteBucketEncryptionCommand();
    init_DeleteBucketIntelligentTieringConfigurationCommand();
    init_DeleteBucketInventoryConfigurationCommand();
    init_DeleteBucketLifecycleCommand();
    init_DeleteBucketMetricsConfigurationCommand();
    init_DeleteBucketOwnershipControlsCommand();
    init_DeleteBucketPolicyCommand();
    init_DeleteBucketReplicationCommand();
    init_DeleteBucketTaggingCommand();
    init_DeleteBucketWebsiteCommand();
    init_DeleteObjectCommand();
    init_DeleteObjectTaggingCommand();
    init_DeleteObjectsCommand();
    init_DeletePublicAccessBlockCommand();
    init_GetBucketAccelerateConfigurationCommand();
    init_GetBucketAclCommand();
    init_GetBucketAnalyticsConfigurationCommand();
    init_GetBucketCorsCommand();
    init_GetBucketEncryptionCommand();
    init_GetBucketIntelligentTieringConfigurationCommand();
    init_GetBucketInventoryConfigurationCommand();
    init_GetBucketLifecycleConfigurationCommand();
    init_GetBucketLocationCommand();
    init_GetBucketLoggingCommand();
    init_GetBucketMetricsConfigurationCommand();
    init_GetBucketNotificationConfigurationCommand();
    init_GetBucketOwnershipControlsCommand();
    init_GetBucketPolicyCommand();
    init_GetBucketPolicyStatusCommand();
    init_GetBucketReplicationCommand();
    init_GetBucketRequestPaymentCommand();
    init_GetBucketTaggingCommand();
    init_GetBucketVersioningCommand();
    init_GetBucketWebsiteCommand();
    init_GetObjectAclCommand();
    init_GetObjectAttributesCommand();
    init_GetObjectCommand();
    init_GetObjectLegalHoldCommand();
    init_GetObjectLockConfigurationCommand();
    init_GetObjectRetentionCommand();
    init_GetObjectTaggingCommand();
    init_GetObjectTorrentCommand();
    init_GetPublicAccessBlockCommand();
    init_HeadBucketCommand();
    init_HeadObjectCommand();
    init_ListBucketAnalyticsConfigurationsCommand();
    init_ListBucketIntelligentTieringConfigurationsCommand();
    init_ListBucketInventoryConfigurationsCommand();
    init_ListBucketMetricsConfigurationsCommand();
    init_ListBucketsCommand();
    init_ListMultipartUploadsCommand();
    init_ListObjectVersionsCommand();
    init_ListObjectsCommand();
    init_ListObjectsV2Command();
    init_ListPartsCommand();
    init_PutBucketAccelerateConfigurationCommand();
    init_PutBucketAclCommand();
    init_PutBucketAnalyticsConfigurationCommand();
    init_PutBucketCorsCommand();
    init_PutBucketEncryptionCommand();
    init_PutBucketIntelligentTieringConfigurationCommand();
    init_PutBucketInventoryConfigurationCommand();
    init_PutBucketLifecycleConfigurationCommand();
    init_PutBucketLoggingCommand();
    init_PutBucketMetricsConfigurationCommand();
    init_PutBucketNotificationConfigurationCommand();
    init_PutBucketOwnershipControlsCommand();
    init_PutBucketPolicyCommand();
    init_PutBucketReplicationCommand();
    init_PutBucketRequestPaymentCommand();
    init_PutBucketTaggingCommand();
    init_PutBucketVersioningCommand();
    init_PutBucketWebsiteCommand();
    init_PutObjectAclCommand();
    init_PutObjectCommand();
    init_PutObjectLegalHoldCommand();
    init_PutObjectLockConfigurationCommand();
    init_PutObjectRetentionCommand();
    init_PutObjectTaggingCommand();
    init_PutPublicAccessBlockCommand();
    init_RestoreObjectCommand();
    init_SelectObjectContentCommand();
    init_UploadPartCommand();
    init_UploadPartCopyCommand();
    init_WriteGetObjectResponseCommand();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/pagination/Interfaces.js
var init_Interfaces2 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/Interfaces.js"() {
    "use strict";
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js
function paginateListObjectsV2(config2, input, ...additionalArguments) {
  return __asyncGenerator(this, null, function* () {
    let token = config2.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input.ContinuationToken = token;
      input["MaxKeys"] = config2.pageSize;
      if (config2.client instanceof S3Client) {
        page = yield new __await(makePagedClientRequest(config2.client, input, ...additionalArguments));
      } else {
        throw new Error("Invalid client, expected S3 | S3Client");
      }
      yield page;
      const prevToken = token;
      token = page.NextContinuationToken;
      hasNext = !!(token && (!config2.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  });
}
var makePagedClientRequest;
var init_ListObjectsV2Paginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js"() {
    "use strict";
    init_ListObjectsV2Command();
    init_S3Client();
    makePagedClientRequest = (client, input, ...args) => __async(void 0, null, function* () {
      return yield client.send(new ListObjectsV2Command(input), ...args);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js
function paginateListParts(config2, input, ...additionalArguments) {
  return __asyncGenerator(this, null, function* () {
    let token = config2.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input.PartNumberMarker = token;
      input["MaxParts"] = config2.pageSize;
      if (config2.client instanceof S3Client) {
        page = yield new __await(makePagedClientRequest2(config2.client, input, ...additionalArguments));
      } else {
        throw new Error("Invalid client, expected S3 | S3Client");
      }
      yield page;
      const prevToken = token;
      token = page.NextPartNumberMarker;
      hasNext = !!(token && (!config2.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  });
}
var makePagedClientRequest2;
var init_ListPartsPaginator = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js"() {
    "use strict";
    init_ListPartsCommand();
    init_S3Client();
    makePagedClientRequest2 = (client, input, ...args) => __async(void 0, null, function* () {
      return yield client.send(new ListPartsCommand(input), ...args);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js
var init_pagination4 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js"() {
    "use strict";
    init_Interfaces2();
    init_ListObjectsV2Paginator();
    init_ListPartsPaginator();
  }
});

// node_modules/@smithy/util-waiter/dist-es/utils/sleep.js
var sleep;
var init_sleep = __esm({
  "node_modules/@smithy/util-waiter/dist-es/utils/sleep.js"() {
    "use strict";
    sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
  }
});

// node_modules/@smithy/util-waiter/dist-es/waiter.js
var waiterServiceDefaults, WaiterState, checkExceptions;
var init_waiter3 = __esm({
  "node_modules/@smithy/util-waiter/dist-es/waiter.js"() {
    "use strict";
    waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState || (WaiterState = {}));
    checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Request was aborted"
        }))}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Waiter has timed out"
        }))}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
  }
});

// node_modules/@smithy/util-waiter/dist-es/poller.js
var exponentialBackoffWithJitter, randomInRange, runPolling;
var init_poller = __esm({
  "node_modules/@smithy/util-waiter/dist-es/poller.js"() {
    "use strict";
    init_sleep();
    init_waiter3();
    exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    randomInRange = (min, max) => min + Math.random() * (max - min);
    runPolling = (_0, _1, _2) => __async(void 0, [_0, _1, _2], function* ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) {
      var _a;
      const { state, reason } = yield acceptorChecks(client, input);
      if (state !== WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController == null ? void 0 : abortController.signal) == null ? void 0 : _a.aborted) || (abortSignal == null ? void 0 : abortSignal.aborted)) {
          return { state: WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: WaiterState.TIMEOUT };
        }
        yield sleep(delay);
        const { state: state2, reason: reason2 } = yield acceptorChecks(client, input);
        if (state2 !== WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    });
  }
});

// node_modules/@smithy/util-waiter/dist-es/utils/validate.js
var validateWaiterOptions;
var init_validate = __esm({
  "node_modules/@smithy/util-waiter/dist-es/utils/validate.js"() {
    "use strict";
    validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
  }
});

// node_modules/@smithy/util-waiter/dist-es/utils/index.js
var init_utils3 = __esm({
  "node_modules/@smithy/util-waiter/dist-es/utils/index.js"() {
    "use strict";
    init_sleep();
    init_validate();
  }
});

// node_modules/@smithy/util-waiter/dist-es/createWaiter.js
var abortTimeout, createWaiter;
var init_createWaiter = __esm({
  "node_modules/@smithy/util-waiter/dist-es/createWaiter.js"() {
    "use strict";
    init_poller();
    init_utils3();
    init_waiter3();
    abortTimeout = (abortSignal) => __async(void 0, null, function* () {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: WaiterState.ABORTED });
      });
    });
    createWaiter = (options, input, acceptorChecks) => __async(void 0, null, function* () {
      const params = __spreadValues(__spreadValues({}, waiterServiceDefaults), options);
      validateWaiterOptions(params);
      const exitConditions = [runPolling(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    });
  }
});

// node_modules/@smithy/util-waiter/dist-es/index.js
var init_dist_es67 = __esm({
  "node_modules/@smithy/util-waiter/dist-es/index.js"() {
    "use strict";
    init_createWaiter();
    init_waiter3();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js
var checkState, waitForBucketExists, waitUntilBucketExists;
var init_waitForBucketExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js"() {
    "use strict";
    init_dist_es67();
    init_HeadBucketCommand();
    checkState = (client, input) => __async(void 0, null, function* () {
      let reason;
      try {
        const result = yield client.send(new HeadBucketCommand(input));
        reason = result;
        return { state: WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: WaiterState.RETRY, reason };
        }
      }
      return { state: WaiterState.RETRY, reason };
    });
    waitForBucketExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    });
    waitUntilBucketExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = yield createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return checkExceptions(result);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js
var checkState2, waitForBucketNotExists, waitUntilBucketNotExists;
var init_waitForBucketNotExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js"() {
    "use strict";
    init_dist_es67();
    init_HeadBucketCommand();
    checkState2 = (client, input) => __async(void 0, null, function* () {
      let reason;
      try {
        const result = yield client.send(new HeadBucketCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: WaiterState.SUCCESS, reason };
        }
      }
      return { state: WaiterState.RETRY, reason };
    });
    waitForBucketNotExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState2);
    });
    waitUntilBucketNotExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = yield createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState2);
      return checkExceptions(result);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js
var checkState3, waitForObjectExists, waitUntilObjectExists;
var init_waitForObjectExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js"() {
    "use strict";
    init_dist_es67();
    init_HeadObjectCommand();
    checkState3 = (client, input) => __async(void 0, null, function* () {
      let reason;
      try {
        const result = yield client.send(new HeadObjectCommand(input));
        reason = result;
        return { state: WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: WaiterState.RETRY, reason };
        }
      }
      return { state: WaiterState.RETRY, reason };
    });
    waitForObjectExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState3);
    });
    waitUntilObjectExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = yield createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState3);
      return checkExceptions(result);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js
var checkState4, waitForObjectNotExists, waitUntilObjectNotExists;
var init_waitForObjectNotExists = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js"() {
    "use strict";
    init_dist_es67();
    init_HeadObjectCommand();
    checkState4 = (client, input) => __async(void 0, null, function* () {
      let reason;
      try {
        const result = yield client.send(new HeadObjectCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: WaiterState.SUCCESS, reason };
        }
      }
      return { state: WaiterState.RETRY, reason };
    });
    waitForObjectNotExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState4);
    });
    waitUntilObjectNotExists = (params, input) => __async(void 0, null, function* () {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = yield createWaiter(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState4);
      return checkExceptions(result);
    });
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js
var init_waiters = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js"() {
    "use strict";
    init_waitForBucketExists();
    init_waitForBucketNotExists();
    init_waitForObjectExists();
    init_waitForObjectNotExists();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/models/index.js
var init_models3 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/models/index.js"() {
    "use strict";
    init_models_03();
    init_models_1();
  }
});

// node_modules/@aws-sdk/client-s3/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  $Command: () => Command,
  AbortMultipartUploadCommand: () => AbortMultipartUploadCommand,
  AnalyticsFilter: () => AnalyticsFilter,
  AnalyticsS3ExportFileFormat: () => AnalyticsS3ExportFileFormat,
  ArchiveStatus: () => ArchiveStatus,
  BucketAccelerateStatus: () => BucketAccelerateStatus,
  BucketAlreadyExists: () => BucketAlreadyExists,
  BucketAlreadyOwnedByYou: () => BucketAlreadyOwnedByYou,
  BucketCannedACL: () => BucketCannedACL,
  BucketLocationConstraint: () => BucketLocationConstraint,
  BucketLogsPermission: () => BucketLogsPermission,
  BucketVersioningStatus: () => BucketVersioningStatus,
  ChecksumAlgorithm: () => ChecksumAlgorithm,
  ChecksumMode: () => ChecksumMode,
  CompleteMultipartUploadCommand: () => CompleteMultipartUploadCommand,
  CompleteMultipartUploadOutputFilterSensitiveLog: () => CompleteMultipartUploadOutputFilterSensitiveLog,
  CompleteMultipartUploadRequestFilterSensitiveLog: () => CompleteMultipartUploadRequestFilterSensitiveLog,
  CompressionType: () => CompressionType,
  CopyObjectCommand: () => CopyObjectCommand,
  CopyObjectOutputFilterSensitiveLog: () => CopyObjectOutputFilterSensitiveLog,
  CopyObjectRequestFilterSensitiveLog: () => CopyObjectRequestFilterSensitiveLog,
  CreateBucketCommand: () => CreateBucketCommand,
  CreateMultipartUploadCommand: () => CreateMultipartUploadCommand,
  CreateMultipartUploadOutputFilterSensitiveLog: () => CreateMultipartUploadOutputFilterSensitiveLog,
  CreateMultipartUploadRequestFilterSensitiveLog: () => CreateMultipartUploadRequestFilterSensitiveLog,
  DeleteBucketAnalyticsConfigurationCommand: () => DeleteBucketAnalyticsConfigurationCommand,
  DeleteBucketCommand: () => DeleteBucketCommand,
  DeleteBucketCorsCommand: () => DeleteBucketCorsCommand,
  DeleteBucketEncryptionCommand: () => DeleteBucketEncryptionCommand,
  DeleteBucketIntelligentTieringConfigurationCommand: () => DeleteBucketIntelligentTieringConfigurationCommand,
  DeleteBucketInventoryConfigurationCommand: () => DeleteBucketInventoryConfigurationCommand,
  DeleteBucketLifecycleCommand: () => DeleteBucketLifecycleCommand,
  DeleteBucketMetricsConfigurationCommand: () => DeleteBucketMetricsConfigurationCommand,
  DeleteBucketOwnershipControlsCommand: () => DeleteBucketOwnershipControlsCommand,
  DeleteBucketPolicyCommand: () => DeleteBucketPolicyCommand,
  DeleteBucketReplicationCommand: () => DeleteBucketReplicationCommand,
  DeleteBucketTaggingCommand: () => DeleteBucketTaggingCommand,
  DeleteBucketWebsiteCommand: () => DeleteBucketWebsiteCommand,
  DeleteMarkerReplicationStatus: () => DeleteMarkerReplicationStatus,
  DeleteObjectCommand: () => DeleteObjectCommand,
  DeleteObjectTaggingCommand: () => DeleteObjectTaggingCommand,
  DeleteObjectsCommand: () => DeleteObjectsCommand,
  DeletePublicAccessBlockCommand: () => DeletePublicAccessBlockCommand,
  EncodingType: () => EncodingType,
  EncryptionFilterSensitiveLog: () => EncryptionFilterSensitiveLog,
  Event: () => Event,
  ExistingObjectReplicationStatus: () => ExistingObjectReplicationStatus,
  ExpirationStatus: () => ExpirationStatus,
  ExpressionType: () => ExpressionType,
  FileHeaderInfo: () => FileHeaderInfo,
  FilterRuleName: () => FilterRuleName,
  GetBucketAccelerateConfigurationCommand: () => GetBucketAccelerateConfigurationCommand,
  GetBucketAclCommand: () => GetBucketAclCommand,
  GetBucketAnalyticsConfigurationCommand: () => GetBucketAnalyticsConfigurationCommand,
  GetBucketCorsCommand: () => GetBucketCorsCommand,
  GetBucketEncryptionCommand: () => GetBucketEncryptionCommand,
  GetBucketEncryptionOutputFilterSensitiveLog: () => GetBucketEncryptionOutputFilterSensitiveLog,
  GetBucketIntelligentTieringConfigurationCommand: () => GetBucketIntelligentTieringConfigurationCommand,
  GetBucketInventoryConfigurationCommand: () => GetBucketInventoryConfigurationCommand,
  GetBucketInventoryConfigurationOutputFilterSensitiveLog: () => GetBucketInventoryConfigurationOutputFilterSensitiveLog,
  GetBucketLifecycleConfigurationCommand: () => GetBucketLifecycleConfigurationCommand,
  GetBucketLocationCommand: () => GetBucketLocationCommand,
  GetBucketLoggingCommand: () => GetBucketLoggingCommand,
  GetBucketMetricsConfigurationCommand: () => GetBucketMetricsConfigurationCommand,
  GetBucketNotificationConfigurationCommand: () => GetBucketNotificationConfigurationCommand,
  GetBucketOwnershipControlsCommand: () => GetBucketOwnershipControlsCommand,
  GetBucketPolicyCommand: () => GetBucketPolicyCommand,
  GetBucketPolicyStatusCommand: () => GetBucketPolicyStatusCommand,
  GetBucketReplicationCommand: () => GetBucketReplicationCommand,
  GetBucketRequestPaymentCommand: () => GetBucketRequestPaymentCommand,
  GetBucketTaggingCommand: () => GetBucketTaggingCommand,
  GetBucketVersioningCommand: () => GetBucketVersioningCommand,
  GetBucketWebsiteCommand: () => GetBucketWebsiteCommand,
  GetObjectAclCommand: () => GetObjectAclCommand,
  GetObjectAttributesCommand: () => GetObjectAttributesCommand,
  GetObjectAttributesRequestFilterSensitiveLog: () => GetObjectAttributesRequestFilterSensitiveLog,
  GetObjectCommand: () => GetObjectCommand,
  GetObjectLegalHoldCommand: () => GetObjectLegalHoldCommand,
  GetObjectLockConfigurationCommand: () => GetObjectLockConfigurationCommand,
  GetObjectOutputFilterSensitiveLog: () => GetObjectOutputFilterSensitiveLog,
  GetObjectRequestFilterSensitiveLog: () => GetObjectRequestFilterSensitiveLog,
  GetObjectRetentionCommand: () => GetObjectRetentionCommand,
  GetObjectTaggingCommand: () => GetObjectTaggingCommand,
  GetObjectTorrentCommand: () => GetObjectTorrentCommand,
  GetObjectTorrentOutputFilterSensitiveLog: () => GetObjectTorrentOutputFilterSensitiveLog,
  GetPublicAccessBlockCommand: () => GetPublicAccessBlockCommand,
  HeadBucketCommand: () => HeadBucketCommand,
  HeadObjectCommand: () => HeadObjectCommand,
  HeadObjectOutputFilterSensitiveLog: () => HeadObjectOutputFilterSensitiveLog,
  HeadObjectRequestFilterSensitiveLog: () => HeadObjectRequestFilterSensitiveLog,
  IntelligentTieringAccessTier: () => IntelligentTieringAccessTier,
  IntelligentTieringStatus: () => IntelligentTieringStatus,
  InvalidObjectState: () => InvalidObjectState,
  InventoryConfigurationFilterSensitiveLog: () => InventoryConfigurationFilterSensitiveLog,
  InventoryDestinationFilterSensitiveLog: () => InventoryDestinationFilterSensitiveLog,
  InventoryEncryptionFilterSensitiveLog: () => InventoryEncryptionFilterSensitiveLog,
  InventoryFormat: () => InventoryFormat,
  InventoryFrequency: () => InventoryFrequency,
  InventoryIncludedObjectVersions: () => InventoryIncludedObjectVersions,
  InventoryOptionalField: () => InventoryOptionalField,
  InventoryS3BucketDestinationFilterSensitiveLog: () => InventoryS3BucketDestinationFilterSensitiveLog,
  JSONType: () => JSONType,
  LifecycleRuleFilter: () => LifecycleRuleFilter,
  ListBucketAnalyticsConfigurationsCommand: () => ListBucketAnalyticsConfigurationsCommand,
  ListBucketIntelligentTieringConfigurationsCommand: () => ListBucketIntelligentTieringConfigurationsCommand,
  ListBucketInventoryConfigurationsCommand: () => ListBucketInventoryConfigurationsCommand,
  ListBucketInventoryConfigurationsOutputFilterSensitiveLog: () => ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
  ListBucketMetricsConfigurationsCommand: () => ListBucketMetricsConfigurationsCommand,
  ListBucketsCommand: () => ListBucketsCommand,
  ListMultipartUploadsCommand: () => ListMultipartUploadsCommand,
  ListObjectVersionsCommand: () => ListObjectVersionsCommand,
  ListObjectsCommand: () => ListObjectsCommand,
  ListObjectsV2Command: () => ListObjectsV2Command,
  ListPartsCommand: () => ListPartsCommand,
  ListPartsRequestFilterSensitiveLog: () => ListPartsRequestFilterSensitiveLog,
  MFADelete: () => MFADelete,
  MFADeleteStatus: () => MFADeleteStatus,
  MetadataDirective: () => MetadataDirective,
  MetricsFilter: () => MetricsFilter,
  MetricsStatus: () => MetricsStatus,
  NoSuchBucket: () => NoSuchBucket,
  NoSuchKey: () => NoSuchKey,
  NoSuchUpload: () => NoSuchUpload,
  NotFound: () => NotFound,
  ObjectAlreadyInActiveTierError: () => ObjectAlreadyInActiveTierError,
  ObjectAttributes: () => ObjectAttributes,
  ObjectCannedACL: () => ObjectCannedACL,
  ObjectLockEnabled: () => ObjectLockEnabled,
  ObjectLockLegalHoldStatus: () => ObjectLockLegalHoldStatus,
  ObjectLockMode: () => ObjectLockMode,
  ObjectLockRetentionMode: () => ObjectLockRetentionMode,
  ObjectNotInActiveTierError: () => ObjectNotInActiveTierError,
  ObjectOwnership: () => ObjectOwnership,
  ObjectStorageClass: () => ObjectStorageClass,
  ObjectVersionStorageClass: () => ObjectVersionStorageClass,
  OptionalObjectAttributes: () => OptionalObjectAttributes,
  OutputLocationFilterSensitiveLog: () => OutputLocationFilterSensitiveLog,
  OwnerOverride: () => OwnerOverride,
  Payer: () => Payer,
  Permission: () => Permission,
  Protocol: () => Protocol,
  PutBucketAccelerateConfigurationCommand: () => PutBucketAccelerateConfigurationCommand,
  PutBucketAclCommand: () => PutBucketAclCommand,
  PutBucketAnalyticsConfigurationCommand: () => PutBucketAnalyticsConfigurationCommand,
  PutBucketCorsCommand: () => PutBucketCorsCommand,
  PutBucketEncryptionCommand: () => PutBucketEncryptionCommand,
  PutBucketEncryptionRequestFilterSensitiveLog: () => PutBucketEncryptionRequestFilterSensitiveLog,
  PutBucketIntelligentTieringConfigurationCommand: () => PutBucketIntelligentTieringConfigurationCommand,
  PutBucketInventoryConfigurationCommand: () => PutBucketInventoryConfigurationCommand,
  PutBucketInventoryConfigurationRequestFilterSensitiveLog: () => PutBucketInventoryConfigurationRequestFilterSensitiveLog,
  PutBucketLifecycleConfigurationCommand: () => PutBucketLifecycleConfigurationCommand,
  PutBucketLoggingCommand: () => PutBucketLoggingCommand,
  PutBucketMetricsConfigurationCommand: () => PutBucketMetricsConfigurationCommand,
  PutBucketNotificationConfigurationCommand: () => PutBucketNotificationConfigurationCommand,
  PutBucketOwnershipControlsCommand: () => PutBucketOwnershipControlsCommand,
  PutBucketPolicyCommand: () => PutBucketPolicyCommand,
  PutBucketReplicationCommand: () => PutBucketReplicationCommand,
  PutBucketRequestPaymentCommand: () => PutBucketRequestPaymentCommand,
  PutBucketTaggingCommand: () => PutBucketTaggingCommand,
  PutBucketVersioningCommand: () => PutBucketVersioningCommand,
  PutBucketWebsiteCommand: () => PutBucketWebsiteCommand,
  PutObjectAclCommand: () => PutObjectAclCommand,
  PutObjectCommand: () => PutObjectCommand,
  PutObjectLegalHoldCommand: () => PutObjectLegalHoldCommand,
  PutObjectLockConfigurationCommand: () => PutObjectLockConfigurationCommand,
  PutObjectOutputFilterSensitiveLog: () => PutObjectOutputFilterSensitiveLog,
  PutObjectRequestFilterSensitiveLog: () => PutObjectRequestFilterSensitiveLog,
  PutObjectRetentionCommand: () => PutObjectRetentionCommand,
  PutObjectTaggingCommand: () => PutObjectTaggingCommand,
  PutPublicAccessBlockCommand: () => PutPublicAccessBlockCommand,
  QuoteFields: () => QuoteFields,
  ReplicaModificationsStatus: () => ReplicaModificationsStatus,
  ReplicationRuleFilter: () => ReplicationRuleFilter,
  ReplicationRuleStatus: () => ReplicationRuleStatus,
  ReplicationStatus: () => ReplicationStatus,
  ReplicationTimeStatus: () => ReplicationTimeStatus,
  RequestCharged: () => RequestCharged,
  RequestPayer: () => RequestPayer,
  RestoreObjectCommand: () => RestoreObjectCommand,
  RestoreObjectRequestFilterSensitiveLog: () => RestoreObjectRequestFilterSensitiveLog,
  RestoreRequestFilterSensitiveLog: () => RestoreRequestFilterSensitiveLog,
  RestoreRequestType: () => RestoreRequestType,
  S3: () => S3,
  S3Client: () => S3Client,
  S3LocationFilterSensitiveLog: () => S3LocationFilterSensitiveLog,
  S3ServiceException: () => S3ServiceException,
  SSEKMSFilterSensitiveLog: () => SSEKMSFilterSensitiveLog,
  SelectObjectContentCommand: () => SelectObjectContentCommand,
  SelectObjectContentEventStream: () => SelectObjectContentEventStream,
  SelectObjectContentEventStreamFilterSensitiveLog: () => SelectObjectContentEventStreamFilterSensitiveLog,
  SelectObjectContentOutputFilterSensitiveLog: () => SelectObjectContentOutputFilterSensitiveLog,
  SelectObjectContentRequestFilterSensitiveLog: () => SelectObjectContentRequestFilterSensitiveLog,
  ServerSideEncryption: () => ServerSideEncryption,
  ServerSideEncryptionByDefaultFilterSensitiveLog: () => ServerSideEncryptionByDefaultFilterSensitiveLog,
  ServerSideEncryptionConfigurationFilterSensitiveLog: () => ServerSideEncryptionConfigurationFilterSensitiveLog,
  ServerSideEncryptionRuleFilterSensitiveLog: () => ServerSideEncryptionRuleFilterSensitiveLog,
  SseKmsEncryptedObjectsStatus: () => SseKmsEncryptedObjectsStatus,
  StorageClass: () => StorageClass,
  StorageClassAnalysisSchemaVersion: () => StorageClassAnalysisSchemaVersion,
  TaggingDirective: () => TaggingDirective,
  Tier: () => Tier,
  TransitionStorageClass: () => TransitionStorageClass,
  Type: () => Type,
  UploadPartCommand: () => UploadPartCommand,
  UploadPartCopyCommand: () => UploadPartCopyCommand,
  UploadPartCopyOutputFilterSensitiveLog: () => UploadPartCopyOutputFilterSensitiveLog,
  UploadPartCopyRequestFilterSensitiveLog: () => UploadPartCopyRequestFilterSensitiveLog,
  UploadPartOutputFilterSensitiveLog: () => UploadPartOutputFilterSensitiveLog,
  UploadPartRequestFilterSensitiveLog: () => UploadPartRequestFilterSensitiveLog,
  WriteGetObjectResponseCommand: () => WriteGetObjectResponseCommand,
  WriteGetObjectResponseRequestFilterSensitiveLog: () => WriteGetObjectResponseRequestFilterSensitiveLog,
  __Client: () => Client,
  paginateListObjectsV2: () => paginateListObjectsV2,
  paginateListParts: () => paginateListParts,
  waitForBucketExists: () => waitForBucketExists,
  waitForBucketNotExists: () => waitForBucketNotExists,
  waitForObjectExists: () => waitForObjectExists,
  waitForObjectNotExists: () => waitForObjectNotExists,
  waitUntilBucketExists: () => waitUntilBucketExists,
  waitUntilBucketNotExists: () => waitUntilBucketNotExists,
  waitUntilObjectExists: () => waitUntilObjectExists,
  waitUntilObjectNotExists: () => waitUntilObjectNotExists
});
var init_dist_es68 = __esm({
  "node_modules/@aws-sdk/client-s3/dist-es/index.js"() {
    "use strict";
    init_S3Client();
    init_S3();
    init_commands3();
    init_pagination4();
    init_waiters();
    init_models3();
    init_S3ServiceException();
  }
});

// config/multer.ts
var require_multer = __commonJS({
  "config/multer.ts"(exports2, module2) {
    "use strict";
    init_logger();
    var multer5 = require("multer");
    var path3 = require("path");
    var crypt = require("crypto");
    var multerS3 = require("multer-s3");
    var { S3Client: S3Client2 } = (init_dist_es68(), __toCommonJS(dist_es_exports2));
    var aws3 = require("aws-sdk");
    var awsKey = "AKIAZXQBKBVEP24NDOU7";
    var awsKeySecret = "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";
    var awsRegion = "sa-east-1";
    var s34 = new S3Client2({
      region: awsRegion,
      credentials: {
        accessKeyId: awsKey,
        secretAccessKey: awsKeySecret
      }
    });
    var storageTypes = {
      local: multer5.diskStorage({
        destination: (req, file, cb) => {
          cb(null, path3.resolve(__dirname, "..", "tmp", "uploads"));
        },
        filename: (req, file, cb) => {
          crypt.randomBytes(16, (err, hash) => {
            if (err)
              return cb(err);
            file.key = `${hash.toString("hex")}-${file.originalname}`;
            cb(null, file.key);
          });
        }
      }),
      s3: multerS3({
        s3: s34,
        bucket: "uploadimageslider",
        contentType: multerS3.AUTO_CONTENT_TYPE,
        acl: "public-read",
        key: (req, file, cb) => {
          logger_default.info("S3");
          crypt.randomBytes(16, (err, hash) => {
            if (err)
              return cb(err);
            const fileName = `${hash.toString("hex")}-${file.originalname}`;
            cb(null, fileName);
          });
        }
      })
    };
    module2.exports = {
      dest: path3.resolve(__dirname, "..", "tmp", "uploads"),
      // Enviar para onde?
      storage: storageTypes["s3"],
      limits: {
        fileSize: 2 * 32 * 1024 * 1024
      },
      fileFilter: (req, file, cb) => {
        const allowedMimes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
        if (allowedMimes.includes(file.mimetype)) {
          cb(null, true);
        } else {
          cb(new Error("Invalid file type."));
        }
      }
    };
  }
});

// src/router.ts
var router_exports = {};
__export(router_exports, {
  default: () => router_default
});
module.exports = __toCommonJS(router_exports);
var import_express = require("express");

// src/models/User.ts
var import_mongoose = require("mongoose");
var userSchema = new import_mongoose.Schema(
  {
    id: { type: String },
    name: { type: String },
    lastName: { type: String },
    age: { type: Number },
    cep: { type: Number },
    email: { type: String },
    password: { type: String },
    role: { type: Number },
    uuid: { type: String }
  },
  {
    timestamps: true
  }
);
var UserModel = (0, import_mongoose.model)("User", userSchema, "users");

// src/controllers/userController.ts
init_logger();
var import_bcrypt = __toESM(require("bcrypt"));
var import_uuid = require("uuid");
function createUser(req, res) {
  return __async(this, null, function* () {
    try {
      const data = req.body;
      const salt = import_bcrypt.default.genSaltSync(10);
      const hash = yield import_bcrypt.default.hashSync(data.password, salt);
      data.password = hash;
      data.id;
      data.uuid = (0, import_uuid.v4)();
      const user = yield UserModel.create(data);
      return res.status(201).json(user);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}

// src/models/Product.ts
var import_mongoose2 = require("mongoose");
var productSchema = new import_mongoose2.Schema(
  {
    id: { type: String },
    title: { type: String, required: false },
    description: { type: String, required: false },
    price: { type: String, required: false },
    category: { type: String, required: false },
    unity: { type: String, required: false },
    isPromotion: { type: Boolean },
    promoPrice: { type: Number },
    nameImage: { type: String },
    size: { type: Number },
    key: { type: String },
    url: { type: String },
    createdAt: {
      type: Date,
      default: Date.now
    }
  },
  {
    timestamps: true
  }
);
productSchema.pre("save", function() {
  if (!this.url) {
    this.url = `https://lidermadeiras-api.onrender.com/files/${this.key}`;
  }
});
var ProductModel = (0, import_mongoose2.model)("Product", productSchema, "products");

// src/controllers/productController.ts
init_logger();
var multer = require("multer");
var multerConfig = (init_logger(), __toCommonJS(logger_exports));
function createProduct(req, res) {
  return __async(this, null, function* () {
    try {
      const { originalname: nameImage, size, key, location: url = "" } = req.file;
      const product = yield ProductModel.create({
        title: req.body.title,
        description: req.body.description,
        price: req.body.price,
        category: req.body.category,
        unity: req.body.unity,
        isPromotion: req.body.isPromotion ? req.body.isPromotion : false,
        promoPrice: req.body.isPromotion ? req.body.promoPrice : 0,
        nameImage,
        size,
        key,
        url
      });
      return res.status(201).json(product);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}

// src/models/Image.ts
var import_mongoose3 = require("mongoose");
var productSchema2 = new import_mongoose3.Schema(
  {
    id: { type: String },
    nameImage: { type: String },
    size: { type: Number },
    key: { type: String },
    url: { type: String },
    createdAt: {
      type: Date,
      default: Date.now
    }
  },
  {
    timestamps: true
  }
);
productSchema2.pre("save", function() {
  if (!this.url) {
    this.url = `https://lidermadeiras-api.onrender.com/files/${this.key}`;
  }
});
var ImageModel = (0, import_mongoose3.model)("Image", productSchema2, "images");

// src/controllers/imageController.ts
var multer2 = require("multer");
var multerConfig2 = require_multer();
var aws = require("aws-sdk");
var s32 = new aws.S3();
aws.config.update({
  accessKeyId: "AKIAZXQBKBVEP24NDOU7",
  secretAccessKey: "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",
  region: "sa-east-1"
  // Substitua pela sua região
});
var fs = require("fs");
var path = require("path");
var { promisify: promisify2 } = require("util");
function uploadImage(req, res) {
  return __async(this, null, function* () {
    try {
      const { originalname: nameImage, size, key, location: url = "" } = req.file;
      const image = yield ImageModel.create({
        nameImage,
        size,
        key,
        url
      });
      return res.status(201).json(image);
    } catch (e5) {
    }
  });
}

// src/services/userServices.ts
init_logger();

// src/services/tokenService.ts
var import_jsonwebtoken = __toESM(require("jsonwebtoken"));
var secret = "fabrios12361236";
var generateToken = (uuid) => {
  return import_jsonwebtoken.default.sign({ id: uuid }, secret, {
    expiresIn: "3000s",
    header: { alg: "HS256", typ: "JWT" }
  });
};
var verifyToken = (token) => {
  const verified = import_jsonwebtoken.default.verify(token, secret);
  if (verified) {
    return verified;
  }
};
var tokenService_default = {
  generateToken,
  verifyToken
};

// src/services/userServices.ts
var import_cookie = require("cookie");
var import_bcrypt2 = __toESM(require("bcrypt"));
var cookieParser = require("cookie-parser");
function findUserById(req, res) {
  return __async(this, null, function* () {
    try {
      const id = req.params.id;
      const user = yield UserModel.findOne({ uuid: id });
      if (!user) {
        return res.status(404).json({ message: "Usu\xE1rio n\xE3o encontrado" });
      }
      return res.status(200).json(user);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}
function login(req, res) {
  return __async(this, null, function* () {
    try {
      const { email, password } = req.body;
      const checkUser = yield UserModel.findOne({ email });
      if (checkUser) {
        if (checkUser.password) {
          const isPasswordValid = import_bcrypt2.default.compareSync(
            password,
            // Senha digitada no POSTMAN (requisição)
            checkUser.password
            // Senha do model / Banco de dados
          );
          if (isPasswordValid) {
            const userId = checkUser.uuid;
            if (userId) {
              const token = tokenService_default.generateToken(userId);
              res.setHeader("Set-Cookie", [
                (0, import_cookie.serialize)("userId", userId, {
                  httpOnly: true,
                  maxAge: 100,
                  // Define a expiração do cookie (em segundos)
                  sameSite: "none",
                  // Define a política SameSite para cross-site cookies
                  secure: true
                  // Somente envia o cookie em conexões HTTPS
                }),
                (0, import_cookie.serialize)("JWT", token, {
                  httpOnly: true,
                  maxAge: 100,
                  // Define a expiração do cookie (em segundos)
                  sameSite: "none",
                  // Define a política SameSite para cross-site cookies
                  secure: true
                  // Somente envia o cookie em conexões HTTPS
                })
              ]);
              return res.status(201).json({ message: "Login bem-sucedido!", userId, token });
            }
          } else {
            return res.status(401).json({ message: "Senha inv\xE1lida!" });
          }
        } else {
          return res.status(404).json({ message: "Senha inv\xE1lida!" });
        }
      } else {
        return res.status(404).json({ message: "Email inv\xE1lido!" });
      }
    } catch (error) {
      logger_default.error("Erro no login:", error);
      return res.status(500).json({ message: "Erro no servidor." });
    }
  });
}
function setCookie(req, res) {
  return __async(this, null, function* () {
    try {
      res.cookie("cookieName", "cookieValue", {
        sameSite: "strict",
        // SameSite pode ser 'strict', 'lax', 'none', etc.
        secure: true,
        // Define como true para enviar apenas por conexões HTTPS
        httpOnly: false
        // Evita que o cookie seja acessado por scripts do lado do cliente
      });
      res.send("Cookie configurado com sucesso!");
    } catch (error) {
      logger_default.error("Erro no logout:", error);
      return res.status(500).json({ message: "Erro no servidor." });
    }
  });
}

// src/services/productService.ts
init_logger();
var multer3 = require("multer");
var multerConfig3 = require_multer();
var aws2 = require("aws-sdk");
var s33 = new aws2.S3();
aws2.config.update({
  accessKeyId: "AKIAZXQBKBVEP24NDOU7",
  secretAccessKey: "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",
  region: "sa-east-1"
  // Substitua pela sua região
});
var fs2 = require("fs");
var path2 = require("path");
var { promisify: promisify3 } = require("util");
function findProducts(req, res) {
  return __async(this, null, function* () {
    try {
      const products = yield ProductModel.find();
      if (!products) {
        return res.status(404).json({ message: "N\xE3o h\xE1 produtos cadastrados!" });
      }
      return res.status(200).json(products);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}
function deleteProductById(req, res) {
  return __async(this, null, function* () {
    try {
      const id = req.params.id;
      const product = yield ProductModel.findOne({ _id: id });
      if (!product) {
        return res.status(404).json({ message: "Produto n\xE3o encontrado!" });
      }
      yield product.deleteOne();
      return res.status(204).send();
    } catch (e5) {
      logger_default.error(`Erro no sistema ${e5.message}`);
    }
  });
}
function deleteImageByProduct(req, res) {
  return __async(this, null, function* () {
    try {
      const id = req.params.id;
      const product = yield ProductModel.findOne({ _id: id });
      if (!product) {
        return res.status(404).json({ message: "Produto n\xE3o encontrado!" });
      }
      if (process.env.STORAGE_TYPE === "s3") {
        yield s33.deleteObject({
          Bucket: process.env.AWS_BUCKET_NAME,
          Key: product.key
          // Use a chave do produto
        }).promise();
      } else {
        yield promisify3(fs2.unlink)(
          path2.resolve(__dirname, "..", "..", "tmp", "uploads", product.key)
        );
      }
      product.url = " ";
      yield product.save();
      return res.status(204).send();
    } catch (e5) {
      logger_default.error(`Erro no sistema ${e5.message}`);
    }
  });
}
function findProductById(req, res) {
  return __async(this, null, function* () {
    try {
      const id = req.params.id;
      const product = yield ProductModel.findOne({ _id: id });
      if (!product) {
        return res.status(404).json({ message: "Produto n\xE3o encontrado!" });
      }
      return res.status(200).json(product);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}
function findProductsByCategory(req, res) {
  return __async(this, null, function* () {
    try {
      const { category } = req.params;
      const { isPromotion } = req.query;
      if (!category) {
        return res.status(404).json({ message: "Categ\xF3ria n\xE3o informada!" });
      }
      let selectedCategories = Array.isArray(category) ? category : [category];
      let products = yield ProductModel.find();
      if (isPromotion !== void 0) {
        if (isPromotion === "true" && category === "all") {
          products = products.filter((product) => product.isPromotion);
        } else if (isPromotion === "true" && category !== "all") {
          products = products.filter(
            (product) => product.isPromotion && product.category === category
          );
        } else if (isPromotion === "false") {
          if (category !== "all") {
            products = products.filter(
              (product) => product.category === category && products
            );
          } else {
            products;
          }
        }
        return res.status(200).json(products);
      }
      products = products.filter(
        (product) => selectedCategories.includes(product.category)
      );
      return res.json(products);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
    }
  });
}
function updateProduct(req, res) {
  return __async(this, null, function* () {
    try {
      const id = req.params.id;
      const product = yield ProductModel.findOne({ _id: id });
      if (!product) {
        return res.status(404).json({ message: "Produto n\xE3o encontrado!" });
      }
      const {
        title,
        description,
        price,
        category,
        unity,
        isPromotion,
        promoPrice,
        url
      } = req.body;
      product.title = title;
      product.description = description;
      product.price = price;
      product.category = category;
      product.unity = unity;
      product.isPromotion = isPromotion;
      product.promoPrice = promoPrice;
      product.url = url;
      yield product.save();
      return res.status(200).json(product);
    } catch (e5) {
      logger_default.error(`Erro no sistema: ${e5.message}`);
      return res.status(500).json({ message: "Erro interno no servidor." });
    }
  });
}

// src/router.ts
var multer4 = require("multer");
var multerConfig4 = require_multer();
var router = (0, import_express.Router)();
var router_default = router.get("/test", (req, res) => {
  res.status(200).send("API Working!!!");
}).post("/user", createUser).post("/login", login).get("/user/:id", findUserById).get("/setCookie", setCookie).post("/product", multer4(multerConfig4).single("file"), createProduct).post("/image", multer4(multerConfig4).single("file"), uploadImage).get("/product", findProducts).get("/product/:id", findProductById).get("/product/category/:category", findProductsByCategory).delete("/product/:id", deleteProductById).delete("/image/:id", deleteImageByProduct).put("/product/:id", updateProduct);
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
